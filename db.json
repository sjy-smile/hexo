{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/default_cover2.jpg","path":"img/default_cover2.jpg","modified":0,"renderable":0},{"_id":"source/img/default_cover1.jpg","path":"img/default_cover1.jpg","modified":0,"renderable":0},{"_id":"source/img/default_cover3.jpg","path":"img/default_cover3.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.jpg","path":"img/favicon.jpg","modified":0,"renderable":0},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":0},{"_id":"source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":0},{"_id":"source/img/top-img/top-img1.jpg","path":"img/top-img/top-img1.jpg","modified":0,"renderable":0},{"_id":"source/img/top-img/top-img2.jpg","path":"img/top-img/top-img2.jpg","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ceaf778fe36e77d3f691e24690b6f66c09bf3a4c","modified":1678775459100},{"_id":"source/_posts/install.md","hash":"eb143df2742caac1002c5590972f6b77776813d0","modified":1678779564317},{"_id":"source/_data/link.yml","hash":"cde25f0e89a600af17ef4c758209e37164081afb","modified":1678775459101},{"_id":"source/_posts/循环队列代码实现.md","hash":"acd398c3cd8f0cde23b2d216bb9bd8d3e3ea8e61","modified":1683796443430},{"_id":"source/_posts/数据结构单链表代码.md","hash":"bf74e5486f40e61f550fbf05b19c43b86acde304","modified":1683609390986},{"_id":"source/_posts/hello-world.md","hash":"73e3c0a581f3e1d457dab77c21525d769788c3f4","modified":1678779564317},{"_id":"source/categories/index.md","hash":"a6969095b878c159115315052efadea41bd0ba85","modified":1678775459101},{"_id":"source/_posts/数据结构顺序表代码.md","hash":"866a76c6a50089c2a3e2c328ca71a334e6cb9355","modified":1683788666005},{"_id":"source/_posts/mysql.md","hash":"68a58d0d839797c94a3cf226eaba450c127a5c9a","modified":1678779564317},{"_id":"source/_posts/数组实现栈的初始化入栈出栈操作.md","hash":"5965f8f1965639898b664691bea271dbd6c892cf","modified":1683796443433},{"_id":"source/_posts/队列的链式存储代码实现.md","hash":"e222a557a938f341bdbf8684fa549e1eeccc35df","modified":1683796443432},{"_id":"source/img/default_cover3.jpg","hash":"86484915558b6790c55f7a89a2ecee9389bb1cdc","modified":1678775459103},{"_id":"source/css/modify.styl","hash":"baaa81fab849d83b560b43fba332585ec54545ca","modified":1678775459102},{"_id":"source/link/index.md","hash":"2d53c5c9ca0b5c5105f4f4336e6a828028af8de7","modified":1678775459107},{"_id":"source/img/favicon.jpg","hash":"0f0d40d3882e3c2e70124c7892e96b43d18288b0","modified":1678775459103},{"_id":"source/scripts/modify.js","hash":"1b66bc53fb101c2679174c42997a7680f4594428","modified":1678775459107},{"_id":"source/tags/index.md","hash":"21a5d590d8413a358fb8db9ac82212b49e744c45","modified":1678775459108},{"_id":"source/img/top-img/top-img1.jpg","hash":"e09e084d8a19425e68da49adb7b57cfcf6d9b7e8","modified":1678775459104},{"_id":"source/img/head.jpg","hash":"febc264caadae4fc9939c3268972064e7cb9991e","modified":1678775459103},{"_id":"source/img/default_cover1.jpg","hash":"72a23b742af6fcd7b17f1bde2f1b5d59712c1b1c","modified":1678775459102},{"_id":"source/img/default_cover2.jpg","hash":"1c503580a7541cae8dad1754a9970c9979988648","modified":1678775459103},{"_id":"source/img/top-img/top-img2.jpg","hash":"d4b24f3ed07d6da1e005768250eb6e666533b3c5","modified":1678775459105},{"_id":"source/img/wechat.jpg","hash":"2b04fa304ff01a088768eed261a2ba38800ec721","modified":1678775459106},{"_id":"themes/butterfly/package.json","hash":"1e45baebff47690dc7c35e588984151fca5da175","modified":1678774888305},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1678774888278},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1678774888281},{"_id":"themes/butterfly/README.md","hash":"46869886ed9ce4beedaad5b064789fd15861566e","modified":1678774888279},{"_id":"themes/butterfly/_config.yml","hash":"8c91f9c94709ac7462d93b342eebba22c48ff946","modified":1678774888279},{"_id":"themes/butterfly/README_CN.md","hash":"b95c89559c429049caa3f9f461a2b41ae98c0d68","modified":1678774888279},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1678774888304},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1678774888305},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1678774888281},{"_id":"themes/butterfly/plugins.yml","hash":"cab6079dd07d698c7a91e90ea9b0dfa8d65fef7d","modified":1678774888305},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1678774888280},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1678774888305},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1678774888305},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1678774888280},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1678774888278},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1678774888280},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1678774888280},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1678774888282},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1678774888277},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1678774888277},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"e3162d25357d9f843a39aec29a9b8ebe539099b4","modified":1678774888282},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1678774888278},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1678774888277},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"828f5075efd64bf6f0fc5d9eb35b1da7b282ad28","modified":1678776861380},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"963cf63135f775a209aef39b4870b63d53109b03","modified":1678774888282},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1678774888282},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1678774888306},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1678774888290},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1678774888306},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ab3ff72ecaa7da09fcb7d03a8b341a061e870826","modified":1678774888286},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"fcf525252ab3d02b6b880de7e669b4b79d230b33","modified":1678774888306},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1678774888307},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1678774888306},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1678774888306},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1678774888307},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1678774888308},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1678774888307},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1678774888307},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"688b424e4fae8db268033dd1f78b999932b22e57","modified":1678774888308},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1678774888311},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1678774888311},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1678774888321},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1678774888321},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1678774888321},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1678774888321},{"_id":"themes/butterfly/source/js/main.js","hash":"ab1eb2ae2fc7937aa0579d5293432fa986bf49b2","modified":1678774888323},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1678774888321},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1678774888283},{"_id":"themes/butterfly/source/js/utils.js","hash":"6aff3a8760442cc66c0c0afdfc4878e07d430c77","modified":1678774888323},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1678774888283},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1678774888283},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1678774888290},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1678774888304},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1678774888311},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1678774888304},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1678774888304},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fde51780f525b002885c9f189cccc459542f5dc6","modified":1678774888311},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1678774888312},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1678774888313},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1678774888313},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"9d75d98833e8897e5157dfe53140293994e866be","modified":1678777623613},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1678774888316},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1678774888316},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1678774888316},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1678774888316},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1678774888318},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1678774888318},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"01ba993e7bd384827c0f5499ae0c5f82e068d844","modified":1678774888316},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1678774888318},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"85f5f2c9150061bae8a5188c10f23a63e7e01a4f","modified":1678774888318},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1678774888319},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1678774888316},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1678774888319},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"f7d3d598a27467d24b0b37f49c012b5759394c0a","modified":1678774888318},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1678774888320},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1678774888320},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1678774888320},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1678774888320},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1678774888290},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1678774888321},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1678774888290},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1678774888291},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"1ada177b1635bd7d1b6f02b33f7a81823d8bce0c","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1678774888292},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"306b7aa7d86e46df28fa52f75cead4f9d71cacb2","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"ed4af213570dd7d3e2165f830f45b3e57f04afd4","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bf6b1453096dd7f53d81cde078c233d301e14304","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"75ebfe533dd7ee59113b84c2972694cadd92c6a9","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"0785346c1d8c49a10f02481b701138ed5898f4ac","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fad70676346f194f166ac4e714ac6ff37cbf50ea","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1678774888301},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1678774888312},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1678774888312},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1678774888313},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1678774888313},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1678774888313},{"_id":"public/scripts/modify.js","hash":"21628f2508dcd11da79fce150cf973c93a4f762a","modified":1683796440230},{"_id":"public/css/modify.css","hash":"371bea977f7bb2e4606d8a14574026223aeb047a","modified":1683796440230},{"_id":"public/atom.xml","hash":"00ea81e943de43b6742887b73c92b26def717fa9","modified":1683796440230},{"_id":"public/search.xml","hash":"96a8d9ce076f0fb2356cd79da90936b4dd2a63d8","modified":1683796440230},{"_id":"public/404.html","hash":"8e4f21c22a2b89d0f64679bbb858489e526c1351","modified":1683796440230},{"_id":"public/categories/index.html","hash":"07287a01ad1e1f1b7a427dfe29cf99abf9d37bfc","modified":1683796440230},{"_id":"public/link/index.html","hash":"3ff04c80762195160a841704081b3455677070ca","modified":1683796440230},{"_id":"public/tags/index.html","hash":"e0b6614bd73794584bd93ea5bba5a9fd40762b7b","modified":1683796440230},{"_id":"public/posts/32dfacd1.html","hash":"37c88583a8fa44a60c0a22c9465e9eabf2c71e3e","modified":1683796440230},{"_id":"public/posts/e434efff.html","hash":"5384541376eb0a48eb2d4455d63398ebc897432e","modified":1683796440230},{"_id":"public/posts/669576d7.html","hash":"bbf3da5d69abb45303a2362d34bf5d14bcb2b757","modified":1683796440230},{"_id":"public/posts/2f15bdd3.html","hash":"f73cef75571319a2cb0d5c59649dc505b0d08e66","modified":1683796440230},{"_id":"public/posts/ba62eb1b.html","hash":"6b53a52157d886b16e91dc3d04e8cebfcb4c7918","modified":1683796440230},{"_id":"public/posts/4a17b156.html","hash":"40fb1b6b4e3d1bf2ff609eb10d91cb892f13f51f","modified":1683796440230},{"_id":"public/posts/0.html","hash":"771e22e86a6c7fc495d4deadfcb4a116f7e60480","modified":1683796440230},{"_id":"public/posts/9520183a.html","hash":"72b3baa05d34ca56775c40e1932be2f0cc201540","modified":1683796440230},{"_id":"public/categories/mysql/index.html","hash":"485c9669f3a4262319673c8f21f025f42b40a168","modified":1683796440230},{"_id":"public/categories/队列/index.html","hash":"7813d0017704304c9b6c5866a95aff365763e894","modified":1683796440230},{"_id":"public/categories/顺序表/index.html","hash":"e5d2e70dc80c25a94f790e854456e38c8649fc75","modified":1683796440230},{"_id":"public/categories/单链表/index.html","hash":"c2bd31da811ec0d470306898630f382f359bbb2a","modified":1683796440230},{"_id":"public/archives/index.html","hash":"92e5b5ff49c7521dd3137799761f8ac1a14fbe5e","modified":1683796440230},{"_id":"public/archives/2023/index.html","hash":"c1d5d24d670e93cdd0d4e739d37e97d613be6a77","modified":1683796440230},{"_id":"public/archives/2023/02/index.html","hash":"7ca0edae97f49112ac614d957454d1289e2d0386","modified":1683796440230},{"_id":"public/archives/2023/03/index.html","hash":"453518d465808afeb7ef4436190c3615706bcd90","modified":1683796440230},{"_id":"public/archives/2023/05/index.html","hash":"02a1471ac3dbc199f47ac28a24882937dec2f188","modified":1683796440230},{"_id":"public/index.html","hash":"fe6c818696ac5bbed3e044b6d60fac8c19e4428c","modified":1683796440230},{"_id":"public/tags/test/index.html","hash":"9fb465dfa46d570a4880e8673a4a739d8a20a894","modified":1683796440230},{"_id":"public/tags/数据结构/index.html","hash":"ef48a2e548e65c5dc87d9bdb70cc1a51b4616ec6","modified":1683796440230},{"_id":"public/CNAME","hash":"ceaf778fe36e77d3f691e24690b6f66c09bf3a4c","modified":1683796440230},{"_id":"public/img/favicon.jpg","hash":"0f0d40d3882e3c2e70124c7892e96b43d18288b0","modified":1683796440230},{"_id":"public/img/head.jpg","hash":"febc264caadae4fc9939c3268972064e7cb9991e","modified":1683796440230},{"_id":"public/img/top-img/top-img1.jpg","hash":"e09e084d8a19425e68da49adb7b57cfcf6d9b7e8","modified":1683796440230},{"_id":"public/img/default_cover3.jpg","hash":"86484915558b6790c55f7a89a2ecee9389bb1cdc","modified":1683796440230},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1683796440230},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1683796440230},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1683796440230},{"_id":"public/img/default_cover1.jpg","hash":"72a23b742af6fcd7b17f1bde2f1b5d59712c1b1c","modified":1683796440230},{"_id":"public/img/default_cover2.jpg","hash":"1c503580a7541cae8dad1754a9970c9979988648","modified":1683796440230},{"_id":"public/img/top-img/top-img2.jpg","hash":"d4b24f3ed07d6da1e005768250eb6e666533b3c5","modified":1683796440230},{"_id":"public/img/wechat.jpg","hash":"2b04fa304ff01a088768eed261a2ba38800ec721","modified":1683796440230},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1683796440230},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1683796440230},{"_id":"public/js/utils.js","hash":"58b36a932e5d41d63eac896468b6e8d25fc4bcee","modified":1683796440230},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1683796440230},{"_id":"public/css/index.css","hash":"8b737f6a5a6c0f3c56539d6a16ff1540f1daffc9","modified":1683796440230},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1683796440230},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1683796440230}],"Category":[{"name":"队列","_id":"clhiwxcvi0009psuh4v0e4vr7"},{"name":"mysql","_id":"clhiwxcvm000hpsuh2qu59cc7"},{"name":"顺序表","_id":"clhiwxcvp000npsuhab8z723q"},{"name":"单链表","_id":"clhiwxcvq000spsuh139afo1d"}],"Data":[{"_id":"link","data":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"文章分类","date":"2023-03-14T06:30:59.101Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: \"文章分类\"\ndate: {{ date }}\ntype: \"categories\"\n---\n\n","updated":"2023-03-14T06:30:59.101Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhiwxcv90000psuhfr0z72f7","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","cover_type":"img","excerpt":"","more":""},{"_content":"@import 'nib'\n\n// 顶部图\n#page-header\n  &, &:before\n    background: transparent !important\n  &.post-bg, &.not-home-page\n    height: 280px !important\n  #post-info\n    bottom: 40px !important\n  #page-site-info\n    top: 140px !important\n\n  @media screen and (max-width: 768px)\n    &.not-home-page\n      height: 200px !important\n    #post-info\n      bottom: 10px !important\n    #page-site-info\n      top: 100px !important\n\n.top-img\n  height: 250px\n  margin: -50px -40px 50px\n  border-top-left-radius: inherit\n  border-top-right-radius: inherit\n  background-position: center center\n  background-size: cover\n  transition: all 0.3s\n\n  @media screen and (max-width: 768px)\n    height: 230px\n    margin: -36px -14px 36px\n\n  [data-theme='dark'] &\n    filter: brightness(0.8)\n\n// 页脚\n#footer:before\n  background-color: alpha(#FFF, .5)\n\n  [data-theme='dark'] &\n    background-color: alpha(#000, .5)\n\n#footer-wrap, #footer-wrap a\n  color: #111\n  transition: unset\n\n  [data-theme='dark'] &\n    color: var(--light-grey)","source":"css/modify.styl","raw":"@import 'nib'\n\n// 顶部图\n#page-header\n  &, &:before\n    background: transparent !important\n  &.post-bg, &.not-home-page\n    height: 280px !important\n  #post-info\n    bottom: 40px !important\n  #page-site-info\n    top: 140px !important\n\n  @media screen and (max-width: 768px)\n    &.not-home-page\n      height: 200px !important\n    #post-info\n      bottom: 10px !important\n    #page-site-info\n      top: 100px !important\n\n.top-img\n  height: 250px\n  margin: -50px -40px 50px\n  border-top-left-radius: inherit\n  border-top-right-radius: inherit\n  background-position: center center\n  background-size: cover\n  transition: all 0.3s\n\n  @media screen and (max-width: 768px)\n    height: 230px\n    margin: -36px -14px 36px\n\n  [data-theme='dark'] &\n    filter: brightness(0.8)\n\n// 页脚\n#footer:before\n  background-color: alpha(#FFF, .5)\n\n  [data-theme='dark'] &\n    background-color: alpha(#000, .5)\n\n#footer-wrap, #footer-wrap a\n  color: #111\n  transition: unset\n\n  [data-theme='dark'] &\n    color: var(--light-grey)","date":"2023-03-14T06:30:59.102Z","updated":"2023-03-14T06:30:59.102Z","path":"css/modify.css","layout":"false","title":"","comments":1,"_id":"clhiwxcvd0002psuheedh1jlj","content":"#page-header,\n#page-header:before {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","cover_type":"img","excerpt":"","more":"#page-header,\n#page-header:before {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n"},{"title":"友情链接","date":"2023-02-08T14:17:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: \"友情链接\"\ndate: 2023-02-08 22:17:49\ntype: \"link\"\n---\n","updated":"2023-03-14T06:30:59.107Z","path":"link/index.html","comments":1,"layout":"page","_id":"clhiwxcvg0005psuheir0c274","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签页","date":"2023-03-14T06:30:59.108Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \"标签页\"\ndate: {{ date }}\ntype: \"tags\"\n---\n","updated":"2023-03-14T06:30:59.108Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhiwxcvh0007psuhdockgz1j","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","cover_type":"img","excerpt":"","more":""},{"_content":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","source":"scripts/modify.js","raw":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","date":"2023-03-14T06:30:59.107Z","updated":"2023-03-14T06:30:59.107Z","path":"scripts/modify.js","layout":"false","title":"","comments":1,"_id":"clhiwxcvi000apsuh267f3ug0","content":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});"}],"Post":[{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: test\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-03-14T07:39:24.317Z","updated":"2023-03-14T07:39:24.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhiwxcvb0001psuh4je36fgl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"abbrlink":"0","_content":"### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n\n\n\n\n\n","source":"_posts/install.md","raw":"---\nabbrlink: '0'\n---\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n\n\n\n\n\n","slug":"install","published":1,"date":"2023-03-14T07:39:24.317Z","updated":"2023-03-14T07:39:24.317Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clhiwxcve0003psuh2p9z4dwh","content":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","cover_type":"img","excerpt":"","more":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n"},{"title":"循环队列代码代码实现","abbrlink":"e434efff","date":"2023-05-09T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"\n循环队列代码练习\n\n初始化队列、判断队列是否为空、入队、出队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 循环队列代码实战\n#define MaxSize 5\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组存储MaxSize-1 个元素\n    int front, rear; // 队列头，队列尾\n} SqQueue;\n\n// 初始化队列\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0; // 初始化循环队列，就是让头和尾部都指向零号\n}\n\n// 判断队列是否为空\nbool isEmpty(SqQueue Q) {\n\n    return Q.front == Q.rear;\n}\n\n// 入队操作\nbool enQueue(SqQueue &Q, ElemType e) {\n    if ((Q.rear + 1) % MaxSize == Q.front) {\n        return false;\n    }\n    Q.data[Q.rear] = e; // 放入元素\n    Q.rear = (Q.rear + 1) % MaxSize; // rear 要加1，如果大于数组最大下标，回到开头\n    return true;\n}\n\n// 出队操作\nbool deQueue(SqQueue &Q, ElemType &e) {\n    // 判断为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    e = Q.data[Q.front]; //出队\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqQueue Q;\n    initQueue(Q);\n    bool ret;\n    ret = isEmpty(Q);\n    if (ret) {\n        printf(\"队列为空\");\n    } else {\n        printf(\"队列不为空\");\n    }\n    // 入队\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    ret = enQueue(Q, 6);\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    ElemType elem; //存储出队元素\n    ret = deQueue(Q, elem);\n    if (ret) {\n        printf(\"出队成功，出队元素：%d\\n\", elem);\n    } else {\n        printf(\"出队失败\\n\", elem);\n    }\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/循环队列代码实现.md","raw":"---\ntitle: 循环队列代码代码实现\ntags: 数据结构\ncategories: 队列\nabbrlink: e434efff\ndate: 2023-05-09 16:22:35\ncover:\n---\n\n循环队列代码练习\n\n初始化队列、判断队列是否为空、入队、出队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 循环队列代码实战\n#define MaxSize 5\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组存储MaxSize-1 个元素\n    int front, rear; // 队列头，队列尾\n} SqQueue;\n\n// 初始化队列\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0; // 初始化循环队列，就是让头和尾部都指向零号\n}\n\n// 判断队列是否为空\nbool isEmpty(SqQueue Q) {\n\n    return Q.front == Q.rear;\n}\n\n// 入队操作\nbool enQueue(SqQueue &Q, ElemType e) {\n    if ((Q.rear + 1) % MaxSize == Q.front) {\n        return false;\n    }\n    Q.data[Q.rear] = e; // 放入元素\n    Q.rear = (Q.rear + 1) % MaxSize; // rear 要加1，如果大于数组最大下标，回到开头\n    return true;\n}\n\n// 出队操作\nbool deQueue(SqQueue &Q, ElemType &e) {\n    // 判断为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    e = Q.data[Q.front]; //出队\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqQueue Q;\n    initQueue(Q);\n    bool ret;\n    ret = isEmpty(Q);\n    if (ret) {\n        printf(\"队列为空\");\n    } else {\n        printf(\"队列不为空\");\n    }\n    // 入队\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    ret = enQueue(Q, 6);\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    ElemType elem; //存储出队元素\n    ret = deQueue(Q, elem);\n    if (ret) {\n        printf(\"出队成功，出队元素：%d\\n\", elem);\n    } else {\n        printf(\"出队失败\\n\", elem);\n    }\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"循环队列代码实现","published":1,"updated":"2023-05-11T09:14:03.430Z","_id":"clhiwxcvg0006psuhg0255q5v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>循环队列代码练习</p>\n<p>初始化队列、判断队列是否为空、入队、出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环队列代码实战</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组存储MaxSize-1 个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear; <span class=\"comment\">// 队列头，队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化循环队列，就是让头和尾部都指向零号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqQueue Q)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = e; <span class=\"comment\">// 放入元素</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"comment\">// rear 要加1，如果大于数组最大下标，回到开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = Q.data[Q.front]; <span class=\"comment\">//出队</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType elem; <span class=\"comment\">//存储出队元素</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q, elem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队成功，出队元素：%d\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>循环队列代码练习</p>\n<p>初始化队列、判断队列是否为空、入队、出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环队列代码实战</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组存储MaxSize-1 个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear; <span class=\"comment\">// 队列头，队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化循环队列，就是让头和尾部都指向零号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqQueue Q)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = e; <span class=\"comment\">// 放入元素</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"comment\">// rear 要加1，如果大于数组最大下标，回到开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = Q.data[Q.front]; <span class=\"comment\">//出队</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType elem; <span class=\"comment\">//存储出队元素</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q, elem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队成功，出队元素：%d\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"mysql","cover":"/img/default_cover1.jpg","abbrlink":"9520183a","date":"2023-02-02T08:41:35.000Z","_content":"\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n==注意==：添加mysql-server rpm包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 MySQL 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动MySQL服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 MySql 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 MySql，登录命令（==第一种方式使用密码登录==）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动MySQL后，就会有临时密码，这个默认的初始密码在/var/log/mysqld.log文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n==配置文件说明：==\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n2、启动 mysql镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/mysql-data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n\n# 修改命令\ndocker update \n```\n\nmy.cnf 配置文件：\n\n```bash\n# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n!includedir /etc/mysql/conf.d/\n!includedir /etc/mysql/mysql.conf.d/\n\n[mysql]\ndefault_character_set=utf8\n[client]\ndefault_character_set=utf8\n\n[mysqld]\nmax_connections = 3000\nmax_user_connections = 3000\nmax_connect_errors = 100000\nmax_allowed_packet = 1G\ncharacter_set_server=utf8\ncollation-server=utf8_general_ci\n\n\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n# bin-log\nexpire_logs_days = 15\nbinlog_format=mixed\nserver-id=168168\n\n##########################\n## log slow\n###########################\nslow_query_log=off\nslow_query_log_file=/var/log/mysql/mysqld_slow.log\nlong_query_time=1\nlog_queries_not_using_indexes=on\n\n##########################\n## innodb\n###########################\ninnodb_file_per_table=1\ninnodb_log_file_size=1024M\ninnodb_log_buffer_size=64M \n\ntable_open_cache = 8000\n\n```\n\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ntags: test\ncategories: mysql\ncover: /img/default_cover1.jpg\nabbrlink: 9520183a\ndate: 2023-02-02 16:41:35\n---\n\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n==注意==：添加mysql-server rpm包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 MySQL 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动MySQL服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 MySql 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 MySql，登录命令（==第一种方式使用密码登录==）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动MySQL后，就会有临时密码，这个默认的初始密码在/var/log/mysqld.log文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n==配置文件说明：==\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n2、启动 mysql镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/mysql-data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n\n# 修改命令\ndocker update \n```\n\nmy.cnf 配置文件：\n\n```bash\n# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n!includedir /etc/mysql/conf.d/\n!includedir /etc/mysql/mysql.conf.d/\n\n[mysql]\ndefault_character_set=utf8\n[client]\ndefault_character_set=utf8\n\n[mysqld]\nmax_connections = 3000\nmax_user_connections = 3000\nmax_connect_errors = 100000\nmax_allowed_packet = 1G\ncharacter_set_server=utf8\ncollation-server=utf8_general_ci\n\n\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n# bin-log\nexpire_logs_days = 15\nbinlog_format=mixed\nserver-id=168168\n\n##########################\n## log slow\n###########################\nslow_query_log=off\nslow_query_log_file=/var/log/mysql/mysqld_slow.log\nlong_query_time=1\nlog_queries_not_using_indexes=on\n\n##########################\n## innodb\n###########################\ninnodb_file_per_table=1\ninnodb_log_file_size=1024M\ninnodb_log_buffer_size=64M \n\ntable_open_cache = 8000\n\n```\n\n\n","slug":"mysql","published":1,"updated":"2023-03-14T07:39:24.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhiwxcvh0008psuh4v1h287v","content":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意&#x3D;&#x3D;：添加mysql-server rpm包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 MySQL 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动MySQL服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 MySql 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 MySql，登录命令（&#x3D;&#x3D;第一种方式使用密码登录&#x3D;&#x3D;）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动MySQL后，就会有临时密码，这个默认的初始密码在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;配置文件说明：&#x3D;&#x3D;</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 mysql镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/mysql-data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改命令</span></span><br><span class=\"line\">docker update </span><br></pre></td></tr></table></figure>\n\n<p>my.cnf 配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\"># it under the terms of the GNU General Public License as published by</span></span><br><span class=\"line\"><span class=\"comment\"># the Free Software Foundation; version 2 of the License.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class=\"line\"><span class=\"comment\"># GNU General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You should have received a copy of the GNU General Public License</span></span><br><span class=\"line\"><span class=\"comment\"># along with this program; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span></span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_user_connections = 3000</span><br><span class=\"line\">max_connect_errors = 100000</span><br><span class=\"line\">max_allowed_packet = 1G</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bin-log</span></span><br><span class=\"line\">expire_logs_days = 15</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">server-id=168168</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## log slow</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">slow_query_log=off</span><br><span class=\"line\">slow_query_log_file=/var/log/mysql/mysqld_slow.log</span><br><span class=\"line\">long_query_time=1</span><br><span class=\"line\">log_queries_not_using_indexes=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## innodb</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">innodb_file_per_table=1</span><br><span class=\"line\">innodb_log_file_size=1024M</span><br><span class=\"line\">innodb_log_buffer_size=64M </span><br><span class=\"line\"></span><br><span class=\"line\">table_open_cache = 8000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意&#x3D;&#x3D;：添加mysql-server rpm包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 MySQL 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动MySQL服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 MySql 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 MySql，登录命令（&#x3D;&#x3D;第一种方式使用密码登录&#x3D;&#x3D;）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动MySQL后，就会有临时密码，这个默认的初始密码在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;配置文件说明：&#x3D;&#x3D;</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 mysql镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/mysql-data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改命令</span></span><br><span class=\"line\">docker update </span><br></pre></td></tr></table></figure>\n\n<p>my.cnf 配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\"># it under the terms of the GNU General Public License as published by</span></span><br><span class=\"line\"><span class=\"comment\"># the Free Software Foundation; version 2 of the License.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class=\"line\"><span class=\"comment\"># GNU General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You should have received a copy of the GNU General Public License</span></span><br><span class=\"line\"><span class=\"comment\"># along with this program; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span></span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_user_connections = 3000</span><br><span class=\"line\">max_connect_errors = 100000</span><br><span class=\"line\">max_allowed_packet = 1G</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bin-log</span></span><br><span class=\"line\">expire_logs_days = 15</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">server-id=168168</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## log slow</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">slow_query_log=off</span><br><span class=\"line\">slow_query_log_file=/var/log/mysql/mysqld_slow.log</span><br><span class=\"line\">long_query_time=1</span><br><span class=\"line\">log_queries_not_using_indexes=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## innodb</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">innodb_file_per_table=1</span><br><span class=\"line\">innodb_log_file_size=1024M</span><br><span class=\"line\">innodb_log_buffer_size=64M </span><br><span class=\"line\"></span><br><span class=\"line\">table_open_cache = 8000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"C++数据结构顺序表代码","abbrlink":"2f15bdd3","date":"2023-05-08T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"\nC++数据结构顺序表代码练习\n\n插入、删除、查找\n\n```c++\n#include <cstdlib>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid change(char*& p) {\n    p = (char*)malloc(100);\n    fgets(p, 100, stdin);\n}\n\n#define MaxSize 50\ntypedef int ElemType; // 让顺序表存储其他类型元素时，可以快速修改代码\ntypedef struct {\n    ElemType data[MaxSize];\n    int length; // 顺序表长度\n} SqlList;\n\n// 插入\nbool insertList(SqlList& L, int i, ElemType e) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = L.length; j >= i; j--) {\n        L.data[j] = L.data[j - 1];\n    }\n    L.data[i - 1] = e;\n    L.length++;\n\n    return true;\n}\n\n// 删除\nbool deleteList(SqlList& L, int i) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1] = L.data[j];\n    }\n    L.length--;\n    return true;\n}\n\n// 打印\nvoid printlist(SqlList L) {\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%3d\", L.data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    // char *p;\n    // scanf(\"%s\",p);\n    // change(p);\n    // puts(p);\n    // free(p);\n    SqlList L;\n    L.data[0] = 6;\n    L.data[1] = 7;\n    L.data[2] = 8;\n    L.length = 3;\n    int a;\n    scanf(\"%d\", &a);\n    // printlist(L);\n    bool ret = insertList(L, 2, a);\n    if (ret) {\n        printlist(L);\n    } else {\n        printf(\"\");\n    }\n    // 删除\n    int d;\n    scanf(\"%d\",&d);\n    bool dd = deleteList(L,d);\n    if(dd){\n        printlist(L);\n    }else {\n        printf(\"false\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数据结构顺序表代码.md","raw":"---\ntitle: C++数据结构顺序表代码\ntags: 数据结构\ncategories: 顺序表\nabbrlink: 2f15bdd3\ndate: 2023-05-08 16:22:35\ncover:\n---\n\nC++数据结构顺序表代码练习\n\n插入、删除、查找\n\n```c++\n#include <cstdlib>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid change(char*& p) {\n    p = (char*)malloc(100);\n    fgets(p, 100, stdin);\n}\n\n#define MaxSize 50\ntypedef int ElemType; // 让顺序表存储其他类型元素时，可以快速修改代码\ntypedef struct {\n    ElemType data[MaxSize];\n    int length; // 顺序表长度\n} SqlList;\n\n// 插入\nbool insertList(SqlList& L, int i, ElemType e) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = L.length; j >= i; j--) {\n        L.data[j] = L.data[j - 1];\n    }\n    L.data[i - 1] = e;\n    L.length++;\n\n    return true;\n}\n\n// 删除\nbool deleteList(SqlList& L, int i) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1] = L.data[j];\n    }\n    L.length--;\n    return true;\n}\n\n// 打印\nvoid printlist(SqlList L) {\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%3d\", L.data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    // char *p;\n    // scanf(\"%s\",p);\n    // change(p);\n    // puts(p);\n    // free(p);\n    SqlList L;\n    L.data[0] = 6;\n    L.data[1] = 7;\n    L.data[2] = 8;\n    L.length = 3;\n    int a;\n    scanf(\"%d\", &a);\n    // printlist(L);\n    bool ret = insertList(L, 2, a);\n    if (ret) {\n        printlist(L);\n    } else {\n        printf(\"\");\n    }\n    // 删除\n    int d;\n    scanf(\"%d\",&d);\n    bool dd = deleteList(L,d);\n    if(dd){\n        printlist(L);\n    }else {\n        printf(\"false\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"数据结构顺序表代码","published":1,"updated":"2023-05-11T07:04:26.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhiwxcvi000bpsuhbdfx95cm","content":"<p>C++数据结构顺序表代码练习</p>\n<p>插入、删除、查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">char</span>*&amp; p)</span> </span>&#123;</span><br><span class=\"line\">    p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(p, <span class=\"number\">100</span>, stdin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType; <span class=\"comment\">// 让顺序表存储其他类型元素时，可以快速修改代码</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length; <span class=\"comment\">// 顺序表长度</span></span><br><span class=\"line\">&#125; SqlList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">        L.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>] = L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printlist</span><span class=\"params\">(SqlList L)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// char *p;</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%s&quot;,p);</span></span><br><span class=\"line\">    <span class=\"comment\">// change(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// puts(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// free(p);</span></span><br><span class=\"line\">    SqlList L;</span><br><span class=\"line\">    L.data[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">1</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">2</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    L.length = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"comment\">// printlist(L);</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">insertList</span>(L, <span class=\"number\">2</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">    <span class=\"type\">bool</span> dd = <span class=\"built_in\">deleteList</span>(L,d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dd)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>C++数据结构顺序表代码练习</p>\n<p>插入、删除、查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">char</span>*&amp; p)</span> </span>&#123;</span><br><span class=\"line\">    p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(p, <span class=\"number\">100</span>, stdin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType; <span class=\"comment\">// 让顺序表存储其他类型元素时，可以快速修改代码</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length; <span class=\"comment\">// 顺序表长度</span></span><br><span class=\"line\">&#125; SqlList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">        L.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>] = L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printlist</span><span class=\"params\">(SqlList L)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// char *p;</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%s&quot;,p);</span></span><br><span class=\"line\">    <span class=\"comment\">// change(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// puts(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// free(p);</span></span><br><span class=\"line\">    SqlList L;</span><br><span class=\"line\">    L.data[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">1</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">2</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    L.length = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"comment\">// printlist(L);</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">insertList</span>(L, <span class=\"number\">2</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">    <span class=\"type\">bool</span> dd = <span class=\"built_in\">deleteList</span>(L,d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dd)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"C++数据结构单链表代码","abbrlink":"669576d7","date":"2023-05-09T05:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"\nC++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除\n\n知道并理解单链表连理，练习并掌握代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LNode {\n    ElemType data; //数据域\n    struct LNode *next; //指针域\n} LNode, *LinkList;\n\n// LNode* 是结构体指针，和LinkList完全等价 头插法\nvoid linkHeadInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        s->next = L->next;\n        L->next = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n}\n\n// 尾插法\nvoid linkTailInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s, *r = L;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        r->next = s; // 尾部节点指向新的节点\n        r = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n    r->next = NULL;\n}\n\n// 按位置查找\nLinkList getElemIndex(LinkList L, int pos) {\n    if (pos < 0) {\n        return NULL;\n    }\n    int i = 0;\n    while (L && i < pos) {\n        L = L->next;\n        i++;\n    }\n    return L;\n}\n\n// 按值查找\nLinkList getLocalElem(LinkList L, ElemType value) {\n    L = L->next;\n    while (L) {\n        if (L->data == value) {\n            return L;\n        }\n        L = L->next;\n    }\n    return NULL;\n}\n\n\nvoid printList(LinkList L) {\n    L = L->next;\n    while (L != NULL) {\n        printf(\"%3d\", L->data);\n        L = L->next;\n    }\n    printf(\"\\n\");\n}\n\n// 新节点插入地i个位置\nbool insertFrontList(LinkList &L, int pos, ElemType val) {\n    LinkList p = getElemIndex(L, pos - 1);\n    if (NULL == p) {\n        return false;\n    }\n    LinkList s;\n    s = (LinkList) malloc(sizeof(LNode));\n    s->data = val;\n    s->next = p->next;\n    p->next = s;\n    return true;\n}\n\n// 删除id对应的元素，删除L 不会变，不需要加引用\nbool deleteList(LinkList L, int pos) {\n    LinkList p = getElemIndex(L, pos - 1); // 拿到要删除节点的前一个节点\n    if (NULL == p) {\n        return false;\n    }\n    LinkList q = p->next; // 拿到要删除的节点指针\n    p->next = q->next; // 断链\n    free(q); // 释放被删除的节点\n    return true;\n}\n\n// 头插法新建链表\nint main() {\n    LinkList L; // L是链表头指针，是数据机构的指针类型\n    // 头插法\n//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表\n//    printList(L);\n    // 尾插法\n    linkHeadInsert(L);\n    printList(L);\n    // 按位置查找\n//    LinkList linkList = getElemIndex(L, 1);\n//    if (linkList != NULL) {\n//        printf(\"data=%d\\n\", linkList->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 按位置查找\n//    LinkList searchValue = getLocalElem(L, 5);\n//    if (searchValue != NULL) {\n//        printf(\"data=%d\\n\", searchValue->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 新节点插入地i个位置\n    insertFrontList(L, 3, 99);\n    printList(L);\n    // 删除元素\n    bool ret = deleteList(L, 6);\n    if (ret) {\n        printf(\"success\");\n    } else {\n        printf(\"failer\");\n    }\n    printList(L);\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数据结构单链表代码.md","raw":"---\ntitle: C++数据结构单链表代码\ntags: 数据结构\ncategories: 单链表\nabbrlink: 669576d7\ndate: 2023-05-09 13:22:35\ncover:\n---\n\nC++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除\n\n知道并理解单链表连理，练习并掌握代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LNode {\n    ElemType data; //数据域\n    struct LNode *next; //指针域\n} LNode, *LinkList;\n\n// LNode* 是结构体指针，和LinkList完全等价 头插法\nvoid linkHeadInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        s->next = L->next;\n        L->next = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n}\n\n// 尾插法\nvoid linkTailInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s, *r = L;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        r->next = s; // 尾部节点指向新的节点\n        r = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n    r->next = NULL;\n}\n\n// 按位置查找\nLinkList getElemIndex(LinkList L, int pos) {\n    if (pos < 0) {\n        return NULL;\n    }\n    int i = 0;\n    while (L && i < pos) {\n        L = L->next;\n        i++;\n    }\n    return L;\n}\n\n// 按值查找\nLinkList getLocalElem(LinkList L, ElemType value) {\n    L = L->next;\n    while (L) {\n        if (L->data == value) {\n            return L;\n        }\n        L = L->next;\n    }\n    return NULL;\n}\n\n\nvoid printList(LinkList L) {\n    L = L->next;\n    while (L != NULL) {\n        printf(\"%3d\", L->data);\n        L = L->next;\n    }\n    printf(\"\\n\");\n}\n\n// 新节点插入地i个位置\nbool insertFrontList(LinkList &L, int pos, ElemType val) {\n    LinkList p = getElemIndex(L, pos - 1);\n    if (NULL == p) {\n        return false;\n    }\n    LinkList s;\n    s = (LinkList) malloc(sizeof(LNode));\n    s->data = val;\n    s->next = p->next;\n    p->next = s;\n    return true;\n}\n\n// 删除id对应的元素，删除L 不会变，不需要加引用\nbool deleteList(LinkList L, int pos) {\n    LinkList p = getElemIndex(L, pos - 1); // 拿到要删除节点的前一个节点\n    if (NULL == p) {\n        return false;\n    }\n    LinkList q = p->next; // 拿到要删除的节点指针\n    p->next = q->next; // 断链\n    free(q); // 释放被删除的节点\n    return true;\n}\n\n// 头插法新建链表\nint main() {\n    LinkList L; // L是链表头指针，是数据机构的指针类型\n    // 头插法\n//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表\n//    printList(L);\n    // 尾插法\n    linkHeadInsert(L);\n    printList(L);\n    // 按位置查找\n//    LinkList linkList = getElemIndex(L, 1);\n//    if (linkList != NULL) {\n//        printf(\"data=%d\\n\", linkList->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 按位置查找\n//    LinkList searchValue = getLocalElem(L, 5);\n//    if (searchValue != NULL) {\n//        printf(\"data=%d\\n\", searchValue->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 新节点插入地i个位置\n    insertFrontList(L, 3, 99);\n    printList(L);\n    // 删除元素\n    bool ret = deleteList(L, 6);\n    if (ret) {\n        printf(\"success\");\n    } else {\n        printf(\"failer\");\n    }\n    printList(L);\n    return 0;\n}\n```\n\n\n\n","slug":"数据结构单链表代码","published":1,"updated":"2023-05-09T05:16:30.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhiwxcvj000epsuhb72r762o","content":"<p>C++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除</p>\n<p>知道并理解单链表连理，练习并掌握代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> &#123;</span><br><span class=\"line\">    ElemType data; <span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125; LNode, *LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LNode* 是结构体指针，和LinkList完全等价 头插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkHeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkTailInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s, *r = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s; <span class=\"comment\">// 尾部节点指向新的节点</span></span><br><span class=\"line\">        r = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getElemIndex</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L &amp;&amp; i &lt; pos) &#123;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按值查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getLocalElem</span><span class=\"params\">(LinkList L, ElemType value)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L-&gt;data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(LinkList L)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L-&gt;data);</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertFrontList</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> pos, ElemType val)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data = val;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除id对应的元素，删除L 不会变，不需要加引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>); <span class=\"comment\">// 拿到要删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList q = p-&gt;next; <span class=\"comment\">// 拿到要删除的节点指针</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next; <span class=\"comment\">// 断链</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q); <span class=\"comment\">// 释放被删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头插法新建链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkList L; <span class=\"comment\">// L是链表头指针，是数据机构的指针类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 头插法</span></span><br><span class=\"line\"><span class=\"comment\">//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表</span></span><br><span class=\"line\"><span class=\"comment\">//    printList(L);</span></span><br><span class=\"line\">    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">linkHeadInsert</span>(L);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList linkList = getElemIndex(L, 1);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (linkList != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, linkList-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList searchValue = getLocalElem(L, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (searchValue != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, searchValue-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\">    <span class=\"built_in\">insertFrontList</span>(L, <span class=\"number\">3</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">deleteList</span>(L, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;failer&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>C++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除</p>\n<p>知道并理解单链表连理，练习并掌握代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> &#123;</span><br><span class=\"line\">    ElemType data; <span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125; LNode, *LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LNode* 是结构体指针，和LinkList完全等价 头插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkHeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkTailInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s, *r = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s; <span class=\"comment\">// 尾部节点指向新的节点</span></span><br><span class=\"line\">        r = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getElemIndex</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L &amp;&amp; i &lt; pos) &#123;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按值查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getLocalElem</span><span class=\"params\">(LinkList L, ElemType value)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L-&gt;data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(LinkList L)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L-&gt;data);</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertFrontList</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> pos, ElemType val)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data = val;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除id对应的元素，删除L 不会变，不需要加引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>); <span class=\"comment\">// 拿到要删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList q = p-&gt;next; <span class=\"comment\">// 拿到要删除的节点指针</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next; <span class=\"comment\">// 断链</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q); <span class=\"comment\">// 释放被删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头插法新建链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkList L; <span class=\"comment\">// L是链表头指针，是数据机构的指针类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 头插法</span></span><br><span class=\"line\"><span class=\"comment\">//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表</span></span><br><span class=\"line\"><span class=\"comment\">//    printList(L);</span></span><br><span class=\"line\">    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">linkHeadInsert</span>(L);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList linkList = getElemIndex(L, 1);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (linkList != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, linkList-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList searchValue = getLocalElem(L, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (searchValue != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, searchValue-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\">    <span class=\"built_in\">insertFrontList</span>(L, <span class=\"number\">3</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">deleteList</span>(L, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;failer&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"C++队列的链式存储代码实现","abbrlink":"32dfacd1","date":"2023-05-10T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"\n队列的链式存储代码实现\n\n队列初始化、判断是否为空、入队尾插法、出队头部删除\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode* next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 是否为空 \nbool isEmpty(LinkQueue Q){\n\treturn (Q.front->next == NULL);\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode* p = (LinkNode*)malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next=p->next;//断链\n    if(Q.rear==p){//删除的是最后一个元素\n        Q.rear=Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 头部删除，尾部入队\nint main() {\n    LinkQueue Q;\n    bool ret;\n    // 初始化队列\n    initQueue(Q);\n    // 判断队列是否为空\n    ret = isEmpty(Q);\n    if(ret){\n        printf(\"队列为空\\n\");\n    }else {\n        printf(\"队列不为空\\n\");\n    }\n    // 入队，尾插法\n    enQueue(Q, 2);\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    enQueue(Q, 6);\n    // 出队\n    ElemType e;\n    ret = deQueue(Q,e);\n    if (ret) {\n       printf(\"出队元素：%d\\n\",e);\n    }else{\n       printf(\"出队失败\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/队列的链式存储代码实现.md","raw":"---\ntitle: C++队列的链式存储代码实现\ntags: 数据结构\ncategories: 队列\nabbrlink: 32dfacd1\ndate: 2023-05-10 16:22:35\ncover:\n---\n\n队列的链式存储代码实现\n\n队列初始化、判断是否为空、入队尾插法、出队头部删除\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode* next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 是否为空 \nbool isEmpty(LinkQueue Q){\n\treturn (Q.front->next == NULL);\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode* p = (LinkNode*)malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next=p->next;//断链\n    if(Q.rear==p){//删除的是最后一个元素\n        Q.rear=Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 头部删除，尾部入队\nint main() {\n    LinkQueue Q;\n    bool ret;\n    // 初始化队列\n    initQueue(Q);\n    // 判断队列是否为空\n    ret = isEmpty(Q);\n    if(ret){\n        printf(\"队列为空\\n\");\n    }else {\n        printf(\"队列不为空\\n\");\n    }\n    // 入队，尾插法\n    enQueue(Q, 2);\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    enQueue(Q, 6);\n    // 出队\n    ElemType e;\n    ret = deQueue(Q,e);\n    if (ret) {\n       printf(\"出队元素：%d\\n\",e);\n    }else{\n       printf(\"出队失败\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"队列的链式存储代码实现","published":1,"updated":"2023-05-11T09:14:03.432Z","_id":"clhiwxcvk000gpsuh6c4v3tb1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>队列的链式存储代码实现</p>\n<p>队列初始化、判断是否为空、入队尾插法、出队头部删除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>* next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否为空 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkQueue Q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (Q.front-&gt;next == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode* p = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next=p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear==p)&#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear=Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头部删除，尾部入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    ElemType e;</span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队元素：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>队列的链式存储代码实现</p>\n<p>队列初始化、判断是否为空、入队尾插法、出队头部删除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>* next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否为空 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkQueue Q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (Q.front-&gt;next == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode* p = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next=p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear==p)&#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear=Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头部删除，尾部入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    ElemType e;</span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队元素：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"数组实现栈的初始化入栈出栈操作","abbrlink":"ba62eb1b","date":"2023-05-08T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"\n数组实现栈的操作\n\n栈的初始化、入栈、出栈\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 栈的初始化、入栈、出栈\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize];\n    int top;\n} SqStack;\n\n// 初始化队列\nvoid initStack(SqStack &S) {\n    S.top = -1; // 代表栈为空\n}\n\n// 判断是否为空\nbool isEmptyStack(SqStack S) {\n    if (-1 == S.top) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// 入队\nbool enStack(SqStack &S, ElemType e) {\n    if (S.top == MaxSize - 1) { // 栈为空\n        return false;\n    }\n    S.data[++S.top] = e;\n    return true;\n}\n\n// 弹出栈顶元素\nbool pop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    S.data[S.top--] = e;\n    return true;\n}\n\n// 读取栈顶元素\nbool getTop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    e = S.data[S.top];\n    return true;\n}\n\nint main() {\n    SqStack S;\n    bool flag;\n    initStack(S);\n    flag = isEmptyStack(S);\n    if(flag){\n        printf(\"栈为空\\n\");\n    }\n    // 入栈\n    enStack(S,2);\n    enStack(S,3);\n    enStack(S,4);\n    // 获取栈顶元素\n    ElemType  e; //用于存放获取栈顶的元素\n    flag = getTop(S,e);\n    if(flag){\n        printf(\"栈顶元素是：%d\\n\",e);\n    }\n    // 出栈\n    flag = pop(S,e);\n    if(flag){\n        printf(\"弹出栈顶元素是：%d\\n\",e);\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数组实现栈的初始化入栈出栈操作.md","raw":"---\ntitle: 数组实现栈的初始化入栈出栈操作\ntags: 数据结构\ncategories: 队列\nabbrlink: ba62eb1b\ndate: 2023-05-08 16:22:35\ncover:\n---\n\n数组实现栈的操作\n\n栈的初始化、入栈、出栈\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 栈的初始化、入栈、出栈\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize];\n    int top;\n} SqStack;\n\n// 初始化队列\nvoid initStack(SqStack &S) {\n    S.top = -1; // 代表栈为空\n}\n\n// 判断是否为空\nbool isEmptyStack(SqStack S) {\n    if (-1 == S.top) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// 入队\nbool enStack(SqStack &S, ElemType e) {\n    if (S.top == MaxSize - 1) { // 栈为空\n        return false;\n    }\n    S.data[++S.top] = e;\n    return true;\n}\n\n// 弹出栈顶元素\nbool pop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    S.data[S.top--] = e;\n    return true;\n}\n\n// 读取栈顶元素\nbool getTop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    e = S.data[S.top];\n    return true;\n}\n\nint main() {\n    SqStack S;\n    bool flag;\n    initStack(S);\n    flag = isEmptyStack(S);\n    if(flag){\n        printf(\"栈为空\\n\");\n    }\n    // 入栈\n    enStack(S,2);\n    enStack(S,3);\n    enStack(S,4);\n    // 获取栈顶元素\n    ElemType  e; //用于存放获取栈顶的元素\n    flag = getTop(S,e);\n    if(flag){\n        printf(\"栈顶元素是：%d\\n\",e);\n    }\n    // 出栈\n    flag = pop(S,e);\n    if(flag){\n        printf(\"弹出栈顶元素是：%d\\n\",e);\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"数组实现栈的初始化入栈出栈操作","published":1,"updated":"2023-05-11T09:14:03.433Z","_id":"clhiwxcvo000kpsuhaihve8n3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>数组实现栈的操作</p>\n<p>栈的初始化、入栈、出栈</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈的初始化、入栈、出栈</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>; <span class=\"comment\">// 代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyStack</span><span class=\"params\">(SqStack S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enStack</span><span class=\"params\">(SqStack &amp;S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[S.top--] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">getTop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    flag = <span class=\"built_in\">isEmptyStack</span>(S);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    ElemType  e; <span class=\"comment\">//用于存放获取栈顶的元素</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">getTop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">pop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;弹出栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>数组实现栈的操作</p>\n<p>栈的初始化、入栈、出栈</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈的初始化、入栈、出栈</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>; <span class=\"comment\">// 代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyStack</span><span class=\"params\">(SqStack S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enStack</span><span class=\"params\">(SqStack &amp;S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[S.top--] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">getTop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    flag = <span class=\"built_in\">isEmptyStack</span>(S);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    ElemType  e; <span class=\"comment\">//用于存放获取栈顶的元素</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">getTop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">pop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;弹出栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clhiwxcvg0006psuhg0255q5v","category_id":"clhiwxcvi0009psuh4v0e4vr7","_id":"clhiwxcvp000mpsuh4fk8apbe"},{"post_id":"clhiwxcvk000gpsuh6c4v3tb1","category_id":"clhiwxcvi0009psuh4v0e4vr7","_id":"clhiwxcvq000ppsuhad2f2ocr"},{"post_id":"clhiwxcvo000kpsuhaihve8n3","category_id":"clhiwxcvi0009psuh4v0e4vr7","_id":"clhiwxcvq000rpsuhabezhvoj"},{"post_id":"clhiwxcvh0008psuh4v1h287v","category_id":"clhiwxcvm000hpsuh2qu59cc7","_id":"clhiwxcvq000upsuh499a0elv"},{"post_id":"clhiwxcvi000bpsuhbdfx95cm","category_id":"clhiwxcvp000npsuhab8z723q","_id":"clhiwxcvq000vpsuh8rswal2e"},{"post_id":"clhiwxcvj000epsuhb72r762o","category_id":"clhiwxcvq000spsuh139afo1d","_id":"clhiwxcvq000wpsuh8ynb8p7i"}],"PostTag":[{"post_id":"clhiwxcvh0008psuh4v1h287v","tag_id":"clhiwxcvf0004psuh3yp44t9g","_id":"clhiwxcvj000dpsuh3ypr77sn"},{"post_id":"clhiwxcvb0001psuh4je36fgl","tag_id":"clhiwxcvf0004psuh3yp44t9g","_id":"clhiwxcvk000fpsuh6abfbt0t"},{"post_id":"clhiwxcvj000epsuhb72r762o","tag_id":"clhiwxcvj000cpsuh6n734kc4","_id":"clhiwxcvo000jpsuh7f2x5iaq"},{"post_id":"clhiwxcvg0006psuhg0255q5v","tag_id":"clhiwxcvj000cpsuh6n734kc4","_id":"clhiwxcvp000lpsuhdcbv0vl0"},{"post_id":"clhiwxcvk000gpsuh6c4v3tb1","tag_id":"clhiwxcvj000cpsuh6n734kc4","_id":"clhiwxcvq000opsuh5ahk89m4"},{"post_id":"clhiwxcvo000kpsuhaihve8n3","tag_id":"clhiwxcvj000cpsuh6n734kc4","_id":"clhiwxcvq000qpsuhbkd2e266"},{"post_id":"clhiwxcvi000bpsuhbdfx95cm","tag_id":"clhiwxcvj000cpsuh6n734kc4","_id":"clhiwxcvq000tpsuhae8dbjb8"}],"Tag":[{"name":"test","_id":"clhiwxcvf0004psuh3yp44t9g"},{"name":"数据结构","_id":"clhiwxcvj000cpsuh6n734kc4"}]}}