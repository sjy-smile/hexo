{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/default_cover1.jpg","path":"img/default_cover1.jpg","modified":1,"renderable":0},{"_id":"source/img/default_cover2.jpg","path":"img/default_cover2.jpg","modified":1,"renderable":0},{"_id":"source/img/default_cover3.jpg","path":"img/default_cover3.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.jpg","path":"img/favicon.jpg","modified":1,"renderable":0},{"_id":"source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":0},{"_id":"source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":0},{"_id":"source/img/top-img/top-img1.jpg","path":"img/top-img/top-img1.jpg","modified":1,"renderable":0},{"_id":"source/img/top-img/top-img2.jpg","path":"img/top-img/top-img2.jpg","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ceaf778fe36e77d3f691e24690b6f66c09bf3a4c","modified":1678775459100},{"_id":"source/_data/link.yml","hash":"cde25f0e89a600af17ef4c758209e37164081afb","modified":1678775459101},{"_id":"source/categories/index.md","hash":"a6969095b878c159115315052efadea41bd0ba85","modified":1678775459101},{"_id":"source/img/default_cover3.jpg","hash":"86484915558b6790c55f7a89a2ecee9389bb1cdc","modified":1678775459103},{"_id":"source/img/favicon.jpg","hash":"0f0d40d3882e3c2e70124c7892e96b43d18288b0","modified":1678775459103},{"_id":"source/_posts/20220427Linux服务器JDK安装配置.md","hash":"78a2c3360333f3dc84a48557b5a01da7d39c6596","modified":1683891528017},{"_id":"source/img/head.jpg","hash":"febc264caadae4fc9939c3268972064e7cb9991e","modified":1678775459103},{"_id":"source/css/modify.styl","hash":"baaa81fab849d83b560b43fba332585ec54545ca","modified":1678775459102},{"_id":"source/_posts/20220429Linux服务器Docker安装部署.md","hash":"f9d9a150a4a0ff126cf2b5495539579b27ddfdd9","modified":1683891528019},{"_id":"source/_posts/20220428Linux服务器Maven环境安装配置.md","hash":"d756b923ad036d00a73660f76c48728fe88b0448","modified":1683891528020},{"_id":"source/_posts/20220501Linux服务器node环境配置.md","hash":"96409f69b9be85137727b5dbf546c0c342f71b9a","modified":1683891528024},{"_id":"source/_posts/20220430Linux服务器git配置及常用命令.md","hash":"337af880296c8aac7ea0d713b9ce0b5b1050ef2a","modified":1683891528022},{"_id":"source/_posts/20220502Linux服务器MySQL不同安装部署方式.md","hash":"52fe8ec7012c2a0ff72d292fa331b62f0569d679","modified":1683891528028},{"_id":"source/_posts/20220505Linux手把手教你部署前端后端分离项目.md","hash":"79a7761d3c56151933cf9a74a4affee941fa79a5","modified":1683890505011},{"_id":"source/_posts/20220504Linux服务器nginx部署及用配常置详解.md","hash":"f42edd3b4317bdb77d935ce3ba38f1f5dc719b64","modified":1683891528033},{"_id":"source/_posts/20220503Linux服务器redis部署.md","hash":"3c868ce9a979a9b687bfc92def9ac1484706dfa8","modified":1683891528031},{"_id":"source/_posts/20220507List集合去重的五种方法.md","hash":"94a615fe421afd2605d98d888c748f99650df710","modified":1683890284805},{"_id":"source/_posts/20230514C++栈队列代码.md","hash":"9b1e29373fd60235f8c49962a9802d39abc4cd26","modified":1684051015836},{"_id":"source/_posts/20220508常用集合初始化方法.md","hash":"f4b5078c8c0d014753d98e7bad63e87282eb6e7a","modified":1683890284807},{"_id":"source/_posts/20220506多个集合快速找出重复数据的两种方法.md","hash":"247f0d2530c6fb7f7d84203e052a7d69e3055da0","modified":1683890284802},{"_id":"source/_posts/20220511Nginx负载均衡机制实现用户无感更新服务.md","hash":"ccca21e66182ff67bcc2c0bab0287862d55bd5c3","modified":1683890284822},{"_id":"source/_posts/20220509生成验证码的两种方式.md","hash":"ddd75a715204f5856c339d9b596d3bdddfda966d","modified":1683890284825},{"_id":"source/_posts/20230516顺序查找二分查找.md","hash":"1159edcd0ab0852549dcfb282ba9800898401595","modified":1684237783217},{"_id":"source/_posts/20220510服务器Nginx配置域名和证书.md","hash":"a7179eef35461124b3ef33326c22ecacfb389ddd","modified":1683890284818},{"_id":"source/_posts/20230513Linux常用命令大总结.md","hash":"4f60ab24dbeac9bd7630911e3c782d80290d41c3","modified":1683979527373},{"_id":"source/_posts/20230514二叉树层次建树前序中序后序遍历层序遍历代码.md","hash":"91b9f594f049eabaa037c15de9a55f37ba8cac01","modified":1684059127856},{"_id":"source/_posts/hello-world.md","hash":"73e3c0a581f3e1d457dab77c21525d769788c3f4","modified":1678779564317},{"_id":"source/_posts/install.md","hash":"eb143df2742caac1002c5590972f6b77776813d0","modified":1678779564317},{"_id":"source/_posts/循环队列代码实现.md","hash":"acd398c3cd8f0cde23b2d216bb9bd8d3e3ea8e61","modified":1683796443430},{"_id":"source/link/index.md","hash":"2d53c5c9ca0b5c5105f4f4336e6a828028af8de7","modified":1678775459107},{"_id":"source/_posts/mysql.md","hash":"68a58d0d839797c94a3cf226eaba450c127a5c9a","modified":1678779564317},{"_id":"source/_posts/数据结构单链表代码.md","hash":"bf74e5486f40e61f550fbf05b19c43b86acde304","modified":1683609390986},{"_id":"source/_posts/数据结构顺序表代码.md","hash":"866a76c6a50089c2a3e2c328ca71a334e6cb9355","modified":1683788666005},{"_id":"source/scripts/modify.js","hash":"1b66bc53fb101c2679174c42997a7680f4594428","modified":1678775459107},{"_id":"source/tags/index.md","hash":"21a5d590d8413a358fb8db9ac82212b49e744c45","modified":1678775459108},{"_id":"source/_posts/队列的链式存储代码实现.md","hash":"e222a557a938f341bdbf8684fa549e1eeccc35df","modified":1683796443432},{"_id":"source/_posts/数组实现栈的初始化入栈出栈操作.md","hash":"5965f8f1965639898b664691bea271dbd6c892cf","modified":1683796443433},{"_id":"source/img/top-img/top-img1.jpg","hash":"e09e084d8a19425e68da49adb7b57cfcf6d9b7e8","modified":1678775459104},{"_id":"source/img/default_cover2.jpg","hash":"1c503580a7541cae8dad1754a9970c9979988648","modified":1678775459103},{"_id":"source/img/default_cover1.jpg","hash":"72a23b742af6fcd7b17f1bde2f1b5d59712c1b1c","modified":1678775459102},{"_id":"source/img/top-img/top-img2.jpg","hash":"d4b24f3ed07d6da1e005768250eb6e666533b3c5","modified":1678775459105},{"_id":"source/img/wechat.jpg","hash":"2b04fa304ff01a088768eed261a2ba38800ec721","modified":1678775459106},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1678774888278},{"_id":"themes/butterfly/package.json","hash":"1e45baebff47690dc7c35e588984151fca5da175","modified":1678774888305},{"_id":"themes/butterfly/_config.yml","hash":"8c91f9c94709ac7462d93b342eebba22c48ff946","modified":1678774888279},{"_id":"themes/butterfly/README.md","hash":"46869886ed9ce4beedaad5b064789fd15861566e","modified":1678774888279},{"_id":"themes/butterfly/plugins.yml","hash":"cab6079dd07d698c7a91e90ea9b0dfa8d65fef7d","modified":1678774888305},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1678774888280},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1678774888280},{"_id":"themes/butterfly/README_CN.md","hash":"b95c89559c429049caa3f9f461a2b41ae98c0d68","modified":1678774888279},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1678774888281},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1678774888281},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1678774888280},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1678774888304},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1678774888305},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1678774888280},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1678774888305},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1678774888277},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1678774888278},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1678774888277},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1678774888305},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1678774888282},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1678774888278},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"e3162d25357d9f843a39aec29a9b8ebe539099b4","modified":1678774888282},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1678774888282},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1678774888277},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"963cf63135f775a209aef39b4870b63d53109b03","modified":1678774888282},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ab3ff72ecaa7da09fcb7d03a8b341a061e870826","modified":1678774888286},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1678774888306},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1678774888306},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1678774888290},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1678774888306},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"fcf525252ab3d02b6b880de7e669b4b79d230b33","modified":1678774888306},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"828f5075efd64bf6f0fc5d9eb35b1da7b282ad28","modified":1678776861380},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1678774888306},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1678774888289},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1678774888307},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1678774888307},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1678774888308},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1678774888309},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"688b424e4fae8db268033dd1f78b999932b22e57","modified":1678774888308},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1678774888308},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1678774888309},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1678774888310},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1678774888311},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1678774888311},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1678774888307},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1678774888321},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1678774888321},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1678774888307},{"_id":"themes/butterfly/source/js/main.js","hash":"ab1eb2ae2fc7937aa0579d5293432fa986bf49b2","modified":1678774888323},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1678774888321},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1678774888321},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1678774888283},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1678774888284},{"_id":"themes/butterfly/source/js/utils.js","hash":"6aff3a8760442cc66c0c0afdfc4878e07d430c77","modified":1678774888323},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1678774888321},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1678774888283},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1678774888284},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1678774888283},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1678774888285},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1678774888286},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1678774888287},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1678774888290},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1678774888288},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1678774888289},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1678774888302},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1678774888304},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1678774888303},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1678774888304},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1678774888311},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1678774888304},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fde51780f525b002885c9f189cccc459542f5dc6","modified":1678774888311},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"01ba993e7bd384827c0f5499ae0c5f82e068d844","modified":1678774888316},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1678774888312},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1678774888314},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1678774888313},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1678774888314},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1678774888316},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1678774888313},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"9d75d98833e8897e5157dfe53140293994e866be","modified":1678777623613},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1678774888314},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1678774888315},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1678774888316},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1678774888315},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1678774888318},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1678774888316},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1678774888316},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1678774888316},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"85f5f2c9150061bae8a5188c10f23a63e7e01a4f","modified":1678774888318},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1678774888317},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"f7d3d598a27467d24b0b37f49c012b5759394c0a","modified":1678774888318},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1678774888318},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1678774888317},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1678774888318},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1678774888320},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1678774888319},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1678774888320},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1678774888321},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1678774888320},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1678774888290},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1678774888320},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1678774888290},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1678774888291},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"1ada177b1635bd7d1b6f02b33f7a81823d8bce0c","modified":1678774888323},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1678774888291},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1678774888292},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"306b7aa7d86e46df28fa52f75cead4f9d71cacb2","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1678774888293},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"ed4af213570dd7d3e2165f830f45b3e57f04afd4","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1678774888294},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1678774888295},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bf6b1453096dd7f53d81cde078c233d301e14304","modified":1678774888296},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fad70676346f194f166ac4e714ac6ff37cbf50ea","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1678774888297},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"75ebfe533dd7ee59113b84c2972694cadd92c6a9","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1678774888298},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1678774888300},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1678774888299},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"0785346c1d8c49a10f02481b701138ed5898f4ac","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1678774888301},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1678774888301},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1678774888313},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1678774888312},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1678774888312},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1678774888313},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1678774888313},{"_id":"public/css/modify.css","hash":"371bea977f7bb2e4606d8a14574026223aeb047a","modified":1684237806157},{"_id":"public/scripts/modify.js","hash":"21628f2508dcd11da79fce150cf973c93a4f762a","modified":1684237806157},{"_id":"public/atom.xml","hash":"ae565b5d597f72c2ce4dce003b763e74f726fb8d","modified":1684237806157},{"_id":"public/search.xml","hash":"f8e6103829369a952a180cbea377cb58495fd0c3","modified":1684237806157},{"_id":"public/404.html","hash":"69ae84a28965bb83452ce8041eb168bbd9d5b08f","modified":1684237806157},{"_id":"public/categories/index.html","hash":"ac731194336f168e7ba2bcd0477feb39a7cb3bd8","modified":1684237806157},{"_id":"public/link/index.html","hash":"edc9905a81749f126e750bca7f77e215e2917fff","modified":1684237806157},{"_id":"public/tags/index.html","hash":"b40eeae72db9388289ee8923d9a4f9d71a37e3a4","modified":1684237806157},{"_id":"public/posts/b78c9d72.html","hash":"d032c5b45f6996b9ce12bb2d043f89875994d863","modified":1684237806157},{"_id":"public/posts/225d868e.html","hash":"80545ffb486cb486ac1b303c83085ee9168a4f7c","modified":1684237806157},{"_id":"public/posts/ab1e3f0.html","hash":"8386b717b86cc1e566eff461bd0317d989cfb5d9","modified":1684237806157},{"_id":"public/posts/5b03ebe5.html","hash":"4847a0a481cf4c9f0603da2fbdcc0f7e8ad4a1d4","modified":1684237806157},{"_id":"public/posts/d1d4b46a.html","hash":"e93c0e13c26f6b297eda06b9d802db22b87ad5a5","modified":1684237806157},{"_id":"public/posts/7ee9b5.html","hash":"902a13ac50a267a1d5ebbde04c66570008011fae","modified":1684237806157},{"_id":"public/posts/32dfacd1.html","hash":"90bdb5f0d936797c5c8d32702c9c66a7bd99cde7","modified":1684237806157},{"_id":"public/posts/e434efff.html","hash":"697ff08e7ddb6a267da781163dec88d9db67ff01","modified":1684237806157},{"_id":"public/posts/2c1c94fc.html","hash":"069c504f6a161b4aa626c2e748c234f8cc7a4396","modified":1684237806157},{"_id":"public/posts/669576d7.html","hash":"c4bb87d023e2476c0e2b77491f66f02206f59fbc","modified":1684237806157},{"_id":"public/posts/5ae5e555.html","hash":"70b424ff8598e3384fae820977b6ddf24401f299","modified":1684237806157},{"_id":"public/posts/2f15bdd3.html","hash":"08c760f14b0d1e3dab35ab657be1e5d2e07b70e6","modified":1684237806157},{"_id":"public/posts/ba62eb1b.html","hash":"0757df432b0b7330abb7f0997bc1826c7b7a9282","modified":1684237806157},{"_id":"public/posts/6f8b73d.html","hash":"30d20c5aa8b7f4aca8b73bd67c97207a72475380","modified":1684237806157},{"_id":"public/posts/62af1c5a.html","hash":"33cd625588509ff50eda24f625f3fed830514fec","modified":1684237806157},{"_id":"public/posts/7e10b77c.html","hash":"46b54f51db066abf383b94a03d27dc491a7a65b2","modified":1684237806157},{"_id":"public/posts/858c5b5e.html","hash":"bc747dd938bef9a0f90003a0451c40e951902ea4","modified":1684237806157},{"_id":"public/posts/24593a1d.html","hash":"c7f4c1c28ee45f5199af829606500eaf0acdce8b","modified":1684237806157},{"_id":"public/posts/6113e70e.html","hash":"f8e3ff6241b1c831aee7c78c34515dc823f45d84","modified":1684237806157},{"_id":"public/posts/c699e256.html","hash":"f9b8a7e1d2353b0ef9d5ac2ee030e6b608df5d29","modified":1684237806157},{"_id":"public/posts/d68e7f96.html","hash":"06ce2ee976238d4868440f3eb3315e4cdc933336","modified":1684237806157},{"_id":"public/posts/76bca4ef.html","hash":"fa6151dba96974bb19d460046fae72b4f64cdb96","modified":1684237806157},{"_id":"public/posts/82eb5d0c.html","hash":"be22e0eb4966500d3e88b57983a767f7c538f168","modified":1684237806157},{"_id":"public/posts/f12e0651.html","hash":"8bbad6e813998d7a1c69278bce66f0137944a5ff","modified":1684237806157},{"_id":"public/posts/4a17b156.html","hash":"ffe53d2d0591542adfe6265aaf7f56f7a9dd7e6f","modified":1684237806157},{"_id":"public/posts/0.html","hash":"6e22d177cd63738f58273a5abea3fa1febfb84ed","modified":1684237806157},{"_id":"public/posts/9520183a.html","hash":"6119da485cfe99be944c354568f82eb4d96e5825","modified":1684237806157},{"_id":"public/tags/maven/index.html","hash":"f75e00a1adaddb0fad6d8e885fc831e80ddd8fba","modified":1684237806157},{"_id":"public/tags/jdk/index.html","hash":"f4789ca97bfc59d07ede75606c3c98d9da423aea","modified":1684237806157},{"_id":"public/tags/docker/index.html","hash":"9b7223a591d79919713bad7cc1b98ecdbad22476","modified":1684237806157},{"_id":"public/tags/git/index.html","hash":"235f42a9d6411ba56a3b6d1c5629d53f9d19ce6b","modified":1684237806157},{"_id":"public/tags/node/index.html","hash":"0799ab8760a8c3b6a512d8acb029362fb890e049","modified":1684237806157},{"_id":"public/tags/mysql/index.html","hash":"5a18386a91a492533481e2819f89e8817e81cf06","modified":1684237806157},{"_id":"public/tags/Linux/index.html","hash":"46d4f34ce664390d70ee4e8773e7dc8ff40cdd65","modified":1684237806157},{"_id":"public/tags/List/index.html","hash":"090719771f4d81a7745290119eb3c8347e637607","modified":1684237806157},{"_id":"public/tags/redis/index.html","hash":"e3343595bb4700ea19141238bf8dccbb186142a4","modified":1684237806157},{"_id":"public/tags/nginx/index.html","hash":"f62388224821bffa18059ca66399556913b2fa26","modified":1684237806157},{"_id":"public/tags/二叉树/index.html","hash":"5b464f934b0055525e685e8cf542ea839f5208e9","modified":1684237806157},{"_id":"public/tags/test/index.html","hash":"91d8ba78c84137438004cea0e796afac88036d5d","modified":1684237806157},{"_id":"public/tags/数据结构/index.html","hash":"341c418f9b0ddf07879472ada8e2eba562ed3b0c","modified":1684237806157},{"_id":"public/index.html","hash":"95fd281183f1f54c91e047967451d4e955a26021","modified":1684237806157},{"_id":"public/tags/SpringBoot/index.html","hash":"8123979540e7fbf6e24162b6597b6732b406910d","modified":1684237806157},{"_id":"public/tags/linux/index.html","hash":"dce45d70505b2f088d2f98fb40db43e510e8716c","modified":1684237806157},{"_id":"public/page/2/index.html","hash":"ee104d8ca58819d688b60a4f39bb110fae5804ca","modified":1684237806157},{"_id":"public/page/3/index.html","hash":"88df264ca072a8265fa4970a6cc8aea540432264","modified":1684237806157},{"_id":"public/archives/index.html","hash":"80dafcb74219c5f4d4e1d447fa0f6caa8a96b6d9","modified":1684237806157},{"_id":"public/archives/page/2/index.html","hash":"bbb9bd9188544a42ca836c4f85ebd131adb51920","modified":1684237806157},{"_id":"public/archives/page/3/index.html","hash":"3b6b95c5dae43f722b33c4b69cfcdb49123af61a","modified":1684237806157},{"_id":"public/archives/2023/index.html","hash":"4b20970012d6151f2e2741a4c69552c2ae88f98a","modified":1684237806157},{"_id":"public/archives/2023/page/2/index.html","hash":"7e224bfaeb50002ca86674370f06a4e19563576c","modified":1684237806157},{"_id":"public/archives/2023/page/3/index.html","hash":"bf4057afa65bf703e80d4b38445d888d1548cb46","modified":1684237806157},{"_id":"public/archives/2023/02/index.html","hash":"e258c1f1f89c7e9de572d57119024074b4178f45","modified":1684237806157},{"_id":"public/archives/2023/03/index.html","hash":"d12aaf5e0dad839d2021f8890881ac219beeff1e","modified":1684237806157},{"_id":"public/archives/2023/04/index.html","hash":"d93745af363ec82c89dc5f368e77572a4930eb28","modified":1684237806157},{"_id":"public/archives/2023/05/index.html","hash":"de1a16a3a024ebc6178d8e4f53a2b4995a78b8ec","modified":1684237806157},{"_id":"public/archives/2023/05/page/2/index.html","hash":"8881b75a7c8ffac82a97887ad72e4c996988cc0a","modified":1684237806157},{"_id":"public/categories/后端/index.html","hash":"43840abd98a0503d2c84ed84ddc03a23419e0acf","modified":1684237806157},{"_id":"public/categories/后端/page/2/index.html","hash":"7b9e6716871180b092ea91ab5081d01f9b8eb59e","modified":1684237806157},{"_id":"public/categories/server/index.html","hash":"472b56d1de112c82e54cbbeb2b49d12b2c8313fa","modified":1684237806157},{"_id":"public/categories/前端/index.html","hash":"5001fa1bf5130dac24660b4dfbbf2abce2a2d8e8","modified":1684237806157},{"_id":"public/categories/数据结构/index.html","hash":"23333a06d71f6e5a67e7a640a6abaf94d61ffa26","modified":1684237806157},{"_id":"public/categories/mysql/index.html","hash":"4921de3e24920c43477e2cdd73f77385afe97e30","modified":1684237806157},{"_id":"public/categories/队列/index.html","hash":"6a0278a739742ca59a8e13605b811e16519eae63","modified":1684237806157},{"_id":"public/categories/单链表/index.html","hash":"4dafab1fbb402a307c3241c27f836204e4be7102","modified":1684237806157},{"_id":"public/categories/顺序表/index.html","hash":"a233eb1cf9bf3df2d5c172c0eb7e35f297f4d6e2","modified":1684237806157},{"_id":"public/img/default_cover3.jpg","hash":"86484915558b6790c55f7a89a2ecee9389bb1cdc","modified":1684237806157},{"_id":"public/img/favicon.jpg","hash":"0f0d40d3882e3c2e70124c7892e96b43d18288b0","modified":1684237806157},{"_id":"public/img/head.jpg","hash":"febc264caadae4fc9939c3268972064e7cb9991e","modified":1684237806157},{"_id":"public/img/top-img/top-img1.jpg","hash":"e09e084d8a19425e68da49adb7b57cfcf6d9b7e8","modified":1684237806157},{"_id":"public/CNAME","hash":"ceaf778fe36e77d3f691e24690b6f66c09bf3a4c","modified":1684237806157},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1684237806157},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1684237806157},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1684237806157},{"_id":"public/img/default_cover1.jpg","hash":"72a23b742af6fcd7b17f1bde2f1b5d59712c1b1c","modified":1684237806157},{"_id":"public/img/top-img/top-img2.jpg","hash":"d4b24f3ed07d6da1e005768250eb6e666533b3c5","modified":1684237806157},{"_id":"public/img/default_cover2.jpg","hash":"1c503580a7541cae8dad1754a9970c9979988648","modified":1684237806157},{"_id":"public/img/wechat.jpg","hash":"2b04fa304ff01a088768eed261a2ba38800ec721","modified":1684237806157},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1684237806157},{"_id":"public/js/utils.js","hash":"58b36a932e5d41d63eac896468b6e8d25fc4bcee","modified":1684237806157},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1684237806157},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1684237806157},{"_id":"public/css/index.css","hash":"8b737f6a5a6c0f3c56539d6a16ff1540f1daffc9","modified":1684237806157},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1684237806157},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1684237806157}],"Category":[{"name":"后端","_id":"clhq7pcx20004w0uh6el615bh"},{"name":"server","_id":"clhq7pcx6000cw0uh5l741xcx"},{"name":"前端","_id":"clhq7pcxc000pw0uh4saperic"},{"name":"数据结构","_id":"clhq7pcxh0018w0uh3tqmb5b3"},{"name":"mysql","_id":"clhq7pcxn001tw0uh4cgy798i"},{"name":"队列","_id":"clhq7pcxp0020w0uhcsb1gx5z"},{"name":"单链表","_id":"clhq7pcxp0024w0uh7n22ac0k"},{"name":"顺序表","_id":"clhq7pcxq0028w0uhge3m403v"}],"Data":[{"_id":"link","data":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"文章分类","date":"2023-03-14T06:30:59.101Z","type":"categories","_content":"\n","source":"categories/index.md","raw":"---\ntitle: \"文章分类\"\ndate: {{ date }}\ntype: \"categories\"\n---\n\n","updated":"2023-03-14T06:30:59.101Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhq7pcwv0000w0uh3h0d1ev5","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":""},{"title":"友情链接","date":"2023-02-08T14:17:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: \"友情链接\"\ndate: 2023-02-08 22:17:49\ntype: \"link\"\n---\n","updated":"2023-03-14T06:30:59.107Z","path":"link/index.html","comments":1,"layout":"page","_id":"clhq7pcx00002w0uh3qv184wm","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签页","date":"2023-03-14T06:30:59.108Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: \"标签页\"\ndate: {{ date }}\ntype: \"tags\"\n---\n","updated":"2023-03-14T06:30:59.108Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhq7pcx30006w0uhc92c05lj","content":"","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":""},{"_content":"@import 'nib'\n\n// 顶部图\n#page-header\n  &, &:before\n    background: transparent !important\n  &.post-bg, &.not-home-page\n    height: 280px !important\n  #post-info\n    bottom: 40px !important\n  #page-site-info\n    top: 140px !important\n\n  @media screen and (max-width: 768px)\n    &.not-home-page\n      height: 200px !important\n    #post-info\n      bottom: 10px !important\n    #page-site-info\n      top: 100px !important\n\n.top-img\n  height: 250px\n  margin: -50px -40px 50px\n  border-top-left-radius: inherit\n  border-top-right-radius: inherit\n  background-position: center center\n  background-size: cover\n  transition: all 0.3s\n\n  @media screen and (max-width: 768px)\n    height: 230px\n    margin: -36px -14px 36px\n\n  [data-theme='dark'] &\n    filter: brightness(0.8)\n\n// 页脚\n#footer:before\n  background-color: alpha(#FFF, .5)\n\n  [data-theme='dark'] &\n    background-color: alpha(#000, .5)\n\n#footer-wrap, #footer-wrap a\n  color: #111\n  transition: unset\n\n  [data-theme='dark'] &\n    color: var(--light-grey)","source":"css/modify.styl","raw":"@import 'nib'\n\n// 顶部图\n#page-header\n  &, &:before\n    background: transparent !important\n  &.post-bg, &.not-home-page\n    height: 280px !important\n  #post-info\n    bottom: 40px !important\n  #page-site-info\n    top: 140px !important\n\n  @media screen and (max-width: 768px)\n    &.not-home-page\n      height: 200px !important\n    #post-info\n      bottom: 10px !important\n    #page-site-info\n      top: 100px !important\n\n.top-img\n  height: 250px\n  margin: -50px -40px 50px\n  border-top-left-radius: inherit\n  border-top-right-radius: inherit\n  background-position: center center\n  background-size: cover\n  transition: all 0.3s\n\n  @media screen and (max-width: 768px)\n    height: 230px\n    margin: -36px -14px 36px\n\n  [data-theme='dark'] &\n    filter: brightness(0.8)\n\n// 页脚\n#footer:before\n  background-color: alpha(#FFF, .5)\n\n  [data-theme='dark'] &\n    background-color: alpha(#000, .5)\n\n#footer-wrap, #footer-wrap a\n  color: #111\n  transition: unset\n\n  [data-theme='dark'] &\n    color: var(--light-grey)","date":"2023-03-14T06:30:59.102Z","updated":"2023-03-14T06:30:59.102Z","path":"css/modify.css","layout":"false","title":"","comments":1,"_id":"clhq7pcx40008w0uhd6l395z9","content":"#page-header,\n#page-header:before {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","cover_type":"img","excerpt":"","more":"#page-header,\n#page-header:before {\n  background: transparent !important;\n}\n#page-header.post-bg,\n#page-header.not-home-page {\n  height: 280px !important;\n}\n#page-header #post-info {\n  bottom: 40px !important;\n}\n#page-header #page-site-info {\n  top: 140px !important;\n}\n@media screen and (max-width: 768px) {\n  #page-header.not-home-page {\n    height: 200px !important;\n  }\n  #page-header #post-info {\n    bottom: 10px !important;\n  }\n  #page-header #page-site-info {\n    top: 100px !important;\n  }\n}\n.top-img {\n  height: 250px;\n  margin: -50px -40px 50px;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  background-position: center center;\n  background-size: cover;\n  -webkit-transition: all 0.3s;\n  -moz-transition: all 0.3s;\n  -o-transition: all 0.3s;\n  -ms-transition: all 0.3s;\n  transition: all 0.3s;\n}\n@media screen and (max-width: 768px) {\n  .top-img {\n    height: 230px;\n    margin: -36px -14px 36px;\n  }\n}\n[data-theme='dark'] .top-img {\n  filter: brightness(0.8);\n}\n#footer:before {\n  background-color: rgba(255,255,255,0.5);\n}\n[data-theme='dark'] #footer:before {\n  background-color: rgba(0,0,0,0.5);\n}\n#footer-wrap,\n#footer-wrap a {\n  color: #111;\n  -webkit-transition: unset;\n  -moz-transition: unset;\n  -o-transition: unset;\n  -ms-transition: unset;\n  transition: unset;\n}\n[data-theme='dark'] #footer-wrap,\n[data-theme='dark'] #footer-wrap a {\n  color: var(--light-grey);\n}\n"},{"_content":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","source":"scripts/modify.js","raw":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","date":"2023-03-14T06:30:59.107Z","updated":"2023-03-14T06:30:59.107Z","path":"scripts/modify.js","layout":"false","title":"","comments":1,"_id":"clhq7pcx5000aw0uh0tl3hmic","content":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":"'use strict';\nconst cheerio = require('cheerio');\n\n/**\n * 在页面插入新顶部图\n * @param {cheerio.Root} $ Root\n */\nfunction insertTopImg($) {\n    let header = $('#page-header');\n    if (header.length === 0) return;\n    let background = header.css('background-image');\n    if (!background) return;\n    $('#post, #page, #archive, #tag, #category').prepend(`<div class=\"top-img\" style=\"background-image: ${background};\"></div>`);\n}\n\nhexo.extend.filter.register('after_render:html', function(str, data) {\n    let $ = cheerio.load(str, {\n        decodeEntities: false\n    });\n    insertTopImg($);\n    return $.html();\n});"}],"Post":[{"abbrlink":"f12e0651","title":"Linux服务器Maven环境安装配置","date":"2023-04-28T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"阿里云服务器配置 `maven` 环境变量\n\n阿里云 `maven` 镜像[地址](https://mirrors.aliyun.com/apache/maven/maven-3/)，根据自己需求下载对应版本\n\n```bash\n# 创建文件夹\nmkdir maven\n# 下载\nwget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\n# 解压\ntar -zxvf apache-maven-3.6.3-bin.tar.gz\n# 进入\ncd  apache-maven-3.6.3\n\n# 获取路径:\npwd\n  \n# 配置环境变量：\nvim  /etc/profile\n=====================================================\n# 配置文件添加下面两行内容，自己maven安装目录，例如：/maven/apache-maven-3.6.3\nexport MAVEN_HOME=/maven/apache-maven-3.6.3\nexport PATH=$PATH:$MAVEN_HOME/bin\n# 刷新环境变量\nsource /etc/profile\n# 查看maven版本\nmvn -version\n```\n\n修改仓库默认地址，进入 `maven` 下的 `conf` 目录，编辑 `settings.xml` 文件，打开 `localRepository` 注释的仓库地址，修改自己存放的依赖地址即可\n\n```xml\n<localRepository>/path/to/local/repo</localRepository>\n```\n\n修改 `maven` 配置文件下的 `settings.xml` 镜像地址为阿里云的，替换 `mirrors` 以下配置\n\n```xml\n\t<!--阿里云镜像1-->\n    <mirror>\n      <id>aliyunId</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/repository/central</url>\n    </mirror>\n     <!--阿里云镜像2-->\n    <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/groups/public/</url>\n    </mirror>\n     <!--阿里云镜像3-->\n    <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/repositories/central/</url>\n    </mirror>\n     <!--阿里云镜像4-->\n     <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://central.maven.org/maven2</url>\n    </mirror>\n```\n\n\n\n\n\n\n","source":"_posts/20220428Linux服务器Maven环境安装配置.md","raw":"---\nabbrlink: f12e0651\ntitle: Linux服务器Maven环境安装配置\ntags: maven\ncategories: 后端\ndate: 2023-04-28 16:22:35\ncover:\n---\n阿里云服务器配置 `maven` 环境变量\n\n阿里云 `maven` 镜像[地址](https://mirrors.aliyun.com/apache/maven/maven-3/)，根据自己需求下载对应版本\n\n```bash\n# 创建文件夹\nmkdir maven\n# 下载\nwget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz\n# 解压\ntar -zxvf apache-maven-3.6.3-bin.tar.gz\n# 进入\ncd  apache-maven-3.6.3\n\n# 获取路径:\npwd\n  \n# 配置环境变量：\nvim  /etc/profile\n=====================================================\n# 配置文件添加下面两行内容，自己maven安装目录，例如：/maven/apache-maven-3.6.3\nexport MAVEN_HOME=/maven/apache-maven-3.6.3\nexport PATH=$PATH:$MAVEN_HOME/bin\n# 刷新环境变量\nsource /etc/profile\n# 查看maven版本\nmvn -version\n```\n\n修改仓库默认地址，进入 `maven` 下的 `conf` 目录，编辑 `settings.xml` 文件，打开 `localRepository` 注释的仓库地址，修改自己存放的依赖地址即可\n\n```xml\n<localRepository>/path/to/local/repo</localRepository>\n```\n\n修改 `maven` 配置文件下的 `settings.xml` 镜像地址为阿里云的，替换 `mirrors` 以下配置\n\n```xml\n\t<!--阿里云镜像1-->\n    <mirror>\n      <id>aliyunId</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/repository/central</url>\n    </mirror>\n     <!--阿里云镜像2-->\n    <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/groups/public/</url>\n    </mirror>\n     <!--阿里云镜像3-->\n    <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://maven.aliyun.com/nexus/content/repositories/central/</url>\n    </mirror>\n     <!--阿里云镜像4-->\n     <mirror>\n      <id>alimaven</id>\n      <mirrorOf>central</mirrorOf>\n      <name>aliyun maven</name>\n      <url>https://central.maven.org/maven2</url>\n    </mirror>\n```\n\n\n\n\n\n\n","slug":"20220428Linux服务器Maven环境安装配置","published":1,"updated":"2023-05-12T11:38:48.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcwx0001w0uh6cwg8c8v","content":"<p>阿里云服务器配置 <code>maven</code> 环境变量</p>\n<p>阿里云 <code>maven</code> 镜像<a href=\"https://mirrors.aliyun.com/apache/maven/maven-3/\">地址</a>，根据自己需求下载对应版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> maven</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span>  apache-maven-3.6.3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取路径:</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量：</span></span><br><span class=\"line\">vim  /etc/profile</span><br><span class=\"line\">=====================================================</span><br><span class=\"line\"><span class=\"comment\"># 配置文件添加下面两行内容，自己maven安装目录，例如：/maven/apache-maven-3.6.3</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME=/maven/apache-maven-3.6.3</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MAVEN_HOME</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 刷新环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 查看maven版本</span></span><br><span class=\"line\">mvn -version</span><br></pre></td></tr></table></figure>\n\n<p>修改仓库默认地址，进入 <code>maven</code> 下的 <code>conf</code> 目录，编辑 <code>settings.xml</code> 文件，打开 <code>localRepository</code> 注释的仓库地址，修改自己存放的依赖地址即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>/path/to/local/repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>maven</code> 配置文件下的 <code>settings.xml</code> 镜像地址为阿里云的，替换 <code>mirrors</code> 以下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--阿里云镜像1--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunId<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像2--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像3--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/repositories/central/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像4--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://central.maven.org/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>阿里云服务器配置 <code>maven</code> 环境变量</p>\n<p>阿里云 <code>maven</code> 镜像<a href=\"https://mirrors.aliyun.com/apache/maven/maven-3/\">地址</a>，根据自己需求下载对应版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> maven</span><br><span class=\"line\"><span class=\"comment\"># 下载</span></span><br><span class=\"line\">wget https://mirrors.aliyun.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf apache-maven-3.6.3-bin.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span>  apache-maven-3.6.3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取路径:</span></span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 配置环境变量：</span></span><br><span class=\"line\">vim  /etc/profile</span><br><span class=\"line\">=====================================================</span><br><span class=\"line\"><span class=\"comment\"># 配置文件添加下面两行内容，自己maven安装目录，例如：/maven/apache-maven-3.6.3</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> MAVEN_HOME=/maven/apache-maven-3.6.3</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$MAVEN_HOME</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 刷新环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 查看maven版本</span></span><br><span class=\"line\">mvn -version</span><br></pre></td></tr></table></figure>\n\n<p>修改仓库默认地址，进入 <code>maven</code> 下的 <code>conf</code> 目录，编辑 <code>settings.xml</code> 文件，打开 <code>localRepository</code> 注释的仓库地址，修改自己存放的依赖地址即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>/path/to/local/repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>maven</code> 配置文件下的 <code>settings.xml</code> 镜像地址为阿里云的，替换 <code>mirrors</code> 以下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--阿里云镜像1--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunId<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像2--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像3--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/nexus/content/repositories/central/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--阿里云镜像4--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://central.maven.org/maven2<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"abbrlink":"82eb5d0c","title":"Linux服务器JDK安装配置","date":"2023-04-27T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"#### JDK安装和配置\n\n1、下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n\n2、上传到服务器上\n\n3、在上传后的 jdk 目录执行 [下载地址](https://www.aliyundrive.com/s/5Ksswouz3ka)\n\n```bash\n tar -zxvf jdk-8u291-linux-x64.tar.gz\n```\n\n4、使用 vim 编辑器，配置环境变量\n\n```bash\nsudo vim /etc/profile\n# 在文件最后添加如下内容，\nexport JAVA_HOME=/usr/java/jdk1.8.0_121\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n5、退出编辑器，使环境变量设置立即生效即可：source /etc/profile\n\n6、输入 java -version  出现以下内容说明环境变量配置成功\n\n```bash\n[root@izuf61151k3ad2dso6mo9oz /]# java -version\njava version \"1.8.0_152\"\nJava(TM) SE Runtime Environment (build 1.8.0_152-b16)\nJava HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)\n```\n\n**使用 yum 安装 jdk 非常简单，只需一行命令即可**\n\n```bash\n# 卸载之前的版本\nyum remove -y `yum list installed | grep java | awk '{print $1}'`\nyum remove -y `yum list installed | grep jdk | awk '{print $1}'`\n# 安装全部依赖\nyum install -y java-1.8.0-openjdk*\n# 开发环境，不安装不能进行 javac 编译\nyum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\nyum 安装配置环境变量\n\n```bash\n# 查找安装目录，依次执行一下命令\nwhich java\nls -lr /usr/bin/java\nls -lrt /etc/alternatives/java\n# 可以直接使用 find 命令查找\nfind / -name java\n```\n\n出现以下结果则可查看 jdk 默认安装目录\n\n```bash\n[root@aliyun /]# ls -lrt /etc/alternatives/java\nlrwxrwxrwx 1 root root 73 Mar 27 14:46 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre/bin/java\n```\n\n安装路径为：`/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64`\n\n编辑 profile 文件\n\n```bash\nvim /etc/profile\n```\n\n添加以下配置\n\n```bash\n# JDK 环境变量\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64\nexport CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar\nexport PATH=${PATH}:${JAVA_HOME}/bin\n```\n\n刷新配置\n\n```bash\nsource /etc/profile\n```\n\n检查 jdk 安装配置是否成功\n\n```bash\n# 执行以下命令都出现版本则说明安装成功\njava -version\njavac -version\n# 如果 javac 不能执行成功，安装JDK，如果没有 java-1.8.0-openjdk-devel 就没有 javac 命令\nyum install java-1.8.0-openjdk-devel.x86_64\n```\n\n##### 补充说明\n\n使用 yum 安装可能出现问题\n\n如果出现以下情况\n\n```bash\n[root@localhost /]# yum update\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\nThere are no enabled repos.\n Run \"yum repolist all\" to see the repos you have.\n To enable Red Hat Subscription Management repositories:\n     subscription-manager repos --enable <repo>\n To enable custom repositories:\n     yum-config-manager --enable <repo>\n```\n\n执行前先备份：`cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak`\n\n阿里 repo 文件：`wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`\n\n执行命令：`curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`\n\nwget 和 curl 都是下载的意思，执行一行命令即可\n\n\n\n\n\n\n","source":"_posts/20220427Linux服务器JDK安装配置.md","raw":"---\nabbrlink: 82eb5d0c\ntitle: Linux服务器JDK安装配置\ntags: jdk\ncategories: server\ndate: 2023-04-27 16:22:35\ncover:\n---\n#### JDK安装和配置\n\n1、下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n\n2、上传到服务器上\n\n3、在上传后的 jdk 目录执行 [下载地址](https://www.aliyundrive.com/s/5Ksswouz3ka)\n\n```bash\n tar -zxvf jdk-8u291-linux-x64.tar.gz\n```\n\n4、使用 vim 编辑器，配置环境变量\n\n```bash\nsudo vim /etc/profile\n# 在文件最后添加如下内容，\nexport JAVA_HOME=/usr/java/jdk1.8.0_121\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n5、退出编辑器，使环境变量设置立即生效即可：source /etc/profile\n\n6、输入 java -version  出现以下内容说明环境变量配置成功\n\n```bash\n[root@izuf61151k3ad2dso6mo9oz /]# java -version\njava version \"1.8.0_152\"\nJava(TM) SE Runtime Environment (build 1.8.0_152-b16)\nJava HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)\n```\n\n**使用 yum 安装 jdk 非常简单，只需一行命令即可**\n\n```bash\n# 卸载之前的版本\nyum remove -y `yum list installed | grep java | awk '{print $1}'`\nyum remove -y `yum list installed | grep jdk | awk '{print $1}'`\n# 安装全部依赖\nyum install -y java-1.8.0-openjdk*\n# 开发环境，不安装不能进行 javac 编译\nyum install -y java-1.8.0-openjdk-devel.x86_64\n```\n\nyum 安装配置环境变量\n\n```bash\n# 查找安装目录，依次执行一下命令\nwhich java\nls -lr /usr/bin/java\nls -lrt /etc/alternatives/java\n# 可以直接使用 find 命令查找\nfind / -name java\n```\n\n出现以下结果则可查看 jdk 默认安装目录\n\n```bash\n[root@aliyun /]# ls -lrt /etc/alternatives/java\nlrwxrwxrwx 1 root root 73 Mar 27 14:46 /etc/alternatives/java -> /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre/bin/java\n```\n\n安装路径为：`/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64`\n\n编辑 profile 文件\n\n```bash\nvim /etc/profile\n```\n\n添加以下配置\n\n```bash\n# JDK 环境变量\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64\nexport CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar\nexport PATH=${PATH}:${JAVA_HOME}/bin\n```\n\n刷新配置\n\n```bash\nsource /etc/profile\n```\n\n检查 jdk 安装配置是否成功\n\n```bash\n# 执行以下命令都出现版本则说明安装成功\njava -version\njavac -version\n# 如果 javac 不能执行成功，安装JDK，如果没有 java-1.8.0-openjdk-devel 就没有 javac 命令\nyum install java-1.8.0-openjdk-devel.x86_64\n```\n\n##### 补充说明\n\n使用 yum 安装可能出现问题\n\n如果出现以下情况\n\n```bash\n[root@localhost /]# yum update\n已加载插件：fastestmirror\nLoading mirror speeds from cached hostfile\nThere are no enabled repos.\n Run \"yum repolist all\" to see the repos you have.\n To enable Red Hat Subscription Management repositories:\n     subscription-manager repos --enable <repo>\n To enable custom repositories:\n     yum-config-manager --enable <repo>\n```\n\n执行前先备份：`cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak`\n\n阿里 repo 文件：`wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`\n\n执行命令：`curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo`\n\nwget 和 curl 都是下载的意思，执行一行命令即可\n\n\n\n\n\n\n","slug":"20220427Linux服务器JDK安装配置","published":1,"updated":"2023-05-12T11:38:48.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx00003w0uhcgiwdglr","content":"<h4 id=\"JDK安装和配置\"><a href=\"#JDK安装和配置\" class=\"headerlink\" title=\"JDK安装和配置\"></a>JDK安装和配置</h4><p>1、下载地址：<a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>\n<p>2、上传到服务器上</p>\n<p>3、在上传后的 jdk 目录执行 <a href=\"https://www.aliyundrive.com/s/5Ksswouz3ka\">下载地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u291-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>4、使用 vim 编辑器，配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在文件最后添加如下内容，</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n<p>5、退出编辑器，使环境变量设置立即生效即可：source &#x2F;etc&#x2F;profile</p>\n<p>6、输入 java -version  出现以下内容说明环境变量配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz /]<span class=\"comment\"># java -version</span></span><br><span class=\"line\">java version <span class=\"string\">&quot;1.8.0_152&quot;</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_152-b16)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 yum 安装 jdk 非常简单，只需一行命令即可</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载之前的版本</span></span><br><span class=\"line\">yum remove -y `yum list installed | grep java | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\">yum remove -y `yum list installed | grep jdk | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"comment\"># 安装全部依赖</span></span><br><span class=\"line\">yum install -y java-1.8.0-openjdk*</span><br><span class=\"line\"><span class=\"comment\"># 开发环境，不安装不能进行 javac 编译</span></span><br><span class=\"line\">yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>yum 安装配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找安装目录，依次执行一下命令</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> java</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lr /usr/bin/java</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lrt /etc/alternatives/java</span><br><span class=\"line\"><span class=\"comment\"># 可以直接使用 find 命令查找</span></span><br><span class=\"line\">find / -name java</span><br></pre></td></tr></table></figure>\n\n<p>出现以下结果则可查看 jdk 默认安装目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun /]<span class=\"comment\"># ls -lrt /etc/alternatives/java</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Mar 27 14:46 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure>\n\n<p>安装路径为：<code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</code></p>\n<p>编辑 profile 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JDK 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n\n<p>刷新配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>检查 jdk 安装配置是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行以下命令都出现版本则说明安装成功</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br><span class=\"line\"><span class=\"comment\"># 如果 javac 不能执行成功，安装JDK，如果没有 java-1.8.0-openjdk-devel 就没有 javac 命令</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h5><p>使用 yum 安装可能出现问题</p>\n<p>如果出现以下情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]<span class=\"comment\"># yum update</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">There are no enabled repos.</span><br><span class=\"line\"> Run <span class=\"string\">&quot;yum repolist all&quot;</span> to see the repos you have.</span><br><span class=\"line\"> To <span class=\"built_in\">enable</span> Red Hat Subscription Management repositories:</span><br><span class=\"line\">     subscription-manager repos --<span class=\"built_in\">enable</span> &lt;repo&gt;</span><br><span class=\"line\"> To <span class=\"built_in\">enable</span> custom repositories:</span><br><span class=\"line\">     yum-config-manager --<span class=\"built_in\">enable</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行前先备份：<code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</code></p>\n<p>阿里 repo 文件：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p>\n<p>执行命令：<code>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p>\n<p>wget 和 curl 都是下载的意思，执行一行命令即可</p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h4 id=\"JDK安装和配置\"><a href=\"#JDK安装和配置\" class=\"headerlink\" title=\"JDK安装和配置\"></a>JDK安装和配置</h4><p>1、下载地址：<a href=\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>\n<p>2、上传到服务器上</p>\n<p>3、在上传后的 jdk 目录执行 <a href=\"https://www.aliyundrive.com/s/5Ksswouz3ka\">下载地址</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf jdk-8u291-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>4、使用 vim 编辑器，配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 在文件最后添加如下内容，</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/java/jdk1.8.0_121</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib/dt.jar:<span class=\"variable\">$JAVA_HOME</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n<p>5、退出编辑器，使环境变量设置立即生效即可：source &#x2F;etc&#x2F;profile</p>\n<p>6、输入 java -version  出现以下内容说明环境变量配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz /]<span class=\"comment\"># java -version</span></span><br><span class=\"line\">java version <span class=\"string\">&quot;1.8.0_152&quot;</span></span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_152-b16)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 yum 安装 jdk 非常简单，只需一行命令即可</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载之前的版本</span></span><br><span class=\"line\">yum remove -y `yum list installed | grep java | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\">yum remove -y `yum list installed | grep jdk | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class=\"line\"><span class=\"comment\"># 安装全部依赖</span></span><br><span class=\"line\">yum install -y java-1.8.0-openjdk*</span><br><span class=\"line\"><span class=\"comment\"># 开发环境，不安装不能进行 javac 编译</span></span><br><span class=\"line\">yum install -y java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>yum 安装配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找安装目录，依次执行一下命令</span></span><br><span class=\"line\"><span class=\"built_in\">which</span> java</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lr /usr/bin/java</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lrt /etc/alternatives/java</span><br><span class=\"line\"><span class=\"comment\"># 可以直接使用 find 命令查找</span></span><br><span class=\"line\">find / -name java</span><br></pre></td></tr></table></figure>\n\n<p>出现以下结果则可查看 jdk 默认安装目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun /]<span class=\"comment\"># ls -lrt /etc/alternatives/java</span></span><br><span class=\"line\">lrwxrwxrwx 1 root root 73 Mar 27 14:46 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure>\n\n<p>安装路径为：<code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</code></p>\n<p>编辑 profile 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># JDK 环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.362.b08-1.el7_9.x86_64</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/dt.jar:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib/tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;PATH&#125;</span>:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin</span><br></pre></td></tr></table></figure>\n\n<p>刷新配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>检查 jdk 安装配置是否成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行以下命令都出现版本则说明安装成功</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\">javac -version</span><br><span class=\"line\"><span class=\"comment\"># 如果 javac 不能执行成功，安装JDK，如果没有 java-1.8.0-openjdk-devel 就没有 javac 命令</span></span><br><span class=\"line\">yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h5><p>使用 yum 安装可能出现问题</p>\n<p>如果出现以下情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost /]<span class=\"comment\"># yum update</span></span><br><span class=\"line\">已加载插件：fastestmirror</span><br><span class=\"line\">Loading mirror speeds from cached hostfile</span><br><span class=\"line\">There are no enabled repos.</span><br><span class=\"line\"> Run <span class=\"string\">&quot;yum repolist all&quot;</span> to see the repos you have.</span><br><span class=\"line\"> To <span class=\"built_in\">enable</span> Red Hat Subscription Management repositories:</span><br><span class=\"line\">     subscription-manager repos --<span class=\"built_in\">enable</span> &lt;repo&gt;</span><br><span class=\"line\"> To <span class=\"built_in\">enable</span> custom repositories:</span><br><span class=\"line\">     yum-config-manager --<span class=\"built_in\">enable</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>执行前先备份：<code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</code></p>\n<p>阿里 repo 文件：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p>\n<p>执行命令：<code>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></p>\n<p>wget 和 curl 都是下载的意思，执行一行命令即可</p>\n"},{"abbrlink":"76bca4ef","title":"Linux服务器Docker安装部署","date":"2023-04-29T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"#### 1、虚拟化容器技术——Docker的安装及常用命令\n\n官网地址：[链接](https://docs.docker.com/engine/install/centos/)\n\n```bash\n# 更新 yum 的索引\n# yum 包更新到最新\nyum update 或者 yum -y update\n# 安装前先删除 docker 相关的包\n# 使用 yum remove docker* 和一下命令是一样的\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n# 更新之后最简单的安装方式 (或者使用以方式)\nyum install docker\n# 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 设置 yum 源为阿里云\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 安装 docker，不指定版本版本好默认为最新版本\nyum install -y docker-ce docker-ce-cli containerd.io\n#　安装后查看 docker 版本\ndocker -v\n# 安装加速镜像\nsudo mkdir -p /etc/docker\n# 通过修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速器\n#　镜像地址：https://k7da99jp.mirror.aliiyuncs.com\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://k7da99jp.mirror.aliiyuncs.com\"]\n}\nEOF\n# 重启 Docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n补充说明：\n\n#### 2、docker 相关命令\n\n```bash\n# 查看 docker 版本\ndocker version\n# 启动 docker\nsystemctl start docker\n# 停止 docker\nsystemctl stop docker\n# 重启 docker\nsystemctl restart docker\n# 查看 docker 状态\nsystemctl status docker\n# 设置开机启动\nsystemctl enable docker\nsystemctl unenable docker\n# 查看 docker 相关信息\ndocker info\n# 查看 docker 一些帮助\ndocker --help\n\n# 运行 docker 镜像\ndocker run -d image-name\n# 启动一个容器\ndocker start container_id or container_name \n# 停止运行容器\ndocker stop container_id or or container_name \n# 查看所有镜像\ndocker image ls \ndocker container ls -a\n# 查看所有正在运行的容器\ndocker ps -a\n# 查看最近运行的容器\ndocker ps -l\n\n# 查看镜像、容器、数据卷所占用的空间\ndocker system df\n\n# docker stats 查看镜像内存、cpu的使用情况\ndocker stats\n\n# 查看日志 \ndocker logs -f myredis\ndocker logs -f 容器id\n```\n\n##### 2-1、虚悬镜像\n\n在镜像列表中，可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\ndocker image ls -f dangling=true\n\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago     \n```\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\ndocker image prune\n```\n\n##### 2-2、用 docker image ls 命令来配合\n\n像其它可以承接多个实体的命令一样，可以使用 `docker image ls -q` 来配合使用 `docker image rm`，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。\n\n比如，我们需要删除所有仓库名为 `redis` 的镜像：\n\n```bash\ndocker image rm $(docker image ls -q redis)\n```\n\n或者删除所有在 `mongo:3.2` 之前的镜像：\n\n`docker image rm $(docker image ls -q -f before=mongo:3.2)`\n\n#### 3、docker 操作容器\n\n**启动容器**\n\n所需要的命令主要为 `docker run`\n\n```bash\n# 拉去镜像\ndocker pull nginx\n# 查看启动命令\ndocker run --help\n# 启动镜像\ndocker run --name mynginx -p 80:80 -d nginx\n# 修改 nginx 开机启动 注意：update不能修改端口\ndocker update --restart=always\n# 进入容器\ndocker exec -it mynginx bash\n\n# 如果进入容器不能编辑文件，执行一下命令\napt-get update \napt-get install -y vim\n```\n\n**删除容器**\n\n```bash\n# 删除一个镜像\ndocker rmi image-id or image-name\n# 删除所有镜像\ndocker rmi $(docker images -q)\n# 强制删除所有镜像\ndocker rmi -r $(docker images -q)\n# 删除所有镜像\ndocker rmi $(docker images -q -f dangling=true)\n# 删除所有容器 (停止的镜像文件)\ndocker rm $(docker ps -a -q)\n# 强制删除正在运行中的一个容器\ndocker rm -f 镜像名|id\n# 查看所有数据卷\ndocker volume ls\n# 删除所有数据卷\ndocker volume rm [volume_name]\n# 删除所有未关联的数据卷\ndocker volume rm $(docker volume ls -qf dangling=true)\n# 删除容器\ndocker container rm 容器id|镜像名字   或者 docker rm 容器id|镜像名字\n# 清除所有处于终止状态的容器，用 docker container ls -a 查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。\n# 注意：数据存储的地方\ndocker container prune\n```\n\n#### 4、Docker 提交、修改内容、传输\n\n**1、修改容器内部内容**\n\n```bash\n# 启动 nginx\ndocker run --name=mynginx -p 80:80 -d nginx\n# 进入容器\ndocker exec -it mynginx /bin/bash\n# 进入index.html 文件夹\ncd /usr/share/nginx/html\n# 修改首页内容后，再次访问，这时首页内容已经改变\necho \"<h1>Welcom come ningx</h1>\" > index.html\n```\n\n**2、提交容器内容**\n\n```bash\n# 提交到docker容器\ndocker commit -a \"ss\"  -m \"首页内容变化\" mynginx mynginx:v1.0\n# docker iamges 查看 mynginx:v1.0 镜像 \n# 将镜像保存成压缩包 默认复制到当前所在文件夹\ndocker save -o  mynginx.tar mynginx:v1.0\n```\n\n**3、镜像传输**\n\n```bash\n# 将打包好的镜像传输到另一台机器\nscp mynginx.tar root@101.133.170.222:/data/nginx\n# 执行以上命令输入密码即可传输，注意：传输比较慢\n# 加载镜像\ndocker load -i mynginx.tar\n# docker images 查看已加载的镜像\n# 启动 访问ip查看即可\ndocker run --name mynginx -p 80:80 -d mynginx:v1.0\n```\n\n**4、镜像挂在**\n\n```bash\n# 把容器内的文件复制到外边\ndocker cp eaeda5ac249d:/etc/nginx/nginx.conf /data/nginx/conf/\n# 把外边目录下的内容复制到容器内\ndocker cp /data/nginx/conf/nginx.conf eaeda5ac249d:/etc/nginx/ \n\n# 容器启动文件挂在 :ro 表示容器内部只是可读(一般时把容器外的文件挂在到容器内，方便修改)\ndocker run  -p 80:80 \\\n-v /data/nginx/html:/usr/share/nginx/html:ro \\\n-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n--name mynginx \\\n-d nginx\n```\n\n**5、redis 安装测试**\n\ndocker官方文档安装方式：`https://hub.docker.com/_/redis`\n\n```bash\n# redis 使用命令行设置密码和持久化方式\ndocker run --name myredis -v /date/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest --requirepass \"123456\" --appendonly yes \n\n# redis 使用自定义配置方式启动，如果要修改配置文件直接修改\ndocker run --name myredis \\\n-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf \n```\n\n**6、定制镜像 Dockerfile**\n\n把打好的 jar 包上传到服务器上\n\n编辑 DockerFile 复制一下内容\n\n```bash\n# 该镜像需要依赖的基础镜像 或者 FROM java:8\nFROM openjdk:8\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD java-demo-0.0.1-SNAPSHOT.jar /app.jar\n# 声明服务运行在8088端口\nEXPOSE 8080\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\",\"/app.jar\"]\n# 指定维护者的名字\nMAINTAINER ss\n```\n\n构建镜像：`docker build -t my-demo:v1.0 -f DockerFile . `\n\n启动构建完的镜像：`docker run --name mydemo -p 8001:8080 -d my-demo:v1.0`\n\n访问：`http://ip:8001/hello`\n\n**7、卸载 docker 和相关依赖**\n\n```bash\n# 1、卸载相关的依赖\nyum remove docker-ce docker-ce-cli containerd.io\n# 2、删除相关的资源\nrm -rf /var/lib/docker\nrm -rf /var/lib/containerd\n```\n\n#### 5、docker 图形化工具 portainer\n\nGithub 地址：`https://github.com/portainer/portainer`\n\n直接使用 docker 来安装 portainer 是非常方便的，仅需要两步即可完成。\n\n5-1、首先下载 portainer 的 docker 镜像\n\n```bash\ndocker pull portainer/portainer\n```\n\n5-1、再使用如下命令运行 portainer 容器\n\n官网部署文档：`https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/`\n\n```bash\ndocker run -p 9000:9000 -p 8000:8000 --name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /mydata/portainer/data:/data \\\n-d portainer/portainer:latest\n```\n\n第一次登录的时候需要创建管理员账号，访问地址：http://ip:9000/\n\n#### 错误问题\n\n出现以下错误 `-bash: /usr/bin/yum: No such file or directory` 更换yum源\n\n到 `http://mirrors.kernel.org/centos/` 或者 `http://mirrors.163.com/centos/` 找对应系统版本号和系统位数下载，找到 `yum、yum-plugin-fastestmirror、yum-metadata-parser、python-urlgrabber` 这四个软件包下载\n\n下载命令 直接用 wget 下载 rpm 包，然后执行下面三条命令\n\n```bash\nrpm -ivh  --nodeps yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm \nrpm -ivh  --nodeps yum-metadata-parser-1.1.4-10.el7.x86_64.rpm \nrpm -ivh  --nodeps yum-3.4.3-158.el7.centos.noarch.rpm\n```\n\n安装 nginx 出现以下问题，说明挂载的文件夹不存在，需要先把文件创建好\n\n```bash\n[root@aliyun data]# docker run --name mynginx -p 80:80 -p 443:443 -v /data/nginx/conf/:/etc/nginx/nginx.conf --privileged=true -v /data/nginx/log:/var/log/nginx -e TZ=\"Asia/Shanghai\" --restart=always -d nginx:latest\n8fe34ac4b3793b486ccf37ce9d86210a803e1de90df4727e440d9740983e8409\n/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:290: starting container process caused \"container init exited prematurely\".\n```\n\n\n\n\n\n\n","source":"_posts/20220429Linux服务器Docker安装部署.md","raw":"---\nabbrlink: 76bca4ef\ntitle: Linux服务器Docker安装部署\ntags: docker\ncategories: server\ndate: 2023-04-29 16:22:35\ncover:\n---\n#### 1、虚拟化容器技术——Docker的安装及常用命令\n\n官网地址：[链接](https://docs.docker.com/engine/install/centos/)\n\n```bash\n# 更新 yum 的索引\n# yum 包更新到最新\nyum update 或者 yum -y update\n# 安装前先删除 docker 相关的包\n# 使用 yum remove docker* 和一下命令是一样的\nyum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n# 更新之后最简单的安装方式 (或者使用以方式)\nyum install docker\n# 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的\nyum install -y yum-utils device-mapper-persistent-data lvm2\n# 设置 yum 源为阿里云\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n# 安装 docker，不指定版本版本好默认为最新版本\nyum install -y docker-ce docker-ce-cli containerd.io\n#　安装后查看 docker 版本\ndocker -v\n# 安装加速镜像\nsudo mkdir -p /etc/docker\n# 通过修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速器\n#　镜像地址：https://k7da99jp.mirror.aliiyuncs.com\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://k7da99jp.mirror.aliiyuncs.com\"]\n}\nEOF\n# 重启 Docker\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n补充说明：\n\n#### 2、docker 相关命令\n\n```bash\n# 查看 docker 版本\ndocker version\n# 启动 docker\nsystemctl start docker\n# 停止 docker\nsystemctl stop docker\n# 重启 docker\nsystemctl restart docker\n# 查看 docker 状态\nsystemctl status docker\n# 设置开机启动\nsystemctl enable docker\nsystemctl unenable docker\n# 查看 docker 相关信息\ndocker info\n# 查看 docker 一些帮助\ndocker --help\n\n# 运行 docker 镜像\ndocker run -d image-name\n# 启动一个容器\ndocker start container_id or container_name \n# 停止运行容器\ndocker stop container_id or or container_name \n# 查看所有镜像\ndocker image ls \ndocker container ls -a\n# 查看所有正在运行的容器\ndocker ps -a\n# 查看最近运行的容器\ndocker ps -l\n\n# 查看镜像、容器、数据卷所占用的空间\ndocker system df\n\n# docker stats 查看镜像内存、cpu的使用情况\ndocker stats\n\n# 查看日志 \ndocker logs -f myredis\ndocker logs -f 容器id\n```\n\n##### 2-1、虚悬镜像\n\n在镜像列表中，可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 `<none>`\n\n```bash\n<none>               <none>              00285df0df87        5 days ago          342 MB\n```\n\n这个镜像原本是有镜像名和标签的，原来为 `mongo:3.2`，随着官方镜像维护，发布了新版本后，重新 `docker pull mongo:3.2` 时，`mongo:3.2` 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 `<none>`。除了 `docker pull` 可能导致这种情况，`docker build` 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 `<none>` 的镜像。这类无标签镜像也被称为 **虚悬镜像(dangling image)** ，可以用下面的命令专门显示这类镜像：\n\n```bash\ndocker image ls -f dangling=true\n\n# 输出如下\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\n<none>              <none>              00285df0df87        5 days ago     \n```\n\n一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。\n\n```bash\ndocker image prune\n```\n\n##### 2-2、用 docker image ls 命令来配合\n\n像其它可以承接多个实体的命令一样，可以使用 `docker image ls -q` 来配合使用 `docker image rm`，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。\n\n比如，我们需要删除所有仓库名为 `redis` 的镜像：\n\n```bash\ndocker image rm $(docker image ls -q redis)\n```\n\n或者删除所有在 `mongo:3.2` 之前的镜像：\n\n`docker image rm $(docker image ls -q -f before=mongo:3.2)`\n\n#### 3、docker 操作容器\n\n**启动容器**\n\n所需要的命令主要为 `docker run`\n\n```bash\n# 拉去镜像\ndocker pull nginx\n# 查看启动命令\ndocker run --help\n# 启动镜像\ndocker run --name mynginx -p 80:80 -d nginx\n# 修改 nginx 开机启动 注意：update不能修改端口\ndocker update --restart=always\n# 进入容器\ndocker exec -it mynginx bash\n\n# 如果进入容器不能编辑文件，执行一下命令\napt-get update \napt-get install -y vim\n```\n\n**删除容器**\n\n```bash\n# 删除一个镜像\ndocker rmi image-id or image-name\n# 删除所有镜像\ndocker rmi $(docker images -q)\n# 强制删除所有镜像\ndocker rmi -r $(docker images -q)\n# 删除所有镜像\ndocker rmi $(docker images -q -f dangling=true)\n# 删除所有容器 (停止的镜像文件)\ndocker rm $(docker ps -a -q)\n# 强制删除正在运行中的一个容器\ndocker rm -f 镜像名|id\n# 查看所有数据卷\ndocker volume ls\n# 删除所有数据卷\ndocker volume rm [volume_name]\n# 删除所有未关联的数据卷\ndocker volume rm $(docker volume ls -qf dangling=true)\n# 删除容器\ndocker container rm 容器id|镜像名字   或者 docker rm 容器id|镜像名字\n# 清除所有处于终止状态的容器，用 docker container ls -a 查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。\n# 注意：数据存储的地方\ndocker container prune\n```\n\n#### 4、Docker 提交、修改内容、传输\n\n**1、修改容器内部内容**\n\n```bash\n# 启动 nginx\ndocker run --name=mynginx -p 80:80 -d nginx\n# 进入容器\ndocker exec -it mynginx /bin/bash\n# 进入index.html 文件夹\ncd /usr/share/nginx/html\n# 修改首页内容后，再次访问，这时首页内容已经改变\necho \"<h1>Welcom come ningx</h1>\" > index.html\n```\n\n**2、提交容器内容**\n\n```bash\n# 提交到docker容器\ndocker commit -a \"ss\"  -m \"首页内容变化\" mynginx mynginx:v1.0\n# docker iamges 查看 mynginx:v1.0 镜像 \n# 将镜像保存成压缩包 默认复制到当前所在文件夹\ndocker save -o  mynginx.tar mynginx:v1.0\n```\n\n**3、镜像传输**\n\n```bash\n# 将打包好的镜像传输到另一台机器\nscp mynginx.tar root@101.133.170.222:/data/nginx\n# 执行以上命令输入密码即可传输，注意：传输比较慢\n# 加载镜像\ndocker load -i mynginx.tar\n# docker images 查看已加载的镜像\n# 启动 访问ip查看即可\ndocker run --name mynginx -p 80:80 -d mynginx:v1.0\n```\n\n**4、镜像挂在**\n\n```bash\n# 把容器内的文件复制到外边\ndocker cp eaeda5ac249d:/etc/nginx/nginx.conf /data/nginx/conf/\n# 把外边目录下的内容复制到容器内\ndocker cp /data/nginx/conf/nginx.conf eaeda5ac249d:/etc/nginx/ \n\n# 容器启动文件挂在 :ro 表示容器内部只是可读(一般时把容器外的文件挂在到容器内，方便修改)\ndocker run  -p 80:80 \\\n-v /data/nginx/html:/usr/share/nginx/html:ro \\\n-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n--name mynginx \\\n-d nginx\n```\n\n**5、redis 安装测试**\n\ndocker官方文档安装方式：`https://hub.docker.com/_/redis`\n\n```bash\n# redis 使用命令行设置密码和持久化方式\ndocker run --name myredis -v /date/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest --requirepass \"123456\" --appendonly yes \n\n# redis 使用自定义配置方式启动，如果要修改配置文件直接修改\ndocker run --name myredis \\\n-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf \n```\n\n**6、定制镜像 Dockerfile**\n\n把打好的 jar 包上传到服务器上\n\n编辑 DockerFile 复制一下内容\n\n```bash\n# 该镜像需要依赖的基础镜像 或者 FROM java:8\nFROM openjdk:8\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD java-demo-0.0.1-SNAPSHOT.jar /app.jar\n# 声明服务运行在8088端口\nEXPOSE 8080\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\",\"/app.jar\"]\n# 指定维护者的名字\nMAINTAINER ss\n```\n\n构建镜像：`docker build -t my-demo:v1.0 -f DockerFile . `\n\n启动构建完的镜像：`docker run --name mydemo -p 8001:8080 -d my-demo:v1.0`\n\n访问：`http://ip:8001/hello`\n\n**7、卸载 docker 和相关依赖**\n\n```bash\n# 1、卸载相关的依赖\nyum remove docker-ce docker-ce-cli containerd.io\n# 2、删除相关的资源\nrm -rf /var/lib/docker\nrm -rf /var/lib/containerd\n```\n\n#### 5、docker 图形化工具 portainer\n\nGithub 地址：`https://github.com/portainer/portainer`\n\n直接使用 docker 来安装 portainer 是非常方便的，仅需要两步即可完成。\n\n5-1、首先下载 portainer 的 docker 镜像\n\n```bash\ndocker pull portainer/portainer\n```\n\n5-1、再使用如下命令运行 portainer 容器\n\n官网部署文档：`https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/`\n\n```bash\ndocker run -p 9000:9000 -p 8000:8000 --name portainer \\\n--restart=always \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /mydata/portainer/data:/data \\\n-d portainer/portainer:latest\n```\n\n第一次登录的时候需要创建管理员账号，访问地址：http://ip:9000/\n\n#### 错误问题\n\n出现以下错误 `-bash: /usr/bin/yum: No such file or directory` 更换yum源\n\n到 `http://mirrors.kernel.org/centos/` 或者 `http://mirrors.163.com/centos/` 找对应系统版本号和系统位数下载，找到 `yum、yum-plugin-fastestmirror、yum-metadata-parser、python-urlgrabber` 这四个软件包下载\n\n下载命令 直接用 wget 下载 rpm 包，然后执行下面三条命令\n\n```bash\nrpm -ivh  --nodeps yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm \nrpm -ivh  --nodeps yum-metadata-parser-1.1.4-10.el7.x86_64.rpm \nrpm -ivh  --nodeps yum-3.4.3-158.el7.centos.noarch.rpm\n```\n\n安装 nginx 出现以下问题，说明挂载的文件夹不存在，需要先把文件创建好\n\n```bash\n[root@aliyun data]# docker run --name mynginx -p 80:80 -p 443:443 -v /data/nginx/conf/:/etc/nginx/nginx.conf --privileged=true -v /data/nginx/log:/var/log/nginx -e TZ=\"Asia/Shanghai\" --restart=always -d nginx:latest\n8fe34ac4b3793b486ccf37ce9d86210a803e1de90df4727e440d9740983e8409\n/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:290: starting container process caused \"container init exited prematurely\".\n```\n\n\n\n\n\n\n","slug":"20220429Linux服务器Docker安装部署","published":1,"updated":"2023-05-12T11:38:48.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx30007w0uhamnw18yj","content":"<h4 id=\"1、虚拟化容器技术——Docker的安装及常用命令\"><a href=\"#1、虚拟化容器技术——Docker的安装及常用命令\" class=\"headerlink\" title=\"1、虚拟化容器技术——Docker的安装及常用命令\"></a>1、虚拟化容器技术——Docker的安装及常用命令</h4><p>官网地址：<a href=\"https://docs.docker.com/engine/install/centos/\">链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 yum 的索引</span></span><br><span class=\"line\"><span class=\"comment\"># yum 包更新到最新</span></span><br><span class=\"line\">yum update 或者 yum -y update</span><br><span class=\"line\"><span class=\"comment\"># 安装前先删除 docker 相关的包</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 yum remove docker* 和一下命令是一样的</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"><span class=\"comment\"># 更新之后最简单的安装方式 (或者使用以方式)</span></span><br><span class=\"line\">yum install docker</span><br><span class=\"line\"><span class=\"comment\"># 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 设置 yum 源为阿里云</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 安装 docker，不指定版本版本好默认为最新版本</span></span><br><span class=\"line\">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"comment\">#　安装后查看 docker 版本</span></span><br><span class=\"line\">docker -v</span><br><span class=\"line\"><span class=\"comment\"># 安装加速镜像</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\"><span class=\"comment\"># 通过修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速器</span></span><br><span class=\"line\"><span class=\"comment\">#　镜像地址：https://k7da99jp.mirror.aliiyuncs.com</span></span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://k7da99jp.mirror.aliiyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># 重启 Docker</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>补充说明：</p>\n<h4 id=\"2、docker-相关命令\"><a href=\"#2、docker-相关命令\" class=\"headerlink\" title=\"2、docker 相关命令\"></a>2、docker 相关命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 docker 版本</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"comment\"># 启动 docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 停止 docker</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"><span class=\"comment\"># 重启 docker</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 状态</span></span><br><span class=\"line\">systemctl status docker</span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">systemctl unenable docker</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 相关信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 一些帮助</span></span><br><span class=\"line\">docker --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行 docker 镜像</span></span><br><span class=\"line\">docker run -d image-name</span><br><span class=\"line\"><span class=\"comment\"># 启动一个容器</span></span><br><span class=\"line\">docker start container_id or container_name </span><br><span class=\"line\"><span class=\"comment\"># 停止运行容器</span></span><br><span class=\"line\">docker stop container_id or or container_name </span><br><span class=\"line\"><span class=\"comment\"># 查看所有镜像</span></span><br><span class=\"line\">docker image <span class=\"built_in\">ls</span> </span><br><span class=\"line\">docker container <span class=\"built_in\">ls</span> -a</span><br><span class=\"line\"><span class=\"comment\"># 查看所有正在运行的容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\"># 查看最近运行的容器</span></span><br><span class=\"line\">docker ps -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看镜像、容器、数据卷所占用的空间</span></span><br><span class=\"line\">docker system <span class=\"built_in\">df</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker stats 查看镜像内存、cpu的使用情况</span></span><br><span class=\"line\">docker stats</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看日志 </span></span><br><span class=\"line\">docker logs -f myredis</span><br><span class=\"line\">docker logs -f 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1、虚悬镜像\"><a href=\"#2-1、虚悬镜像\" class=\"headerlink\" title=\"2-1、虚悬镜像\"></a>2-1、虚悬镜像</h5><p>在镜像列表中，可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">ls</span> -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago     </span><br></pre></td></tr></table></figure>\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2、用-docker-image-ls-命令来配合\"><a href=\"#2-2、用-docker-image-ls-命令来配合\" class=\"headerlink\" title=\"2-2、用 docker image ls 命令来配合\"></a>2-2、用 docker image ls 命令来配合</h5><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>\n<p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">rm</span> $(docker image <span class=\"built_in\">ls</span> -q redis)</span><br></pre></td></tr></table></figure>\n\n<p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p>\n<p><code>docker image rm $(docker image ls -q -f before=mongo:3.2)</code></p>\n<h4 id=\"3、docker-操作容器\"><a href=\"#3、docker-操作容器\" class=\"headerlink\" title=\"3、docker 操作容器\"></a>3、docker 操作容器</h4><p><strong>启动容器</strong></p>\n<p>所需要的命令主要为 <code>docker run</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉去镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看启动命令</span></span><br><span class=\"line\">docker run --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 启动镜像</span></span><br><span class=\"line\">docker run --name mynginx -p 80:80 -d nginx</span><br><span class=\"line\"><span class=\"comment\"># 修改 nginx 开机启动 注意：update不能修改端口</span></span><br><span class=\"line\">docker update --restart=always</span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mynginx bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果进入容器不能编辑文件，执行一下命令</span></span><br><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install -y vim</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除一个镜像</span></span><br><span class=\"line\">docker rmi image-id or image-name</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)</span><br><span class=\"line\"><span class=\"comment\"># 强制删除所有镜像</span></span><br><span class=\"line\">docker rmi -r $(docker images -q)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q -f dangling=<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器 (停止的镜像文件)</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"comment\"># 强制删除正在运行中的一个容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> -f 镜像名|<span class=\"built_in\">id</span></span><br><span class=\"line\"><span class=\"comment\"># 查看所有数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"comment\"># 删除所有数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> [volume_name]</span><br><span class=\"line\"><span class=\"comment\"># 删除所有未关联的数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> $(docker volume <span class=\"built_in\">ls</span> -qf dangling=<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">docker container <span class=\"built_in\">rm</span> 容器<span class=\"built_in\">id</span>|镜像名字   或者 docker <span class=\"built_in\">rm</span> 容器<span class=\"built_in\">id</span>|镜像名字</span><br><span class=\"line\"><span class=\"comment\"># 清除所有处于终止状态的容器，用 docker container ls -a 查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：数据存储的地方</span></span><br><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、Docker-提交、修改内容、传输\"><a href=\"#4、Docker-提交、修改内容、传输\" class=\"headerlink\" title=\"4、Docker 提交、修改内容、传输\"></a>4、Docker 提交、修改内容、传输</h4><p><strong>1、修改容器内部内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 nginx</span></span><br><span class=\"line\">docker run --name=mynginx -p 80:80 -d nginx</span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># 进入index.html 文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</span><br><span class=\"line\"><span class=\"comment\"># 修改首页内容后，再次访问，这时首页内容已经改变</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;h1&gt;Welcom come ningx&lt;/h1&gt;&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、提交容器内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交到docker容器</span></span><br><span class=\"line\">docker commit -a <span class=\"string\">&quot;ss&quot;</span>  -m <span class=\"string\">&quot;首页内容变化&quot;</span> mynginx mynginx:v1.0</span><br><span class=\"line\"><span class=\"comment\"># docker iamges 查看 mynginx:v1.0 镜像 </span></span><br><span class=\"line\"><span class=\"comment\"># 将镜像保存成压缩包 默认复制到当前所在文件夹</span></span><br><span class=\"line\">docker save -o  mynginx.tar mynginx:v1.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、镜像传输</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将打包好的镜像传输到另一台机器</span></span><br><span class=\"line\">scp mynginx.tar root@101.133.170.222:/data/nginx</span><br><span class=\"line\"><span class=\"comment\"># 执行以上命令输入密码即可传输，注意：传输比较慢</span></span><br><span class=\"line\"><span class=\"comment\"># 加载镜像</span></span><br><span class=\"line\">docker load -i mynginx.tar</span><br><span class=\"line\"><span class=\"comment\"># docker images 查看已加载的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 访问ip查看即可</span></span><br><span class=\"line\">docker run --name mynginx -p 80:80 -d mynginx:v1.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、镜像挂在</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把容器内的文件复制到外边</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> eaeda5ac249d:/etc/nginx/nginx.conf /data/nginx/conf/</span><br><span class=\"line\"><span class=\"comment\"># 把外边目录下的内容复制到容器内</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> /data/nginx/conf/nginx.conf eaeda5ac249d:/etc/nginx/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器启动文件挂在 :ro 表示容器内部只是可读(一般时把容器外的文件挂在到容器内，方便修改)</span></span><br><span class=\"line\">docker run  -p 80:80 \\</span><br><span class=\"line\">-v /data/nginx/html:/usr/share/nginx/html:ro \\</span><br><span class=\"line\">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--name mynginx \\</span><br><span class=\"line\">-d nginx</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、redis 安装测试</strong></p>\n<p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis 使用命令行设置密码和持久化方式</span></span><br><span class=\"line\">docker run --name myredis -v /date/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest --requirepass <span class=\"string\">&quot;123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class=\"line\">docker run --name myredis \\</span><br><span class=\"line\">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>\n\n<p><strong>6、定制镜像 Dockerfile</strong></p>\n<p>把打好的 jar 包上传到服务器上</p>\n<p>编辑 DockerFile 复制一下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像 或者 FROM java:8</span></span><br><span class=\"line\">FROM openjdk:8</span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\">ADD java-demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8088端口</span></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\">MAINTAINER ss</span><br></pre></td></tr></table></figure>\n\n<p>构建镜像：<code>docker build -t my-demo:v1.0 -f DockerFile . </code></p>\n<p>启动构建完的镜像：<code>docker run --name mydemo -p 8001:8080 -d my-demo:v1.0</code></p>\n<p>访问：<code>http://ip:8001/hello</code></p>\n<p><strong>7、卸载 docker 和相关依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、卸载相关的依赖</span></span><br><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"comment\"># 2、删除相关的资源</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、docker-图形化工具-portainer\"><a href=\"#5、docker-图形化工具-portainer\" class=\"headerlink\" title=\"5、docker 图形化工具 portainer\"></a>5、docker 图形化工具 portainer</h4><p>Github 地址：<code>https://github.com/portainer/portainer</code></p>\n<p>直接使用 docker 来安装 portainer 是非常方便的，仅需要两步即可完成。</p>\n<p>5-1、首先下载 portainer 的 docker 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<p>5-1、再使用如下命令运行 portainer 容器</p>\n<p>官网部署文档：<code>https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 -p 8000:8000 --name portainer \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">-v /mydata/portainer/data:/data \\</span><br><span class=\"line\">-d portainer/portainer:latest</span><br></pre></td></tr></table></figure>\n\n<p>第一次登录的时候需要创建管理员账号，访问地址：<a href=\"http://ip:9000/\">http://ip:9000/</a></p>\n<h4 id=\"错误问题\"><a href=\"#错误问题\" class=\"headerlink\" title=\"错误问题\"></a>错误问题</h4><p>出现以下错误 <code>-bash: /usr/bin/yum: No such file or directory</code> 更换yum源</p>\n<p>到 <code>http://mirrors.kernel.org/centos/</code> 或者 <code>http://mirrors.163.com/centos/</code> 找对应系统版本号和系统位数下载，找到 <code>yum、yum-plugin-fastestmirror、yum-metadata-parser、python-urlgrabber</code> 这四个软件包下载</p>\n<p>下载命令 直接用 wget 下载 rpm 包，然后执行下面三条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh  --nodeps yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm </span><br><span class=\"line\">rpm -ivh  --nodeps yum-metadata-parser-1.1.4-10.el7.x86_64.rpm </span><br><span class=\"line\">rpm -ivh  --nodeps yum-3.4.3-158.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装 nginx 出现以下问题，说明挂载的文件夹不存在，需要先把文件创建好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun data]<span class=\"comment\"># docker run --name mynginx -p 80:80 -p 443:443 -v /data/nginx/conf/:/etc/nginx/nginx.conf --privileged=true -v /data/nginx/log:/var/log/nginx -e TZ=&quot;Asia/Shanghai&quot; --restart=always -d nginx:latest</span></span><br><span class=\"line\">8fe34ac4b3793b486ccf37ce9d86210a803e1de90df4727e440d9740983e8409</span><br><span class=\"line\">/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:290: starting container process caused <span class=\"string\">&quot;container init exited prematurely&quot;</span>.</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h4 id=\"1、虚拟化容器技术——Docker的安装及常用命令\"><a href=\"#1、虚拟化容器技术——Docker的安装及常用命令\" class=\"headerlink\" title=\"1、虚拟化容器技术——Docker的安装及常用命令\"></a>1、虚拟化容器技术——Docker的安装及常用命令</h4><p>官网地址：<a href=\"https://docs.docker.com/engine/install/centos/\">链接</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新 yum 的索引</span></span><br><span class=\"line\"><span class=\"comment\"># yum 包更新到最新</span></span><br><span class=\"line\">yum update 或者 yum -y update</span><br><span class=\"line\"><span class=\"comment\"># 安装前先删除 docker 相关的包</span></span><br><span class=\"line\"><span class=\"comment\"># 使用 yum remove docker* 和一下命令是一样的</span></span><br><span class=\"line\">yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br><span class=\"line\"><span class=\"comment\"># 更新之后最简单的安装方式 (或者使用以方式)</span></span><br><span class=\"line\">yum install docker</span><br><span class=\"line\"><span class=\"comment\"># 安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</span></span><br><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"><span class=\"comment\"># 设置 yum 源为阿里云</span></span><br><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"><span class=\"comment\"># 安装 docker，不指定版本版本好默认为最新版本</span></span><br><span class=\"line\">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"comment\">#　安装后查看 docker 版本</span></span><br><span class=\"line\">docker -v</span><br><span class=\"line\"><span class=\"comment\"># 安装加速镜像</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> -p /etc/docker</span><br><span class=\"line\"><span class=\"comment\"># 通过修改 daemon 配置文件 /etc/docker/daemon.json 来使用加速器</span></span><br><span class=\"line\"><span class=\"comment\">#　镜像地址：https://k7da99jp.mirror.aliiyuncs.com</span></span><br><span class=\"line\">sudo <span class=\"built_in\">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;registry-mirrors&quot;</span>: [<span class=\"string\">&quot;https://k7da99jp.mirror.aliiyuncs.com&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"comment\"># 重启 Docker</span></span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>补充说明：</p>\n<h4 id=\"2、docker-相关命令\"><a href=\"#2、docker-相关命令\" class=\"headerlink\" title=\"2、docker 相关命令\"></a>2、docker 相关命令</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看 docker 版本</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"comment\"># 启动 docker</span></span><br><span class=\"line\">systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 停止 docker</span></span><br><span class=\"line\">systemctl stop docker</span><br><span class=\"line\"><span class=\"comment\"># 重启 docker</span></span><br><span class=\"line\">systemctl restart docker</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 状态</span></span><br><span class=\"line\">systemctl status docker</span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">systemctl unenable docker</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 相关信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"comment\"># 查看 docker 一些帮助</span></span><br><span class=\"line\">docker --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行 docker 镜像</span></span><br><span class=\"line\">docker run -d image-name</span><br><span class=\"line\"><span class=\"comment\"># 启动一个容器</span></span><br><span class=\"line\">docker start container_id or container_name </span><br><span class=\"line\"><span class=\"comment\"># 停止运行容器</span></span><br><span class=\"line\">docker stop container_id or or container_name </span><br><span class=\"line\"><span class=\"comment\"># 查看所有镜像</span></span><br><span class=\"line\">docker image <span class=\"built_in\">ls</span> </span><br><span class=\"line\">docker container <span class=\"built_in\">ls</span> -a</span><br><span class=\"line\"><span class=\"comment\"># 查看所有正在运行的容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"><span class=\"comment\"># 查看最近运行的容器</span></span><br><span class=\"line\">docker ps -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看镜像、容器、数据卷所占用的空间</span></span><br><span class=\"line\">docker system <span class=\"built_in\">df</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker stats 查看镜像内存、cpu的使用情况</span></span><br><span class=\"line\">docker stats</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看日志 </span></span><br><span class=\"line\">docker logs -f myredis</span><br><span class=\"line\">docker logs -f 容器<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-1、虚悬镜像\"><a href=\"#2-1、虚悬镜像\" class=\"headerlink\" title=\"2-1、虚悬镜像\"></a>2-1、虚悬镜像</h5><p>在镜像列表中，可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;none&gt;               &lt;none&gt;              00285df0df87        5 days ago          342 MB</span><br></pre></td></tr></table></figure>\n\n<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。除了 <code>docker pull</code> 可能导致这种情况，<code>docker build</code> 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">ls</span> -f dangling=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出如下</span></span><br><span class=\"line\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">&lt;none&gt;              &lt;none&gt;              00285df0df87        5 days ago     </span><br></pre></td></tr></table></figure>\n\n<p>一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的，可以用下面的命令删除。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-2、用-docker-image-ls-命令来配合\"><a href=\"#2-2、用-docker-image-ls-命令来配合\" class=\"headerlink\" title=\"2-2、用 docker image ls 命令来配合\"></a>2-2、用 docker image ls 命令来配合</h5><p>像其它可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。</p>\n<p>比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker image <span class=\"built_in\">rm</span> $(docker image <span class=\"built_in\">ls</span> -q redis)</span><br></pre></td></tr></table></figure>\n\n<p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像：</p>\n<p><code>docker image rm $(docker image ls -q -f before=mongo:3.2)</code></p>\n<h4 id=\"3、docker-操作容器\"><a href=\"#3、docker-操作容器\" class=\"headerlink\" title=\"3、docker 操作容器\"></a>3、docker 操作容器</h4><p><strong>启动容器</strong></p>\n<p>所需要的命令主要为 <code>docker run</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉去镜像</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看启动命令</span></span><br><span class=\"line\">docker run --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 启动镜像</span></span><br><span class=\"line\">docker run --name mynginx -p 80:80 -d nginx</span><br><span class=\"line\"><span class=\"comment\"># 修改 nginx 开机启动 注意：update不能修改端口</span></span><br><span class=\"line\">docker update --restart=always</span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mynginx bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果进入容器不能编辑文件，执行一下命令</span></span><br><span class=\"line\">apt-get update </span><br><span class=\"line\">apt-get install -y vim</span><br></pre></td></tr></table></figure>\n\n<p><strong>删除容器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除一个镜像</span></span><br><span class=\"line\">docker rmi image-id or image-name</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q)</span><br><span class=\"line\"><span class=\"comment\"># 强制删除所有镜像</span></span><br><span class=\"line\">docker rmi -r $(docker images -q)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有镜像</span></span><br><span class=\"line\">docker rmi $(docker images -q -f dangling=<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除所有容器 (停止的镜像文件)</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"comment\"># 强制删除正在运行中的一个容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> -f 镜像名|<span class=\"built_in\">id</span></span><br><span class=\"line\"><span class=\"comment\"># 查看所有数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">ls</span></span><br><span class=\"line\"><span class=\"comment\"># 删除所有数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> [volume_name]</span><br><span class=\"line\"><span class=\"comment\"># 删除所有未关联的数据卷</span></span><br><span class=\"line\">docker volume <span class=\"built_in\">rm</span> $(docker volume <span class=\"built_in\">ls</span> -qf dangling=<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"comment\"># 删除容器</span></span><br><span class=\"line\">docker container <span class=\"built_in\">rm</span> 容器<span class=\"built_in\">id</span>|镜像名字   或者 docker <span class=\"built_in\">rm</span> 容器<span class=\"built_in\">id</span>|镜像名字</span><br><span class=\"line\"><span class=\"comment\"># 清除所有处于终止状态的容器，用 docker container ls -a 查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</span></span><br><span class=\"line\"><span class=\"comment\"># 注意：数据存储的地方</span></span><br><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、Docker-提交、修改内容、传输\"><a href=\"#4、Docker-提交、修改内容、传输\" class=\"headerlink\" title=\"4、Docker 提交、修改内容、传输\"></a>4、Docker 提交、修改内容、传输</h4><p><strong>1、修改容器内部内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 nginx</span></span><br><span class=\"line\">docker run --name=mynginx -p 80:80 -d nginx</span><br><span class=\"line\"><span class=\"comment\"># 进入容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it mynginx /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># 进入index.html 文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</span><br><span class=\"line\"><span class=\"comment\"># 修改首页内容后，再次访问，这时首页内容已经改变</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;h1&gt;Welcom come ningx&lt;/h1&gt;&quot;</span> &gt; index.html</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、提交容器内容</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交到docker容器</span></span><br><span class=\"line\">docker commit -a <span class=\"string\">&quot;ss&quot;</span>  -m <span class=\"string\">&quot;首页内容变化&quot;</span> mynginx mynginx:v1.0</span><br><span class=\"line\"><span class=\"comment\"># docker iamges 查看 mynginx:v1.0 镜像 </span></span><br><span class=\"line\"><span class=\"comment\"># 将镜像保存成压缩包 默认复制到当前所在文件夹</span></span><br><span class=\"line\">docker save -o  mynginx.tar mynginx:v1.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、镜像传输</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将打包好的镜像传输到另一台机器</span></span><br><span class=\"line\">scp mynginx.tar root@101.133.170.222:/data/nginx</span><br><span class=\"line\"><span class=\"comment\"># 执行以上命令输入密码即可传输，注意：传输比较慢</span></span><br><span class=\"line\"><span class=\"comment\"># 加载镜像</span></span><br><span class=\"line\">docker load -i mynginx.tar</span><br><span class=\"line\"><span class=\"comment\"># docker images 查看已加载的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 启动 访问ip查看即可</span></span><br><span class=\"line\">docker run --name mynginx -p 80:80 -d mynginx:v1.0</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、镜像挂在</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 把容器内的文件复制到外边</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> eaeda5ac249d:/etc/nginx/nginx.conf /data/nginx/conf/</span><br><span class=\"line\"><span class=\"comment\"># 把外边目录下的内容复制到容器内</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> /data/nginx/conf/nginx.conf eaeda5ac249d:/etc/nginx/ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器启动文件挂在 :ro 表示容器内部只是可读(一般时把容器外的文件挂在到容器内，方便修改)</span></span><br><span class=\"line\">docker run  -p 80:80 \\</span><br><span class=\"line\">-v /data/nginx/html:/usr/share/nginx/html:ro \\</span><br><span class=\"line\">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">--name mynginx \\</span><br><span class=\"line\">-d nginx</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、redis 安装测试</strong></p>\n<p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis 使用命令行设置密码和持久化方式</span></span><br><span class=\"line\">docker run --name myredis -v /date/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest --requirepass <span class=\"string\">&quot;123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class=\"line\">docker run --name myredis \\</span><br><span class=\"line\">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>\n\n<p><strong>6、定制镜像 Dockerfile</strong></p>\n<p>把打好的 jar 包上传到服务器上</p>\n<p>编辑 DockerFile 复制一下内容</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像 或者 FROM java:8</span></span><br><span class=\"line\">FROM openjdk:8</span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\">ADD java-demo-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8088端口</span></span><br><span class=\"line\">EXPOSE 8080</span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\">ENTRYPOINT [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\">MAINTAINER ss</span><br></pre></td></tr></table></figure>\n\n<p>构建镜像：<code>docker build -t my-demo:v1.0 -f DockerFile . </code></p>\n<p>启动构建完的镜像：<code>docker run --name mydemo -p 8001:8080 -d my-demo:v1.0</code></p>\n<p>访问：<code>http://ip:8001/hello</code></p>\n<p><strong>7、卸载 docker 和相关依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1、卸载相关的依赖</span></span><br><span class=\"line\">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class=\"line\"><span class=\"comment\"># 2、删除相关的资源</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/docker</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、docker-图形化工具-portainer\"><a href=\"#5、docker-图形化工具-portainer\" class=\"headerlink\" title=\"5、docker 图形化工具 portainer\"></a>5、docker 图形化工具 portainer</h4><p>Github 地址：<code>https://github.com/portainer/portainer</code></p>\n<p>直接使用 docker 来安装 portainer 是非常方便的，仅需要两步即可完成。</p>\n<p>5-1、首先下载 portainer 的 docker 镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<p>5-1、再使用如下命令运行 portainer 容器</p>\n<p>官网部署文档：<code>https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 -p 8000:8000 --name portainer \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">-v /mydata/portainer/data:/data \\</span><br><span class=\"line\">-d portainer/portainer:latest</span><br></pre></td></tr></table></figure>\n\n<p>第一次登录的时候需要创建管理员账号，访问地址：<a href=\"http://ip:9000/\">http://ip:9000/</a></p>\n<h4 id=\"错误问题\"><a href=\"#错误问题\" class=\"headerlink\" title=\"错误问题\"></a>错误问题</h4><p>出现以下错误 <code>-bash: /usr/bin/yum: No such file or directory</code> 更换yum源</p>\n<p>到 <code>http://mirrors.kernel.org/centos/</code> 或者 <code>http://mirrors.163.com/centos/</code> 找对应系统版本号和系统位数下载，找到 <code>yum、yum-plugin-fastestmirror、yum-metadata-parser、python-urlgrabber</code> 这四个软件包下载</p>\n<p>下载命令 直接用 wget 下载 rpm 包，然后执行下面三条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh  --nodeps yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm </span><br><span class=\"line\">rpm -ivh  --nodeps yum-metadata-parser-1.1.4-10.el7.x86_64.rpm </span><br><span class=\"line\">rpm -ivh  --nodeps yum-3.4.3-158.el7.centos.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装 nginx 出现以下问题，说明挂载的文件夹不存在，需要先把文件创建好</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun data]<span class=\"comment\"># docker run --name mynginx -p 80:80 -p 443:443 -v /data/nginx/conf/:/etc/nginx/nginx.conf --privileged=true -v /data/nginx/log:/var/log/nginx -e TZ=&quot;Asia/Shanghai&quot; --restart=always -d nginx:latest</span></span><br><span class=\"line\">8fe34ac4b3793b486ccf37ce9d86210a803e1de90df4727e440d9740983e8409</span><br><span class=\"line\">/usr/bin/docker-current: Error response from daemon: oci runtime error: container_linux.go:290: starting container process caused <span class=\"string\">&quot;container init exited prematurely&quot;</span>.</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"abbrlink":"c699e256","title":"Linux服务器git配置及常用命令","date":"2023-04-30T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"## tar 压缩包安装配置\n\n卸载旧版本\n\n- yum 直接卸载\n\n  ```bash\n  yum remove git\n  ```\n\n- 查看 git 安装目录 \n\n  ```bash\n  which -a git\n  # 显示出来 git 安装路径\n  cd /git安装路径\n  # 执行删除命令\n  rm -rf git*\n  ```\n\n下载 git 安装包\n\n官方镜像地址：`https://mirrors.edge.kernel.org/pub/software/scm/git/`\n\n在服务器目录下下载 git 对应版本\n\n```bash\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.40.0.tar.gz\n```\n\n解压\n\n```bash\ntar -zxvf git-2.40.0.tar.gz\n```\n\n安装可能需要的依赖\n\n```bash\nyum install curl-devel expat-devel openssl-devel zlib-devel gcc-c++ \nyum install perl-ExtUtils-MakeMaker automake autoconf libtool make\n```\n\n进入 git-2.40.0 文件夹下，进行编译安装等命令\n\n```bash\n# 安装编译 git 可执行文件，并指定文件位置\n./configure --prefix=/data/git 等同于 make PREFIX=/data/git all \n# 安装到指定目录\nmake PREFIX=/data/git && make PREFIX=/data/git install\n```\n\n配置环境变量\n\n```bash\n# 编辑 profile 文件\nvim /etc/profile\n# git 环境变量，追加以下内容\nexport GIT_HOME=/data/git\nexport PATH=$PATH:${GIT_HOME}/bin\n# 等同于上面两行\nexport PATH=$PATH:/data/git/bin\n# 保存刷新配置\nsource /etc/profile\n```\n\n查看版本 `git --version`，出现以下内容则说明安装配置成功\n\n```bash\n[root@aliyun /]# git --version\ngit version 2.40.0\n[root@aliyun /]#\n```\n\n设置密钥\n\n```bash\nssh-keygen -t rsa -C \"xx@xx.com\"\ncat ~/.ssh/id_rsa.pub\n```\n\n## yum 安装配置\n\nyum 安装最简单，但无法控制安装的版本\n\n```bash\nyum -y install git\n# 检查安装的版本\ngit --version\n```\n## Git常用命令最全总结\n\n### 基本命令\n\n- `git init`：初始化一个 Git 仓库。\n- `git clone <repository>`：克隆一个 Git 仓库到本地。\n- `git add <file>`：将指定文件添加到暂存区。\n- `git add .`：将所有修改过的文件添加到暂存区。\n- `git commit -m \"message\"`：提交所有已经添加到暂存区的文件到本地仓库，并附带一条提交信息。\n- `git status`：查看工作目录和暂存区的状态。\n- `git diff`：查看工作目录和暂存区之间的差异。\n- `git log`：查看提交日志。\n- `git checkout <branch>`：切换到指定分支。\n- `git branch`：查看所有分支。\n- `git merge <branch>`：将指定分支合并到当前分支。\n- `git pull`：从远程仓库拉取最新代码到本地仓库。\n- `git push`：将本地仓库最新代码推送到远程仓库。\n\n### 高级命令\n\n- `git stash`：将工作区的改动保存到一个新的 stash 中。\n- `git stash list`：列出所有 stash。\n- `git stash apply`：将最近的 stash 应用到工作区。\n- `git stash drop`：删除最近的 stash。\n- `git stash pop`：应用最近的 stash 并删除它。\n- `git reset <file>`：将指定文件在暂存区的修改回退到工作目录。\n- `git reset --hard HEAD`：将工作目录和暂存区中的所有修改回退到最新的本地提交。\n- `git revert <commit>`：撤销指定的提交。\n- `git cherry-pick <commit>`：将指定提交合并到当前分支。\n- `git rebase <branch>`：将当前分支变基于指定分支。\n- `git tag`：列出所有 tag。\n- `git tag <tag>`：创建一个新 tag。\n- `git tag -a <tag> -m \"message\" <commit>`：创建一个带有附注信息的新 tag。\n- `git push --tags`：将所有 tag 推送到远程仓库。\n- `git fetch <remote>`：从远程仓库获取最新代码。\n- `git remote`：查看远程仓库列表。\n- `git remote add <name> <url>`：添加一个新的远程仓库。\n- `git remote remove <name>`：删除指定的远程仓库。\n- `git remote set-url <name> <newurl>`：修改指定远程仓库的 URL。\n\n### Git 分支操作\n\n- `git branch`：列出本地分支列表。\n- `git branch -a`：列出本地和远程分支列表。\n- `git branch <branch-name>`：新建分支。\n- `git branch -d <branch-name>`：删除分支。\n- `git checkout <branch-name>`：切换到指定分支。\n- `git checkout -b <new-branch-name>`：创建新分支并切换到该分支。\n- `git merge <branch-name>`：合并指定分支到当前分支。\n- `git merge --no-ff <branch-name>`：不使用快进模式合并指定分支到当前分支。\n- `git log --graph`：以图表的形式显示分支的合并情况。\n\n### Git 标签操作\n\n- `git tag`：列出所有本地标签。\n- `git tag -l \"pattern\"`：列出所有符合指定模式的标签。\n- `git tag <tag-name>`：新建标签。\n- `git tag -a <tag-name> -m \"message\"`：使用附注信息新建标签。\n- `git tag -d <tag-name>`：删除标签。\n- `git push origin <tag-name>`：推送指定标签到远程仓库。\n- `git push origin --tags`：推送所有本地标签到远程仓库。\n- `git checkout <tag-name>`：切换到指定标签。\n\n### Git 远程仓库操作\n\n- `git clone <repository>`：克隆远程仓库。\n- `git pull`：拉取远程仓库最新代码。\n- `git fetch <remote>`：从远程仓库获取最新代码。\n- `git push`：将本地仓库最新代码推送到远程仓库。\n- `git pull <remote> <branch>`：从远程仓库拉取指定分支的最新代码。\n- `git push <remote> <branch>`：将本地仓库的最新代码推送到指定远程仓库的指定分支。\n- `git remote add <name> <url>`：添加一个新的远程仓库。\n- `git remote remove <name>`：删除指定的远程仓库。\n- `git remote set-url <name> <new-url>`：修改指定远程仓库的 URL。\n- `git remote -v`：查看远程仓库列表和对应 URL。\n\n### Git 配置\n\n- `git config --global user.name \"name\"`：设置用户名称。\n- `git config --global user.email \"email\"`：设置用户邮件地址。\n- `git config --global core.editor \"editor\"`：设置默认编辑器。\n- `git config --global alias.<alias-name> \"<command>\"`：设置别名。\n- `git config --list`：列出所有 Git 配置。\n\n### Git 撤销操作\n\n- `git reset <file>`：取消暂存文件。\n- `git reset --hard`：撤销所有未提交的修改。\n- `git reset HEAD^` ：回退一个版本。\n- `git reset HEAD^^` ：回退两个版本。\n- `git reset HEAD~100` ：回退100个版本。\n- `git reset -hard HEAD~1`： 回退上一个版本。\n- `git reset -hard 3de025010585d`：通过提交生成的哈希码回退版本，注意哈希码不用全部输入，输入前几个字节就可以识别出来。\n- `git checkout <file>`：取消对文件的修改。\n- `git checkout .`：撤销所有修改，包括已经暂存的和未暂存的修改。\n- `git revert <commit>`：撤销指定提交的修改，生成一条新的提交记录。\n\n### Git 历史操作\n\n- `git log`：显示提交日志。\n- `git log --graph`：以图形化方式显示提交日志。\n- `git log --oneline`：显示简化版的提交日志。\n- `git blame <file>`：显示指定文件的每一行是什么人在什么时间修改的。\n\n### Git 子模块操作\n\n- `git submodule add <repository> <path>`：添加子模块。\n- `git submodule init`：初始化子模块。\n- `git submodule update`：更新子模块。\n- `git submodule foreach <command>`：对每个子模块执行指定命令。\n\n### Git 忽略文件\n\n- `.gitignore`：忽略指定文件或目录。\n- `git rm --cached <file>`：从 Git 仓库中删除指定文件，但在本地保留。","source":"_posts/20220430Linux服务器git配置及常用命令.md","raw":"---\nabbrlink: c699e256\ntitle: Linux服务器git配置及常用命令\ntags: git\ncategories: 后端\ndate: 2023-04-30 16:22:35\ncover:\n---\n## tar 压缩包安装配置\n\n卸载旧版本\n\n- yum 直接卸载\n\n  ```bash\n  yum remove git\n  ```\n\n- 查看 git 安装目录 \n\n  ```bash\n  which -a git\n  # 显示出来 git 安装路径\n  cd /git安装路径\n  # 执行删除命令\n  rm -rf git*\n  ```\n\n下载 git 安装包\n\n官方镜像地址：`https://mirrors.edge.kernel.org/pub/software/scm/git/`\n\n在服务器目录下下载 git 对应版本\n\n```bash\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.40.0.tar.gz\n```\n\n解压\n\n```bash\ntar -zxvf git-2.40.0.tar.gz\n```\n\n安装可能需要的依赖\n\n```bash\nyum install curl-devel expat-devel openssl-devel zlib-devel gcc-c++ \nyum install perl-ExtUtils-MakeMaker automake autoconf libtool make\n```\n\n进入 git-2.40.0 文件夹下，进行编译安装等命令\n\n```bash\n# 安装编译 git 可执行文件，并指定文件位置\n./configure --prefix=/data/git 等同于 make PREFIX=/data/git all \n# 安装到指定目录\nmake PREFIX=/data/git && make PREFIX=/data/git install\n```\n\n配置环境变量\n\n```bash\n# 编辑 profile 文件\nvim /etc/profile\n# git 环境变量，追加以下内容\nexport GIT_HOME=/data/git\nexport PATH=$PATH:${GIT_HOME}/bin\n# 等同于上面两行\nexport PATH=$PATH:/data/git/bin\n# 保存刷新配置\nsource /etc/profile\n```\n\n查看版本 `git --version`，出现以下内容则说明安装配置成功\n\n```bash\n[root@aliyun /]# git --version\ngit version 2.40.0\n[root@aliyun /]#\n```\n\n设置密钥\n\n```bash\nssh-keygen -t rsa -C \"xx@xx.com\"\ncat ~/.ssh/id_rsa.pub\n```\n\n## yum 安装配置\n\nyum 安装最简单，但无法控制安装的版本\n\n```bash\nyum -y install git\n# 检查安装的版本\ngit --version\n```\n## Git常用命令最全总结\n\n### 基本命令\n\n- `git init`：初始化一个 Git 仓库。\n- `git clone <repository>`：克隆一个 Git 仓库到本地。\n- `git add <file>`：将指定文件添加到暂存区。\n- `git add .`：将所有修改过的文件添加到暂存区。\n- `git commit -m \"message\"`：提交所有已经添加到暂存区的文件到本地仓库，并附带一条提交信息。\n- `git status`：查看工作目录和暂存区的状态。\n- `git diff`：查看工作目录和暂存区之间的差异。\n- `git log`：查看提交日志。\n- `git checkout <branch>`：切换到指定分支。\n- `git branch`：查看所有分支。\n- `git merge <branch>`：将指定分支合并到当前分支。\n- `git pull`：从远程仓库拉取最新代码到本地仓库。\n- `git push`：将本地仓库最新代码推送到远程仓库。\n\n### 高级命令\n\n- `git stash`：将工作区的改动保存到一个新的 stash 中。\n- `git stash list`：列出所有 stash。\n- `git stash apply`：将最近的 stash 应用到工作区。\n- `git stash drop`：删除最近的 stash。\n- `git stash pop`：应用最近的 stash 并删除它。\n- `git reset <file>`：将指定文件在暂存区的修改回退到工作目录。\n- `git reset --hard HEAD`：将工作目录和暂存区中的所有修改回退到最新的本地提交。\n- `git revert <commit>`：撤销指定的提交。\n- `git cherry-pick <commit>`：将指定提交合并到当前分支。\n- `git rebase <branch>`：将当前分支变基于指定分支。\n- `git tag`：列出所有 tag。\n- `git tag <tag>`：创建一个新 tag。\n- `git tag -a <tag> -m \"message\" <commit>`：创建一个带有附注信息的新 tag。\n- `git push --tags`：将所有 tag 推送到远程仓库。\n- `git fetch <remote>`：从远程仓库获取最新代码。\n- `git remote`：查看远程仓库列表。\n- `git remote add <name> <url>`：添加一个新的远程仓库。\n- `git remote remove <name>`：删除指定的远程仓库。\n- `git remote set-url <name> <newurl>`：修改指定远程仓库的 URL。\n\n### Git 分支操作\n\n- `git branch`：列出本地分支列表。\n- `git branch -a`：列出本地和远程分支列表。\n- `git branch <branch-name>`：新建分支。\n- `git branch -d <branch-name>`：删除分支。\n- `git checkout <branch-name>`：切换到指定分支。\n- `git checkout -b <new-branch-name>`：创建新分支并切换到该分支。\n- `git merge <branch-name>`：合并指定分支到当前分支。\n- `git merge --no-ff <branch-name>`：不使用快进模式合并指定分支到当前分支。\n- `git log --graph`：以图表的形式显示分支的合并情况。\n\n### Git 标签操作\n\n- `git tag`：列出所有本地标签。\n- `git tag -l \"pattern\"`：列出所有符合指定模式的标签。\n- `git tag <tag-name>`：新建标签。\n- `git tag -a <tag-name> -m \"message\"`：使用附注信息新建标签。\n- `git tag -d <tag-name>`：删除标签。\n- `git push origin <tag-name>`：推送指定标签到远程仓库。\n- `git push origin --tags`：推送所有本地标签到远程仓库。\n- `git checkout <tag-name>`：切换到指定标签。\n\n### Git 远程仓库操作\n\n- `git clone <repository>`：克隆远程仓库。\n- `git pull`：拉取远程仓库最新代码。\n- `git fetch <remote>`：从远程仓库获取最新代码。\n- `git push`：将本地仓库最新代码推送到远程仓库。\n- `git pull <remote> <branch>`：从远程仓库拉取指定分支的最新代码。\n- `git push <remote> <branch>`：将本地仓库的最新代码推送到指定远程仓库的指定分支。\n- `git remote add <name> <url>`：添加一个新的远程仓库。\n- `git remote remove <name>`：删除指定的远程仓库。\n- `git remote set-url <name> <new-url>`：修改指定远程仓库的 URL。\n- `git remote -v`：查看远程仓库列表和对应 URL。\n\n### Git 配置\n\n- `git config --global user.name \"name\"`：设置用户名称。\n- `git config --global user.email \"email\"`：设置用户邮件地址。\n- `git config --global core.editor \"editor\"`：设置默认编辑器。\n- `git config --global alias.<alias-name> \"<command>\"`：设置别名。\n- `git config --list`：列出所有 Git 配置。\n\n### Git 撤销操作\n\n- `git reset <file>`：取消暂存文件。\n- `git reset --hard`：撤销所有未提交的修改。\n- `git reset HEAD^` ：回退一个版本。\n- `git reset HEAD^^` ：回退两个版本。\n- `git reset HEAD~100` ：回退100个版本。\n- `git reset -hard HEAD~1`： 回退上一个版本。\n- `git reset -hard 3de025010585d`：通过提交生成的哈希码回退版本，注意哈希码不用全部输入，输入前几个字节就可以识别出来。\n- `git checkout <file>`：取消对文件的修改。\n- `git checkout .`：撤销所有修改，包括已经暂存的和未暂存的修改。\n- `git revert <commit>`：撤销指定提交的修改，生成一条新的提交记录。\n\n### Git 历史操作\n\n- `git log`：显示提交日志。\n- `git log --graph`：以图形化方式显示提交日志。\n- `git log --oneline`：显示简化版的提交日志。\n- `git blame <file>`：显示指定文件的每一行是什么人在什么时间修改的。\n\n### Git 子模块操作\n\n- `git submodule add <repository> <path>`：添加子模块。\n- `git submodule init`：初始化子模块。\n- `git submodule update`：更新子模块。\n- `git submodule foreach <command>`：对每个子模块执行指定命令。\n\n### Git 忽略文件\n\n- `.gitignore`：忽略指定文件或目录。\n- `git rm --cached <file>`：从 Git 仓库中删除指定文件，但在本地保留。","slug":"20220430Linux服务器git配置及常用命令","published":1,"updated":"2023-05-12T11:38:48.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx50009w0uh0cmzdle2","content":"<h2 id=\"tar-压缩包安装配置\"><a href=\"#tar-压缩包安装配置\" class=\"headerlink\" title=\"tar 压缩包安装配置\"></a>tar 压缩包安装配置</h2><p>卸载旧版本</p>\n<ul>\n<li><p>yum 直接卸载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 git 安装目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> -a git</span><br><span class=\"line\"><span class=\"comment\"># 显示出来 git 安装路径</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /git安装路径</span><br><span class=\"line\"><span class=\"comment\"># 执行删除命令</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf git*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>下载 git 安装包</p>\n<p>官方镜像地址：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p>\n<p>在服务器目录下下载 git 对应版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>安装可能需要的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel openssl-devel zlib-devel gcc-c++ </span><br><span class=\"line\">yum install perl-ExtUtils-MakeMaker automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n\n<p>进入 git-2.40.0 文件夹下，进行编译安装等命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装编译 git 可执行文件，并指定文件位置</span></span><br><span class=\"line\">./configure --prefix=/data/git 等同于 make PREFIX=/data/git all </span><br><span class=\"line\"><span class=\"comment\"># 安装到指定目录</span></span><br><span class=\"line\">make PREFIX=/data/git &amp;&amp; make PREFIX=/data/git install</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 profile 文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># git 环境变量，追加以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GIT_HOME=/data/git</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;GIT_HOME&#125;</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 等同于上面两行</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/data/git/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存刷新配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>查看版本 <code>git --version</code>，出现以下内容则说明安装配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun /]<span class=\"comment\"># git --version</span></span><br><span class=\"line\">git version 2.40.0</span><br><span class=\"line\">[root@aliyun /]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>设置密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;xx@xx.com&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum-安装配置\"><a href=\"#yum-安装配置\" class=\"headerlink\" title=\"yum 安装配置\"></a>yum 安装配置</h2><p>yum 安装最简单，但无法控制安装的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\"># 检查安装的版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git常用命令最全总结\"><a href=\"#Git常用命令最全总结\" class=\"headerlink\" title=\"Git常用命令最全总结\"></a>Git常用命令最全总结</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ul>\n<li><code>git init</code>：初始化一个 Git 仓库。</li>\n<li><code>git clone &lt;repository&gt;</code>：克隆一个 Git 仓库到本地。</li>\n<li><code>git add &lt;file&gt;</code>：将指定文件添加到暂存区。</li>\n<li><code>git add .</code>：将所有修改过的文件添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交所有已经添加到暂存区的文件到本地仓库，并附带一条提交信息。</li>\n<li><code>git status</code>：查看工作目录和暂存区的状态。</li>\n<li><code>git diff</code>：查看工作目录和暂存区之间的差异。</li>\n<li><code>git log</code>：查看提交日志。</li>\n<li><code>git checkout &lt;branch&gt;</code>：切换到指定分支。</li>\n<li><code>git branch</code>：查看所有分支。</li>\n<li><code>git merge &lt;branch&gt;</code>：将指定分支合并到当前分支。</li>\n<li><code>git pull</code>：从远程仓库拉取最新代码到本地仓库。</li>\n<li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li>\n</ul>\n<h3 id=\"高级命令\"><a href=\"#高级命令\" class=\"headerlink\" title=\"高级命令\"></a>高级命令</h3><ul>\n<li><code>git stash</code>：将工作区的改动保存到一个新的 stash 中。</li>\n<li><code>git stash list</code>：列出所有 stash。</li>\n<li><code>git stash apply</code>：将最近的 stash 应用到工作区。</li>\n<li><code>git stash drop</code>：删除最近的 stash。</li>\n<li><code>git stash pop</code>：应用最近的 stash 并删除它。</li>\n<li><code>git reset &lt;file&gt;</code>：将指定文件在暂存区的修改回退到工作目录。</li>\n<li><code>git reset --hard HEAD</code>：将工作目录和暂存区中的所有修改回退到最新的本地提交。</li>\n<li><code>git revert &lt;commit&gt;</code>：撤销指定的提交。</li>\n<li><code>git cherry-pick &lt;commit&gt;</code>：将指定提交合并到当前分支。</li>\n<li><code>git rebase &lt;branch&gt;</code>：将当前分支变基于指定分支。</li>\n<li><code>git tag</code>：列出所有 tag。</li>\n<li><code>git tag &lt;tag&gt;</code>：创建一个新 tag。</li>\n<li><code>git tag -a &lt;tag&gt; -m &quot;message&quot; &lt;commit&gt;</code>：创建一个带有附注信息的新 tag。</li>\n<li><code>git push --tags</code>：将所有 tag 推送到远程仓库。</li>\n<li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li>\n<li><code>git remote</code>：查看远程仓库列表。</li>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li>\n<li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li>\n<li><code>git remote set-url &lt;name&gt; &lt;newurl&gt;</code>：修改指定远程仓库的 URL。</li>\n</ul>\n<h3 id=\"Git-分支操作\"><a href=\"#Git-分支操作\" class=\"headerlink\" title=\"Git 分支操作\"></a>Git 分支操作</h3><ul>\n<li><code>git branch</code>：列出本地分支列表。</li>\n<li><code>git branch -a</code>：列出本地和远程分支列表。</li>\n<li><code>git branch &lt;branch-name&gt;</code>：新建分支。</li>\n<li><code>git branch -d &lt;branch-name&gt;</code>：删除分支。</li>\n<li><code>git checkout &lt;branch-name&gt;</code>：切换到指定分支。</li>\n<li><code>git checkout -b &lt;new-branch-name&gt;</code>：创建新分支并切换到该分支。</li>\n<li><code>git merge &lt;branch-name&gt;</code>：合并指定分支到当前分支。</li>\n<li><code>git merge --no-ff &lt;branch-name&gt;</code>：不使用快进模式合并指定分支到当前分支。</li>\n<li><code>git log --graph</code>：以图表的形式显示分支的合并情况。</li>\n</ul>\n<h3 id=\"Git-标签操作\"><a href=\"#Git-标签操作\" class=\"headerlink\" title=\"Git 标签操作\"></a>Git 标签操作</h3><ul>\n<li><code>git tag</code>：列出所有本地标签。</li>\n<li><code>git tag -l &quot;pattern&quot;</code>：列出所有符合指定模式的标签。</li>\n<li><code>git tag &lt;tag-name&gt;</code>：新建标签。</li>\n<li><code>git tag -a &lt;tag-name&gt; -m &quot;message&quot;</code>：使用附注信息新建标签。</li>\n<li><code>git tag -d &lt;tag-name&gt;</code>：删除标签。</li>\n<li><code>git push origin &lt;tag-name&gt;</code>：推送指定标签到远程仓库。</li>\n<li><code>git push origin --tags</code>：推送所有本地标签到远程仓库。</li>\n<li><code>git checkout &lt;tag-name&gt;</code>：切换到指定标签。</li>\n</ul>\n<h3 id=\"Git-远程仓库操作\"><a href=\"#Git-远程仓库操作\" class=\"headerlink\" title=\"Git 远程仓库操作\"></a>Git 远程仓库操作</h3><ul>\n<li><code>git clone &lt;repository&gt;</code>：克隆远程仓库。</li>\n<li><code>git pull</code>：拉取远程仓库最新代码。</li>\n<li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li>\n<li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li>\n<li><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：从远程仓库拉取指定分支的最新代码。</li>\n<li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：将本地仓库的最新代码推送到指定远程仓库的指定分支。</li>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li>\n<li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li>\n<li><code>git remote set-url &lt;name&gt; &lt;new-url&gt;</code>：修改指定远程仓库的 URL。</li>\n<li><code>git remote -v</code>：查看远程仓库列表和对应 URL。</li>\n</ul>\n<h3 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h3><ul>\n<li><code>git config --global user.name &quot;name&quot;</code>：设置用户名称。</li>\n<li><code>git config --global user.email &quot;email&quot;</code>：设置用户邮件地址。</li>\n<li><code>git config --global core.editor &quot;editor&quot;</code>：设置默认编辑器。</li>\n<li><code>git config --global alias.&lt;alias-name&gt; &quot;&lt;command&gt;&quot;</code>：设置别名。</li>\n<li><code>git config --list</code>：列出所有 Git 配置。</li>\n</ul>\n<h3 id=\"Git-撤销操作\"><a href=\"#Git-撤销操作\" class=\"headerlink\" title=\"Git 撤销操作\"></a>Git 撤销操作</h3><ul>\n<li><code>git reset &lt;file&gt;</code>：取消暂存文件。</li>\n<li><code>git reset --hard</code>：撤销所有未提交的修改。</li>\n<li><code>git reset HEAD^</code> ：回退一个版本。</li>\n<li><code>git reset HEAD^^</code> ：回退两个版本。</li>\n<li><code>git reset HEAD~100</code> ：回退100个版本。</li>\n<li><code>git reset -hard HEAD~1</code>： 回退上一个版本。</li>\n<li><code>git reset -hard 3de025010585d</code>：通过提交生成的哈希码回退版本，注意哈希码不用全部输入，输入前几个字节就可以识别出来。</li>\n<li><code>git checkout &lt;file&gt;</code>：取消对文件的修改。</li>\n<li><code>git checkout .</code>：撤销所有修改，包括已经暂存的和未暂存的修改。</li>\n<li><code>git revert &lt;commit&gt;</code>：撤销指定提交的修改，生成一条新的提交记录。</li>\n</ul>\n<h3 id=\"Git-历史操作\"><a href=\"#Git-历史操作\" class=\"headerlink\" title=\"Git 历史操作\"></a>Git 历史操作</h3><ul>\n<li><code>git log</code>：显示提交日志。</li>\n<li><code>git log --graph</code>：以图形化方式显示提交日志。</li>\n<li><code>git log --oneline</code>：显示简化版的提交日志。</li>\n<li><code>git blame &lt;file&gt;</code>：显示指定文件的每一行是什么人在什么时间修改的。</li>\n</ul>\n<h3 id=\"Git-子模块操作\"><a href=\"#Git-子模块操作\" class=\"headerlink\" title=\"Git 子模块操作\"></a>Git 子模块操作</h3><ul>\n<li><code>git submodule add &lt;repository&gt; &lt;path&gt;</code>：添加子模块。</li>\n<li><code>git submodule init</code>：初始化子模块。</li>\n<li><code>git submodule update</code>：更新子模块。</li>\n<li><code>git submodule foreach &lt;command&gt;</code>：对每个子模块执行指定命令。</li>\n</ul>\n<h3 id=\"Git-忽略文件\"><a href=\"#Git-忽略文件\" class=\"headerlink\" title=\"Git 忽略文件\"></a>Git 忽略文件</h3><ul>\n<li><code>.gitignore</code>：忽略指定文件或目录。</li>\n<li><code>git rm --cached &lt;file&gt;</code>：从 Git 仓库中删除指定文件，但在本地保留。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"tar-压缩包安装配置\"><a href=\"#tar-压缩包安装配置\" class=\"headerlink\" title=\"tar 压缩包安装配置\"></a>tar 压缩包安装配置</h2><p>卸载旧版本</p>\n<ul>\n<li><p>yum 直接卸载</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum remove git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 git 安装目录 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> -a git</span><br><span class=\"line\"><span class=\"comment\"># 显示出来 git 安装路径</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /git安装路径</span><br><span class=\"line\"><span class=\"comment\"># 执行删除命令</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf git*</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>下载 git 安装包</p>\n<p>官方镜像地址：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p>\n<p>在服务器目录下下载 git 对应版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf git-2.40.0.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>安装可能需要的依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel openssl-devel zlib-devel gcc-c++ </span><br><span class=\"line\">yum install perl-ExtUtils-MakeMaker automake autoconf libtool make</span><br></pre></td></tr></table></figure>\n\n<p>进入 git-2.40.0 文件夹下，进行编译安装等命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装编译 git 可执行文件，并指定文件位置</span></span><br><span class=\"line\">./configure --prefix=/data/git 等同于 make PREFIX=/data/git all </span><br><span class=\"line\"><span class=\"comment\"># 安装到指定目录</span></span><br><span class=\"line\">make PREFIX=/data/git &amp;&amp; make PREFIX=/data/git install</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 profile 文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># git 环境变量，追加以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GIT_HOME=/data/git</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;GIT_HOME&#125;</span>/bin</span><br><span class=\"line\"><span class=\"comment\"># 等同于上面两行</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/data/git/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存刷新配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>查看版本 <code>git --version</code>，出现以下内容则说明安装配置成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun /]<span class=\"comment\"># git --version</span></span><br><span class=\"line\">git version 2.40.0</span><br><span class=\"line\">[root@aliyun /]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>设置密钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;xx@xx.com&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yum-安装配置\"><a href=\"#yum-安装配置\" class=\"headerlink\" title=\"yum 安装配置\"></a>yum 安装配置</h2><p>yum 安装最简单，但无法控制安装的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br><span class=\"line\"><span class=\"comment\"># 检查安装的版本</span></span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h2 id=\"Git常用命令最全总结\"><a href=\"#Git常用命令最全总结\" class=\"headerlink\" title=\"Git常用命令最全总结\"></a>Git常用命令最全总结</h2><h3 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h3><ul>\n<li><code>git init</code>：初始化一个 Git 仓库。</li>\n<li><code>git clone &lt;repository&gt;</code>：克隆一个 Git 仓库到本地。</li>\n<li><code>git add &lt;file&gt;</code>：将指定文件添加到暂存区。</li>\n<li><code>git add .</code>：将所有修改过的文件添加到暂存区。</li>\n<li><code>git commit -m &quot;message&quot;</code>：提交所有已经添加到暂存区的文件到本地仓库，并附带一条提交信息。</li>\n<li><code>git status</code>：查看工作目录和暂存区的状态。</li>\n<li><code>git diff</code>：查看工作目录和暂存区之间的差异。</li>\n<li><code>git log</code>：查看提交日志。</li>\n<li><code>git checkout &lt;branch&gt;</code>：切换到指定分支。</li>\n<li><code>git branch</code>：查看所有分支。</li>\n<li><code>git merge &lt;branch&gt;</code>：将指定分支合并到当前分支。</li>\n<li><code>git pull</code>：从远程仓库拉取最新代码到本地仓库。</li>\n<li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li>\n</ul>\n<h3 id=\"高级命令\"><a href=\"#高级命令\" class=\"headerlink\" title=\"高级命令\"></a>高级命令</h3><ul>\n<li><code>git stash</code>：将工作区的改动保存到一个新的 stash 中。</li>\n<li><code>git stash list</code>：列出所有 stash。</li>\n<li><code>git stash apply</code>：将最近的 stash 应用到工作区。</li>\n<li><code>git stash drop</code>：删除最近的 stash。</li>\n<li><code>git stash pop</code>：应用最近的 stash 并删除它。</li>\n<li><code>git reset &lt;file&gt;</code>：将指定文件在暂存区的修改回退到工作目录。</li>\n<li><code>git reset --hard HEAD</code>：将工作目录和暂存区中的所有修改回退到最新的本地提交。</li>\n<li><code>git revert &lt;commit&gt;</code>：撤销指定的提交。</li>\n<li><code>git cherry-pick &lt;commit&gt;</code>：将指定提交合并到当前分支。</li>\n<li><code>git rebase &lt;branch&gt;</code>：将当前分支变基于指定分支。</li>\n<li><code>git tag</code>：列出所有 tag。</li>\n<li><code>git tag &lt;tag&gt;</code>：创建一个新 tag。</li>\n<li><code>git tag -a &lt;tag&gt; -m &quot;message&quot; &lt;commit&gt;</code>：创建一个带有附注信息的新 tag。</li>\n<li><code>git push --tags</code>：将所有 tag 推送到远程仓库。</li>\n<li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li>\n<li><code>git remote</code>：查看远程仓库列表。</li>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li>\n<li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li>\n<li><code>git remote set-url &lt;name&gt; &lt;newurl&gt;</code>：修改指定远程仓库的 URL。</li>\n</ul>\n<h3 id=\"Git-分支操作\"><a href=\"#Git-分支操作\" class=\"headerlink\" title=\"Git 分支操作\"></a>Git 分支操作</h3><ul>\n<li><code>git branch</code>：列出本地分支列表。</li>\n<li><code>git branch -a</code>：列出本地和远程分支列表。</li>\n<li><code>git branch &lt;branch-name&gt;</code>：新建分支。</li>\n<li><code>git branch -d &lt;branch-name&gt;</code>：删除分支。</li>\n<li><code>git checkout &lt;branch-name&gt;</code>：切换到指定分支。</li>\n<li><code>git checkout -b &lt;new-branch-name&gt;</code>：创建新分支并切换到该分支。</li>\n<li><code>git merge &lt;branch-name&gt;</code>：合并指定分支到当前分支。</li>\n<li><code>git merge --no-ff &lt;branch-name&gt;</code>：不使用快进模式合并指定分支到当前分支。</li>\n<li><code>git log --graph</code>：以图表的形式显示分支的合并情况。</li>\n</ul>\n<h3 id=\"Git-标签操作\"><a href=\"#Git-标签操作\" class=\"headerlink\" title=\"Git 标签操作\"></a>Git 标签操作</h3><ul>\n<li><code>git tag</code>：列出所有本地标签。</li>\n<li><code>git tag -l &quot;pattern&quot;</code>：列出所有符合指定模式的标签。</li>\n<li><code>git tag &lt;tag-name&gt;</code>：新建标签。</li>\n<li><code>git tag -a &lt;tag-name&gt; -m &quot;message&quot;</code>：使用附注信息新建标签。</li>\n<li><code>git tag -d &lt;tag-name&gt;</code>：删除标签。</li>\n<li><code>git push origin &lt;tag-name&gt;</code>：推送指定标签到远程仓库。</li>\n<li><code>git push origin --tags</code>：推送所有本地标签到远程仓库。</li>\n<li><code>git checkout &lt;tag-name&gt;</code>：切换到指定标签。</li>\n</ul>\n<h3 id=\"Git-远程仓库操作\"><a href=\"#Git-远程仓库操作\" class=\"headerlink\" title=\"Git 远程仓库操作\"></a>Git 远程仓库操作</h3><ul>\n<li><code>git clone &lt;repository&gt;</code>：克隆远程仓库。</li>\n<li><code>git pull</code>：拉取远程仓库最新代码。</li>\n<li><code>git fetch &lt;remote&gt;</code>：从远程仓库获取最新代码。</li>\n<li><code>git push</code>：将本地仓库最新代码推送到远程仓库。</li>\n<li><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：从远程仓库拉取指定分支的最新代码。</li>\n<li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：将本地仓库的最新代码推送到指定远程仓库的指定分支。</li>\n<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个新的远程仓库。</li>\n<li><code>git remote remove &lt;name&gt;</code>：删除指定的远程仓库。</li>\n<li><code>git remote set-url &lt;name&gt; &lt;new-url&gt;</code>：修改指定远程仓库的 URL。</li>\n<li><code>git remote -v</code>：查看远程仓库列表和对应 URL。</li>\n</ul>\n<h3 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h3><ul>\n<li><code>git config --global user.name &quot;name&quot;</code>：设置用户名称。</li>\n<li><code>git config --global user.email &quot;email&quot;</code>：设置用户邮件地址。</li>\n<li><code>git config --global core.editor &quot;editor&quot;</code>：设置默认编辑器。</li>\n<li><code>git config --global alias.&lt;alias-name&gt; &quot;&lt;command&gt;&quot;</code>：设置别名。</li>\n<li><code>git config --list</code>：列出所有 Git 配置。</li>\n</ul>\n<h3 id=\"Git-撤销操作\"><a href=\"#Git-撤销操作\" class=\"headerlink\" title=\"Git 撤销操作\"></a>Git 撤销操作</h3><ul>\n<li><code>git reset &lt;file&gt;</code>：取消暂存文件。</li>\n<li><code>git reset --hard</code>：撤销所有未提交的修改。</li>\n<li><code>git reset HEAD^</code> ：回退一个版本。</li>\n<li><code>git reset HEAD^^</code> ：回退两个版本。</li>\n<li><code>git reset HEAD~100</code> ：回退100个版本。</li>\n<li><code>git reset -hard HEAD~1</code>： 回退上一个版本。</li>\n<li><code>git reset -hard 3de025010585d</code>：通过提交生成的哈希码回退版本，注意哈希码不用全部输入，输入前几个字节就可以识别出来。</li>\n<li><code>git checkout &lt;file&gt;</code>：取消对文件的修改。</li>\n<li><code>git checkout .</code>：撤销所有修改，包括已经暂存的和未暂存的修改。</li>\n<li><code>git revert &lt;commit&gt;</code>：撤销指定提交的修改，生成一条新的提交记录。</li>\n</ul>\n<h3 id=\"Git-历史操作\"><a href=\"#Git-历史操作\" class=\"headerlink\" title=\"Git 历史操作\"></a>Git 历史操作</h3><ul>\n<li><code>git log</code>：显示提交日志。</li>\n<li><code>git log --graph</code>：以图形化方式显示提交日志。</li>\n<li><code>git log --oneline</code>：显示简化版的提交日志。</li>\n<li><code>git blame &lt;file&gt;</code>：显示指定文件的每一行是什么人在什么时间修改的。</li>\n</ul>\n<h3 id=\"Git-子模块操作\"><a href=\"#Git-子模块操作\" class=\"headerlink\" title=\"Git 子模块操作\"></a>Git 子模块操作</h3><ul>\n<li><code>git submodule add &lt;repository&gt; &lt;path&gt;</code>：添加子模块。</li>\n<li><code>git submodule init</code>：初始化子模块。</li>\n<li><code>git submodule update</code>：更新子模块。</li>\n<li><code>git submodule foreach &lt;command&gt;</code>：对每个子模块执行指定命令。</li>\n</ul>\n<h3 id=\"Git-忽略文件\"><a href=\"#Git-忽略文件\" class=\"headerlink\" title=\"Git 忽略文件\"></a>Git 忽略文件</h3><ul>\n<li><code>.gitignore</code>：忽略指定文件或目录。</li>\n<li><code>git rm --cached &lt;file&gt;</code>：从 Git 仓库中删除指定文件，但在本地保留。</li>\n</ul>\n"},{"abbrlink":"d68e7f96","title":"Linux服务器node环境配置","date":"2023-05-01T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"服务器用的是阿里云 `Centos7.9`\n\n`node`官网：https://nodejs.org/en\n\n镜像下载地址：https://nodejs.org/download/release\n\n选择需要版本的 node，在服务器指定目录下进行一下命令下载（不建议安装最新版本）：\n\n```bash\nwget https://nodejs.org/download/release/latest-v17.x/node-v17.9.1-linux-x64.tar.gz\n```\n\n解压\n\n```bash\ntar -zxvf node-v17.9.1-linux-x64.tar.gz\n```\n\n配置环境变量\n\n```bash\n# 编辑 profile 文件\nvim /etc/profile\n# node 环境变量，追加以下内容\nexport PATH=$PATH:/data/node/node-v17.9.1-linux-x64/bin\n# 保存并刷新配置\nsource /etc/profile\n```\n\n查看版本号\n\n```bash\nnode -v\nnpm -v\n```\n\n出现版本号则说明配置成功\n\n注意：查看版本号时出现以下错误，说明该操作系统的GLIBC版本低于Node所能支持的版本，建议16.x的版本，不建议安装最新版本\n\n```bash\nroot@aliyun ~]# node -v\nnode: /lib64/libm.so.6: version `GLIBC_2.27' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `CXXABI_1.3.9' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by node)\nnode: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by node)\nnode: /lib64/libc.so.6: version `GLIBC_2.25' not found (required by node)\n```\n\n\n\n\n\n\n","source":"_posts/20220501Linux服务器node环境配置.md","raw":"---\nabbrlink: d68e7f96\ntitle: Linux服务器node环境配置\ntags: node\ncategories: 前端\ndate: 2023-05-01 16:22:35\ncover:\n---\n服务器用的是阿里云 `Centos7.9`\n\n`node`官网：https://nodejs.org/en\n\n镜像下载地址：https://nodejs.org/download/release\n\n选择需要版本的 node，在服务器指定目录下进行一下命令下载（不建议安装最新版本）：\n\n```bash\nwget https://nodejs.org/download/release/latest-v17.x/node-v17.9.1-linux-x64.tar.gz\n```\n\n解压\n\n```bash\ntar -zxvf node-v17.9.1-linux-x64.tar.gz\n```\n\n配置环境变量\n\n```bash\n# 编辑 profile 文件\nvim /etc/profile\n# node 环境变量，追加以下内容\nexport PATH=$PATH:/data/node/node-v17.9.1-linux-x64/bin\n# 保存并刷新配置\nsource /etc/profile\n```\n\n查看版本号\n\n```bash\nnode -v\nnpm -v\n```\n\n出现版本号则说明配置成功\n\n注意：查看版本号时出现以下错误，说明该操作系统的GLIBC版本低于Node所能支持的版本，建议16.x的版本，不建议安装最新版本\n\n```bash\nroot@aliyun ~]# node -v\nnode: /lib64/libm.so.6: version `GLIBC_2.27' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `CXXABI_1.3.9' not found (required by node)\nnode: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by node)\nnode: /lib64/libc.so.6: version `GLIBC_2.28' not found (required by node)\nnode: /lib64/libc.so.6: version `GLIBC_2.25' not found (required by node)\n```\n\n\n\n\n\n\n","slug":"20220501Linux服务器node环境配置","published":1,"updated":"2023-05-12T11:38:48.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx5000bw0uh6nkg2l75","content":"<p>服务器用的是阿里云 <code>Centos7.9</code></p>\n<p><code>node</code>官网：<a href=\"https://nodejs.org/en\">https://nodejs.org/en</a></p>\n<p>镜像下载地址：<a href=\"https://nodejs.org/download/release\">https://nodejs.org/download/release</a></p>\n<p>选择需要版本的 node，在服务器指定目录下进行一下命令下载（不建议安装最新版本）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/download/release/latest-v17.x/node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 profile 文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># node 环境变量，追加以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/data/node/node-v17.9.1-linux-x64/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存并刷新配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>查看版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>出现版本号则说明配置成功</p>\n<p>注意：查看版本号时出现以下错误，说明该操作系统的GLIBC版本低于Node所能支持的版本，建议16.x的版本，不建议安装最新版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@aliyun ~]<span class=\"comment\"># node -v</span></span><br><span class=\"line\">node: /lib64/libm.so.6: version `GLIBC_2.27<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27;</span> not found (required by node)</span><br><span class=\"line\">node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27;</span> not found (required by node)</span><br><span class=\"line\">node: /lib64/libc.so.6: version `GLIBC_2.28<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libc.so.6: version `GLIBC_2.25&#x27;</span> not found (required by node)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>服务器用的是阿里云 <code>Centos7.9</code></p>\n<p><code>node</code>官网：<a href=\"https://nodejs.org/en\">https://nodejs.org/en</a></p>\n<p>镜像下载地址：<a href=\"https://nodejs.org/download/release\">https://nodejs.org/download/release</a></p>\n<p>选择需要版本的 node，在服务器指定目录下进行一下命令下载（不建议安装最新版本）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/download/release/latest-v17.x/node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf node-v17.9.1-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>配置环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编辑 profile 文件</span></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># node 环境变量，追加以下内容</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/data/node/node-v17.9.1-linux-x64/bin</span><br><span class=\"line\"><span class=\"comment\"># 保存并刷新配置</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>查看版本号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<p>出现版本号则说明配置成功</p>\n<p>注意：查看版本号时出现以下错误，说明该操作系统的GLIBC版本低于Node所能支持的版本，建议16.x的版本，不建议安装最新版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@aliyun ~]<span class=\"comment\"># node -v</span></span><br><span class=\"line\">node: /lib64/libm.so.6: version `GLIBC_2.27<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27;</span> not found (required by node)</span><br><span class=\"line\">node: /lib64/libstdc++.so.6: version `CXXABI_1.3.9<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27;</span> not found (required by node)</span><br><span class=\"line\">node: /lib64/libc.so.6: version `GLIBC_2.28<span class=\"string\">&#x27; not found (required by node)</span></span><br><span class=\"line\"><span class=\"string\">node: /lib64/libc.so.6: version `GLIBC_2.25&#x27;</span> not found (required by node)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"abbrlink":"6113e70e","title":"Linux服务器MySQL不同安装部署方式","date":"2023-05-02T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 `MySQL` 官方的 `yum repository`\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n注意：添加 `mysql-server rpm`包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 `MySQL` 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动 `MySQL` 服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 `MySql` 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 `MySql`，登录命令（第一种方式使用密码登录）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动 `MySQL` 后，就会有临时密码，这个默认的初始密码在 `/var/log/mysqld.log` 文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n配置文件说明：\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n创建文件夹\n\n```bash\nmkdir -p /data/mysql/data /data/mysql/conf /data/mysql/log\n```\n\n2、启动 `mysql` 镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \\\n-v /data/mysql/log:/var/log/mysql \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n```\n\n\n\n\n\n\n","source":"_posts/20220502Linux服务器MySQL不同安装部署方式.md","raw":"---\nabbrlink: 6113e70e\ntitle: Linux服务器MySQL不同安装部署方式\ntags: mysql\ncategories: 后端\ndate: 2023-05-02 16:22:35\ncover:\n---\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 `MySQL` 官方的 `yum repository`\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n注意：添加 `mysql-server rpm`包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 `MySQL` 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动 `MySQL` 服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 `MySql` 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 `MySql`，登录命令（第一种方式使用密码登录）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动 `MySQL` 后，就会有临时密码，这个默认的初始密码在 `/var/log/mysqld.log` 文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n配置文件说明：\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n创建文件夹\n\n```bash\nmkdir -p /data/mysql/data /data/mysql/conf /data/mysql/log\n```\n\n2、启动 `mysql` 镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \\\n-v /data/mysql/log:/var/log/mysql \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n```\n\n\n\n\n\n\n","slug":"20220502Linux服务器MySQL不同安装部署方式","published":1,"updated":"2023-05-12T11:38:48.028Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx7000fw0uh3nm035x5","content":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 <code>MySQL</code> 官方的 <code>yum repository</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>注意：添加 <code>mysql-server rpm</code>包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 <code>MySQL</code> 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动 <code>MySQL</code> 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 <code>MySql</code> 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 <code>MySql</code>，登录命令（第一种方式使用密码登录）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动 <code>MySQL</code> 后，就会有临时密码，这个默认的初始密码在 <code>/var/log/mysqld.log</code> 文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件说明：</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>创建文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/mysql/data /data/mysql/conf /data/mysql/log</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 <code>mysql</code> 镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \\</span><br><span class=\"line\">-v /data/mysql/log:/var/log/mysql \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 <code>MySQL</code> 官方的 <code>yum repository</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>注意：添加 <code>mysql-server rpm</code>包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 <code>MySQL</code> 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动 <code>MySQL</code> 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 <code>MySql</code> 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 <code>MySql</code>，登录命令（第一种方式使用密码登录）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动 <code>MySQL</code> 后，就会有临时密码，这个默认的初始密码在 <code>/var/log/mysqld.log</code> 文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>配置文件说明：</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>创建文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /data/mysql/data /data/mysql/conf /data/mysql/log</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 <code>mysql</code> 镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf \\</span><br><span class=\"line\">-v /data/mysql/log:/var/log/mysql \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"Linux手把手教你部署前端后端分离项目","abbrlink":"858c5b5e","date":"2023-05-05T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"### **环境准备**\n\n[JDK 安装与环境变量配置](https://mp.weixin.qq.com/s/T3ICzlKbrs4ZpkLvuqQzPA)\n\n[Maven 环境变量配置](https://mp.weixin.qq.com/s/ow9Yo0y-YS3U_BCO0EloqA)\n\n[Nginx 服务器安装配置](https://mp.weixin.qq.com/s/t3f73zj6mdnaU4g94Uj8wA)\n\n[Node 环境变量配置](https://mp.weixin.qq.com/s/9BgWFnNVoUW7DSHX3jZ5_w)\n\n[Git 安装环境变量配置](https://mp.weixin.qq.com/s/gGGe4LsFupahyycQLDL2Ew)\n\n[Docker 部署及常用命令](https://mp.weixin.qq.com/s/4JZkSOn1Ldz_7FkP2NVgcg)\n\n[Redis 安装及配置](https://mp.weixin.qq.com/s/vtj1GtcwqKzGGr2F_4JASA)\n\n[MySQL 安装及配置](https://mp.weixin.qq.com/s/tx8X4TUufG84kPGon-u7Yg)\n\n注意：当前 `Redis` 和 `MySQL` 是使用 `Docker` 安装的，`Nginx` 是 `tar` 包解压后安装配置\n\n### 克隆项目\n\n项目用的是 `RuoYi-Vue` 前后端分离项目， [Gitee地址](https://gitee.com/y_project/RuoYi-Vue)\n\n```\ncd` 进入项目所在文件夹下：`cd /data/pro/\n```\n\n克隆拉取代码：`git clone https://gitee.com/y_project/RuoYi-Vue.git`\n\n### 后端部署\n\n- 使用 `Navicat Premium` 连接 `MySql` 数据库，创建名 `ry-vue` 的数据库，分别执行项目 `sql` 文件夹的 `quartz.sql` 和 `ry_20230223.sql` 文件\n\n- 修改一些项目的配置文件\n\n  1. MySQL 数据库，修改 `MySQL` 数据库密码，进入到 `resources` 文件夹下，`/data/pro/RuoYi-Vue/ruoyi-admin/src/main/resources`，编辑 `application-druid.yml` 文件，`vim application-druid.yml` ，修改密码，数据库名字一致则不用修改\n\n     ```\n     # 数据源配置\n     spring:\n         datasource:\n             type: com.alibaba.druid.pool.DruidDataSource\n             driverClassName: com.mysql.cj.jdbc.Driver\n             druid:\n                 # 主库数据源\n                 master:\n                     url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n                     username: root\n                     password: 123456\n     ```\n\n  2. Redis 地址信息，编辑 `resource` 文件夹下 `application.yml` 文件，修改 `redis` 连接密码\n\n     ```\n     # redis 配置\n       redis:\n         # 地址\n         host: localhost\n         # 端口，默认为6379\n         port: 6379\n         # 数据库索引\n         database: 0\n         # 密码\n         password: 123456\n         # 连接超时时间\n         timeout: 10s\n         lettuce:\n           pool:\n             # 连接池中的最小空闲连接\n             min-idle: 0\n             # 连接池中的最大空闲连接\n             max-idle: 8\n             # 连接池的最大数据库连接数\n             max-active: 8\n             # #连接池最大阻塞等待时间（使用负值表示没有限制）\n             max-wait: -1ms\n     ```\n\n  3. 文件存放目录，编辑 `application.yml` 文件，`vim application.yml` ,修改项目相关配置文件路径地址\n\n     ```\n     # 项目相关配置\n     ruoyi:\n       # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /data/tmp）\n       profile: /data/tmp\n     ```\n\n  4. 端口号根据自己需求修改，在 `application.yml` 下修改\n\n- 打包，进入到项目文件夹目录下：`cd /data/pro/RuoYi-Vue/`，执行 `maven` 打包命令：`maven clean package` ，第一次需要下载 `jar` 包，需要等几分钟\n\n- 移动 `jar` ，进入 `target` 文件夹下 `cd ruoyi-admin/target/`，移动 `ruoyi-admin.jar` 到 `/data/pro/backend/` ，命令 `mv ruoyi-admin.jar /data/pro/backend/`\n\n- 启动，进入`backend` 文件夹下，执行  `nohup java -jar ruoyi-admin.jar > nohup.out 2>&1 &`\n\n  查看是否启动成功  `tail -200f nohup.out`\n\n  访问接口文档：http://ip:8080/swagger-ui/index.html，访问成功，则说明后端接口部署成功\n\n### 前端部署\n\n- 安装依赖，进入 ui 页面文件夹下，`cd /data/pro/RuoYi-Vue/ruoyi-ui/`\n\n  ```\n  # 安装打包依赖\n  npm install --unsafe-perm --registry=https://registry.npm.taobao.org\n  ```\n\n- 打包正式环境\n\n  ```\n  npm run build:prod\n  ```\n\n  如果出现错误\n\n  ```bash\n  Building for production...Error: error:0308010C:digitat envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)atObject.createHash (node:crypto:135:10)at(/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/util/createHash,js:135:53)module.exportsatNormalModuleinitBuildHash (/data/oro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lb/NormalModule, is:417:16)handleParseError (/data/pro/RuoYi-Vue/ruovi-ui/nodemodules/webpack/ib/NormalModule.js:471:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,js:503:5atat/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,is:358:12at/data/pro/RuoYi-Vue/ruovi-ui/node modules/oader-runner/lib/LoaderRunner,is:373:3atiterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,is:214:10atiterateNormalLoaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:221:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/oader-runner/lib/LoaderRunner.js:236:3atrunSyncOrAsync (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:130:11)iterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:232:2)atArray.<anonymous> (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:205:4)atStorage,finished (/data/pro/Ruoyi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem. is:55:16)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem,js:91:9at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:114\n  ```\n\n  执行 `export NODE_OPTIONS=--openssl-legacy-provider` 命令，再次执行 `npm run build:prod`\n\n- 在 `/data/pro/front` 目录下创建 `ruoyi-ui` 文件夹，`mkdir -p /data/pro/front/ruoyi-ui` ，把打包好的 `dist` 文件夹下的移动到 `ruoyi-ui` 文件夹下，命令为 `mv dist/* /data/pro/front/ruoyi-ui`\n\n### nginx 配置\n\n在安装好的 `nginx` 目录下，`/data/nginx2/conf` ，把以下 `nginx` 配置替换到 nginx.conf 文件中重新启动 `nginx` 即可，`nginx` 完整配置\n\n```\nuser  root; \nworker_processes  auto;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n  charset utf-8;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n打开浏览器，输入：http://47.103.35.50 出现登录页面和验证码则说明前后端都已部署成功\n\n\n\n\n\n\n","source":"_posts/20220505Linux手把手教你部署前端后端分离项目.md","raw":"---\ntitle: Linux手把手教你部署前端后端分离项目\ntags: Linux\ncategories: server\nabbrlink: 858c5b5e\ndate: 2023-05-05 16:22:35\ncover:\n---\n### **环境准备**\n\n[JDK 安装与环境变量配置](https://mp.weixin.qq.com/s/T3ICzlKbrs4ZpkLvuqQzPA)\n\n[Maven 环境变量配置](https://mp.weixin.qq.com/s/ow9Yo0y-YS3U_BCO0EloqA)\n\n[Nginx 服务器安装配置](https://mp.weixin.qq.com/s/t3f73zj6mdnaU4g94Uj8wA)\n\n[Node 环境变量配置](https://mp.weixin.qq.com/s/9BgWFnNVoUW7DSHX3jZ5_w)\n\n[Git 安装环境变量配置](https://mp.weixin.qq.com/s/gGGe4LsFupahyycQLDL2Ew)\n\n[Docker 部署及常用命令](https://mp.weixin.qq.com/s/4JZkSOn1Ldz_7FkP2NVgcg)\n\n[Redis 安装及配置](https://mp.weixin.qq.com/s/vtj1GtcwqKzGGr2F_4JASA)\n\n[MySQL 安装及配置](https://mp.weixin.qq.com/s/tx8X4TUufG84kPGon-u7Yg)\n\n注意：当前 `Redis` 和 `MySQL` 是使用 `Docker` 安装的，`Nginx` 是 `tar` 包解压后安装配置\n\n### 克隆项目\n\n项目用的是 `RuoYi-Vue` 前后端分离项目， [Gitee地址](https://gitee.com/y_project/RuoYi-Vue)\n\n```\ncd` 进入项目所在文件夹下：`cd /data/pro/\n```\n\n克隆拉取代码：`git clone https://gitee.com/y_project/RuoYi-Vue.git`\n\n### 后端部署\n\n- 使用 `Navicat Premium` 连接 `MySql` 数据库，创建名 `ry-vue` 的数据库，分别执行项目 `sql` 文件夹的 `quartz.sql` 和 `ry_20230223.sql` 文件\n\n- 修改一些项目的配置文件\n\n  1. MySQL 数据库，修改 `MySQL` 数据库密码，进入到 `resources` 文件夹下，`/data/pro/RuoYi-Vue/ruoyi-admin/src/main/resources`，编辑 `application-druid.yml` 文件，`vim application-druid.yml` ，修改密码，数据库名字一致则不用修改\n\n     ```\n     # 数据源配置\n     spring:\n         datasource:\n             type: com.alibaba.druid.pool.DruidDataSource\n             driverClassName: com.mysql.cj.jdbc.Driver\n             druid:\n                 # 主库数据源\n                 master:\n                     url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n                     username: root\n                     password: 123456\n     ```\n\n  2. Redis 地址信息，编辑 `resource` 文件夹下 `application.yml` 文件，修改 `redis` 连接密码\n\n     ```\n     # redis 配置\n       redis:\n         # 地址\n         host: localhost\n         # 端口，默认为6379\n         port: 6379\n         # 数据库索引\n         database: 0\n         # 密码\n         password: 123456\n         # 连接超时时间\n         timeout: 10s\n         lettuce:\n           pool:\n             # 连接池中的最小空闲连接\n             min-idle: 0\n             # 连接池中的最大空闲连接\n             max-idle: 8\n             # 连接池的最大数据库连接数\n             max-active: 8\n             # #连接池最大阻塞等待时间（使用负值表示没有限制）\n             max-wait: -1ms\n     ```\n\n  3. 文件存放目录，编辑 `application.yml` 文件，`vim application.yml` ,修改项目相关配置文件路径地址\n\n     ```\n     # 项目相关配置\n     ruoyi:\n       # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /data/tmp）\n       profile: /data/tmp\n     ```\n\n  4. 端口号根据自己需求修改，在 `application.yml` 下修改\n\n- 打包，进入到项目文件夹目录下：`cd /data/pro/RuoYi-Vue/`，执行 `maven` 打包命令：`maven clean package` ，第一次需要下载 `jar` 包，需要等几分钟\n\n- 移动 `jar` ，进入 `target` 文件夹下 `cd ruoyi-admin/target/`，移动 `ruoyi-admin.jar` 到 `/data/pro/backend/` ，命令 `mv ruoyi-admin.jar /data/pro/backend/`\n\n- 启动，进入`backend` 文件夹下，执行  `nohup java -jar ruoyi-admin.jar > nohup.out 2>&1 &`\n\n  查看是否启动成功  `tail -200f nohup.out`\n\n  访问接口文档：http://ip:8080/swagger-ui/index.html，访问成功，则说明后端接口部署成功\n\n### 前端部署\n\n- 安装依赖，进入 ui 页面文件夹下，`cd /data/pro/RuoYi-Vue/ruoyi-ui/`\n\n  ```\n  # 安装打包依赖\n  npm install --unsafe-perm --registry=https://registry.npm.taobao.org\n  ```\n\n- 打包正式环境\n\n  ```\n  npm run build:prod\n  ```\n\n  如果出现错误\n\n  ```bash\n  Building for production...Error: error:0308010C:digitat envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)atObject.createHash (node:crypto:135:10)at(/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/util/createHash,js:135:53)module.exportsatNormalModuleinitBuildHash (/data/oro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lb/NormalModule, is:417:16)handleParseError (/data/pro/RuoYi-Vue/ruovi-ui/nodemodules/webpack/ib/NormalModule.js:471:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,js:503:5atat/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,is:358:12at/data/pro/RuoYi-Vue/ruovi-ui/node modules/oader-runner/lib/LoaderRunner,is:373:3atiterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,is:214:10atiterateNormalLoaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:221:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/oader-runner/lib/LoaderRunner.js:236:3atrunSyncOrAsync (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:130:11)iterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:232:2)atArray.<anonymous> (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:205:4)atStorage,finished (/data/pro/Ruoyi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem. is:55:16)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem,js:91:9at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:114\n  ```\n\n  执行 `export NODE_OPTIONS=--openssl-legacy-provider` 命令，再次执行 `npm run build:prod`\n\n- 在 `/data/pro/front` 目录下创建 `ruoyi-ui` 文件夹，`mkdir -p /data/pro/front/ruoyi-ui` ，把打包好的 `dist` 文件夹下的移动到 `ruoyi-ui` 文件夹下，命令为 `mv dist/* /data/pro/front/ruoyi-ui`\n\n### nginx 配置\n\n在安装好的 `nginx` 目录下，`/data/nginx2/conf` ，把以下 `nginx` 配置替换到 nginx.conf 文件中重新启动 `nginx` 即可，`nginx` 完整配置\n\n```\nuser  root; \nworker_processes  auto;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n  charset utf-8;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n打开浏览器，输入：http://47.103.35.50 出现登录页面和验证码则说明前后端都已部署成功\n\n\n\n\n\n\n","slug":"20220505Linux手把手教你部署前端后端分离项目","published":1,"updated":"2023-05-12T11:21:45.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcx8000gw0uhggmzh0fn","content":"<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a><strong>环境准备</strong></h3><p><a href=\"https://mp.weixin.qq.com/s/T3ICzlKbrs4ZpkLvuqQzPA\">JDK 安装与环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/ow9Yo0y-YS3U_BCO0EloqA\">Maven 环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/t3f73zj6mdnaU4g94Uj8wA\">Nginx 服务器安装配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/9BgWFnNVoUW7DSHX3jZ5_w\">Node 环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/gGGe4LsFupahyycQLDL2Ew\">Git 安装环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/4JZkSOn1Ldz_7FkP2NVgcg\">Docker 部署及常用命令</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/vtj1GtcwqKzGGr2F_4JASA\">Redis 安装及配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/tx8X4TUufG84kPGon-u7Yg\">MySQL 安装及配置</a></p>\n<p>注意：当前 <code>Redis</code> 和 <code>MySQL</code> 是使用 <code>Docker</code> 安装的，<code>Nginx</code> 是 <code>tar</code> 包解压后安装配置</p>\n<h3 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h3><p>项目用的是 <code>RuoYi-Vue</code> 前后端分离项目， <a href=\"https://gitee.com/y_project/RuoYi-Vue\">Gitee地址</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd` 进入项目所在文件夹下：`cd /data/pro/</span><br></pre></td></tr></table></figure>\n\n<p>克隆拉取代码：<code>git clone https://gitee.com/y_project/RuoYi-Vue.git</code></p>\n<h3 id=\"后端部署\"><a href=\"#后端部署\" class=\"headerlink\" title=\"后端部署\"></a>后端部署</h3><ul>\n<li><p>使用 <code>Navicat Premium</code> 连接 <code>MySql</code> 数据库，创建名 <code>ry-vue</code> 的数据库，分别执行项目 <code>sql</code> 文件夹的 <code>quartz.sql</code> 和 <code>ry_20230223.sql</code> 文件</p>\n</li>\n<li><p>修改一些项目的配置文件</p>\n<ol>\n<li><p>MySQL 数据库，修改 <code>MySQL</code> 数据库密码，进入到 <code>resources</code> 文件夹下，<code>/data/pro/RuoYi-Vue/ruoyi-admin/src/main/resources</code>，编辑 <code>application-druid.yml</code> 文件，<code>vim application-druid.yml</code> ，修改密码，数据库名字一致则不用修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 数据源配置</span><br><span class=\"line\">spring:</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">        driverClassName: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">        druid:</span><br><span class=\"line\">            # 主库数据源</span><br><span class=\"line\">            master:</span><br><span class=\"line\">                url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class=\"line\">                username: root</span><br><span class=\"line\">                password: 123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Redis 地址信息，编辑 <code>resource</code> 文件夹下 <code>application.yml</code> 文件，修改 <code>redis</code> 连接密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis 配置</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    # 地址</span><br><span class=\"line\">    host: localhost</span><br><span class=\"line\">    # 端口，默认为6379</span><br><span class=\"line\">    port: 6379</span><br><span class=\"line\">    # 数据库索引</span><br><span class=\"line\">    database: 0</span><br><span class=\"line\">    # 密码</span><br><span class=\"line\">    password: 123456</span><br><span class=\"line\">    # 连接超时时间</span><br><span class=\"line\">    timeout: 10s</span><br><span class=\"line\">    lettuce:</span><br><span class=\"line\">      pool:</span><br><span class=\"line\">        # 连接池中的最小空闲连接</span><br><span class=\"line\">        min-idle: 0</span><br><span class=\"line\">        # 连接池中的最大空闲连接</span><br><span class=\"line\">        max-idle: 8</span><br><span class=\"line\">        # 连接池的最大数据库连接数</span><br><span class=\"line\">        max-active: 8</span><br><span class=\"line\">        # #连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">        max-wait: -1ms</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件存放目录，编辑 <code>application.yml</code> 文件，<code>vim application.yml</code> ,修改项目相关配置文件路径地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目相关配置</span><br><span class=\"line\">ruoyi:</span><br><span class=\"line\">  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /data/tmp）</span><br><span class=\"line\">  profile: /data/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口号根据自己需求修改，在 <code>application.yml</code> 下修改</p>\n</li>\n</ol>\n</li>\n<li><p>打包，进入到项目文件夹目录下：<code>cd /data/pro/RuoYi-Vue/</code>，执行 <code>maven</code> 打包命令：<code>maven clean package</code> ，第一次需要下载 <code>jar</code> 包，需要等几分钟</p>\n</li>\n<li><p>移动 <code>jar</code> ，进入 <code>target</code> 文件夹下 <code>cd ruoyi-admin/target/</code>，移动 <code>ruoyi-admin.jar</code> 到 <code>/data/pro/backend/</code> ，命令 <code>mv ruoyi-admin.jar /data/pro/backend/</code></p>\n</li>\n<li><p>启动，进入<code>backend</code> 文件夹下，执行  <code>nohup java -jar ruoyi-admin.jar &gt; nohup.out 2&gt;&amp;1 &amp;</code></p>\n<p>查看是否启动成功  <code>tail -200f nohup.out</code></p>\n<p>访问接口文档：<a href=\"http://ip:8080/swagger-ui/index.html%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%EF%BC%8C%E5%88%99%E8%AF%B4%E6%98%8E%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F\">http://ip:8080/swagger-ui/index.html，访问成功，则说明后端接口部署成功</a></p>\n</li>\n</ul>\n<h3 id=\"前端部署\"><a href=\"#前端部署\" class=\"headerlink\" title=\"前端部署\"></a>前端部署</h3><ul>\n<li><p>安装依赖，进入 ui 页面文件夹下，<code>cd /data/pro/RuoYi-Vue/ruoyi-ui/</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装打包依赖</span><br><span class=\"line\">npm install --unsafe-perm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包正式环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build:prod</span><br></pre></td></tr></table></figure>\n\n<p>如果出现错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building <span class=\"keyword\">for</span> production...Error: error:0308010C:digitat envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)atObject.createHash (node:crypto:135:10)at(/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/util/createHash,js:135:53)module.exportsatNormalModuleinitBuildHash (/data/oro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lb/NormalModule, is:417:16)handleParseError (/data/pro/RuoYi-Vue/ruovi-ui/nodemodules/webpack/ib/NormalModule.js:471:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,js:503:5atat/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,is:358:12at/data/pro/RuoYi-Vue/ruovi-ui/node modules/oader-runner/lib/LoaderRunner,is:373:3atiterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,is:214:10atiterateNormalLoaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:221:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/oader-runner/lib/LoaderRunner.js:236:3atrunSyncOrAsync (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:130:11)iterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:232:2)atArray.&lt;anonymous&gt; (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:205:4)atStorage,finished (/data/pro/Ruoyi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem. is:55:16)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem,js:91:9at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:114</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>export NODE_OPTIONS=--openssl-legacy-provider</code> 命令，再次执行 <code>npm run build:prod</code></p>\n</li>\n<li><p>在 <code>/data/pro/front</code> 目录下创建 <code>ruoyi-ui</code> 文件夹，<code>mkdir -p /data/pro/front/ruoyi-ui</code> ，把打包好的 <code>dist</code> 文件夹下的移动到 <code>ruoyi-ui</code> 文件夹下，命令为 <code>mv dist/* /data/pro/front/ruoyi-ui</code></p>\n</li>\n</ul>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><p>在安装好的 <code>nginx</code> 目录下，<code>/data/nginx2/conf</code> ，把以下 <code>nginx</code> 配置替换到 nginx.conf 文件中重新启动 <code>nginx</code> 即可，<code>nginx</code> 完整配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; </span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host $http_host;</span><br><span class=\"line\">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入：<a href=\"http://47.103.35.50/\">http://47.103.35.50</a> 出现登录页面和验证码则说明前后端都已部署成功</p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a><strong>环境准备</strong></h3><p><a href=\"https://mp.weixin.qq.com/s/T3ICzlKbrs4ZpkLvuqQzPA\">JDK 安装与环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/ow9Yo0y-YS3U_BCO0EloqA\">Maven 环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/t3f73zj6mdnaU4g94Uj8wA\">Nginx 服务器安装配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/9BgWFnNVoUW7DSHX3jZ5_w\">Node 环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/gGGe4LsFupahyycQLDL2Ew\">Git 安装环境变量配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/4JZkSOn1Ldz_7FkP2NVgcg\">Docker 部署及常用命令</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/vtj1GtcwqKzGGr2F_4JASA\">Redis 安装及配置</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/tx8X4TUufG84kPGon-u7Yg\">MySQL 安装及配置</a></p>\n<p>注意：当前 <code>Redis</code> 和 <code>MySQL</code> 是使用 <code>Docker</code> 安装的，<code>Nginx</code> 是 <code>tar</code> 包解压后安装配置</p>\n<h3 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h3><p>项目用的是 <code>RuoYi-Vue</code> 前后端分离项目， <a href=\"https://gitee.com/y_project/RuoYi-Vue\">Gitee地址</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd` 进入项目所在文件夹下：`cd /data/pro/</span><br></pre></td></tr></table></figure>\n\n<p>克隆拉取代码：<code>git clone https://gitee.com/y_project/RuoYi-Vue.git</code></p>\n<h3 id=\"后端部署\"><a href=\"#后端部署\" class=\"headerlink\" title=\"后端部署\"></a>后端部署</h3><ul>\n<li><p>使用 <code>Navicat Premium</code> 连接 <code>MySql</code> 数据库，创建名 <code>ry-vue</code> 的数据库，分别执行项目 <code>sql</code> 文件夹的 <code>quartz.sql</code> 和 <code>ry_20230223.sql</code> 文件</p>\n</li>\n<li><p>修改一些项目的配置文件</p>\n<ol>\n<li><p>MySQL 数据库，修改 <code>MySQL</code> 数据库密码，进入到 <code>resources</code> 文件夹下，<code>/data/pro/RuoYi-Vue/ruoyi-admin/src/main/resources</code>，编辑 <code>application-druid.yml</code> 文件，<code>vim application-druid.yml</code> ，修改密码，数据库名字一致则不用修改</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 数据源配置</span><br><span class=\"line\">spring:</span><br><span class=\"line\">    datasource:</span><br><span class=\"line\">        type: com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\">        driverClassName: com.mysql.cj.jdbc.Driver</span><br><span class=\"line\">        druid:</span><br><span class=\"line\">            # 主库数据源</span><br><span class=\"line\">            master:</span><br><span class=\"line\">                url: jdbc:mysql://localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class=\"line\">                username: root</span><br><span class=\"line\">                password: 123456</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Redis 地址信息，编辑 <code>resource</code> 文件夹下 <code>application.yml</code> 文件，修改 <code>redis</code> 连接密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis 配置</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">    # 地址</span><br><span class=\"line\">    host: localhost</span><br><span class=\"line\">    # 端口，默认为6379</span><br><span class=\"line\">    port: 6379</span><br><span class=\"line\">    # 数据库索引</span><br><span class=\"line\">    database: 0</span><br><span class=\"line\">    # 密码</span><br><span class=\"line\">    password: 123456</span><br><span class=\"line\">    # 连接超时时间</span><br><span class=\"line\">    timeout: 10s</span><br><span class=\"line\">    lettuce:</span><br><span class=\"line\">      pool:</span><br><span class=\"line\">        # 连接池中的最小空闲连接</span><br><span class=\"line\">        min-idle: 0</span><br><span class=\"line\">        # 连接池中的最大空闲连接</span><br><span class=\"line\">        max-idle: 8</span><br><span class=\"line\">        # 连接池的最大数据库连接数</span><br><span class=\"line\">        max-active: 8</span><br><span class=\"line\">        # #连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class=\"line\">        max-wait: -1ms</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件存放目录，编辑 <code>application.yml</code> 文件，<code>vim application.yml</code> ,修改项目相关配置文件路径地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 项目相关配置</span><br><span class=\"line\">ruoyi:</span><br><span class=\"line\">  # 文件路径 示例（ Windows配置D:/ruoyi/uploadPath，Linux配置 /data/tmp）</span><br><span class=\"line\">  profile: /data/tmp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>端口号根据自己需求修改，在 <code>application.yml</code> 下修改</p>\n</li>\n</ol>\n</li>\n<li><p>打包，进入到项目文件夹目录下：<code>cd /data/pro/RuoYi-Vue/</code>，执行 <code>maven</code> 打包命令：<code>maven clean package</code> ，第一次需要下载 <code>jar</code> 包，需要等几分钟</p>\n</li>\n<li><p>移动 <code>jar</code> ，进入 <code>target</code> 文件夹下 <code>cd ruoyi-admin/target/</code>，移动 <code>ruoyi-admin.jar</code> 到 <code>/data/pro/backend/</code> ，命令 <code>mv ruoyi-admin.jar /data/pro/backend/</code></p>\n</li>\n<li><p>启动，进入<code>backend</code> 文件夹下，执行  <code>nohup java -jar ruoyi-admin.jar &gt; nohup.out 2&gt;&amp;1 &amp;</code></p>\n<p>查看是否启动成功  <code>tail -200f nohup.out</code></p>\n<p>访问接口文档：<a href=\"http://ip:8080/swagger-ui/index.html%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%EF%BC%8C%E5%88%99%E8%AF%B4%E6%98%8E%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F\">http://ip:8080/swagger-ui/index.html，访问成功，则说明后端接口部署成功</a></p>\n</li>\n</ul>\n<h3 id=\"前端部署\"><a href=\"#前端部署\" class=\"headerlink\" title=\"前端部署\"></a>前端部署</h3><ul>\n<li><p>安装依赖，进入 ui 页面文件夹下，<code>cd /data/pro/RuoYi-Vue/ruoyi-ui/</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装打包依赖</span><br><span class=\"line\">npm install --unsafe-perm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打包正式环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build:prod</span><br></pre></td></tr></table></figure>\n\n<p>如果出现错误</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building <span class=\"keyword\">for</span> production...Error: error:0308010C:digitat envelope routines::unsupportedat new Hash (node:internal/crypto/hash:67:19)atObject.createHash (node:crypto:135:10)at(/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/util/createHash,js:135:53)module.exportsatNormalModuleinitBuildHash (/data/oro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lb/NormalModule, is:417:16)handleParseError (/data/pro/RuoYi-Vue/ruovi-ui/nodemodules/webpack/ib/NormalModule.js:471:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,js:503:5atat/data/pro/RuoYi-Vue/ruoyi-ui/node modules/webpack/lib/NormalModule,is:358:12at/data/pro/RuoYi-Vue/ruovi-ui/node modules/oader-runner/lib/LoaderRunner,is:373:3atiterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,is:214:10atiterateNormalLoaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:221:10)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/oader-runner/lib/LoaderRunner.js:236:3atrunSyncOrAsync (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:130:11)iterateNormalloaders (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner,js:232:2)atArray.&lt;anonymous&gt; (/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:205:4)atStorage,finished (/data/pro/Ruoyi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem. is:55:16)at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/enhanced-resolve/lib/CachedInputFileSystem,js:91:9at/data/pro/RuoYi-Vue/ruoyi-ui/node modules/loader-runner/lib/LoaderRunner.js:114</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>export NODE_OPTIONS=--openssl-legacy-provider</code> 命令，再次执行 <code>npm run build:prod</code></p>\n</li>\n<li><p>在 <code>/data/pro/front</code> 目录下创建 <code>ruoyi-ui</code> 文件夹，<code>mkdir -p /data/pro/front/ruoyi-ui</code> ，把打包好的 <code>dist</code> 文件夹下的移动到 <code>ruoyi-ui</code> 文件夹下，命令为 <code>mv dist/* /data/pro/front/ruoyi-ui</code></p>\n</li>\n</ul>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><p>在安装好的 <code>nginx</code> 目录下，<code>/data/nginx2/conf</code> ，把以下 <code>nginx</code> 配置替换到 nginx.conf 文件中重新启动 <code>nginx</code> 即可，<code>nginx</code> 完整配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root; </span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host $http_host;</span><br><span class=\"line\">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器，输入：<a href=\"http://47.103.35.50/\">http://47.103.35.50</a> 出现登录页面和验证码则说明前后端都已部署成功</p>\n"},{"title":"多个集合快速找出重复数据的两种方法","abbrlink":"62af1c5a","date":"2023-05-06T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"多个集合快速找出重复数据的两种方法\n\n# 多个集合如何取出交集 (重复的数据)\n\n```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class CollectionDuplicates {\n    public static void main(String[] args) {\n\n\n        // 方法1\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> list2 = Arrays.asList(4, 5, 6, 7, 8);\n        List<Integer> list3 = Arrays.asList(5, 6, 8, 9);\n\n        Set<Integer> set1 = new HashSet<>(list1);\n        Set<Integer> set2 = new HashSet<>(list2);\n        Set<Integer> set3 = new HashSet<>(list3);\n\n        set1.retainAll(set2);\n        set1.retainAll(set3);\n\n        System.out.println(\"重复元素: \" + set1);\n\n        // 方法2\n        List<Integer> duplicates = Stream.of(list1, list2, list3)\n                .flatMap(Collection::stream)\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n                .entrySet()\n                .stream()\n                .filter(e -> e.getValue() > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\n        System.out.println(\"重复元素: \" + duplicates);\n\n    }\n}\n```\n\n结果\n\n```bash\n重复元素: [5]\n重复元素: [4, 5, 6, 8]\n```\n\n# 注意\n\n方法1：三个List集合（list1、list2和list3），然后将它们分别转换为Set集合（set1、set2和set3）。接下来，我们使用set1的retainAll()方法依次取交集，并将结果存储回set1中。最后，我们打印出set1中的元素，即为重复出现的元素。\n\n可以将此代码用于任意数量的列表，只需将它们添加到数组中并转换为Set集合，并使用Set的retainAll()方法依次取交集即可。这种方法是集合依次取交集，list1 和 list3 重复的元素就不能打印出。\n\n方法2：使用Stream.of()方法将它们转换为一个Stream。接下来，我们使用flatMap()方法将所有元素连接到一个单独的Stream中，并使用groupingBy()方法将它们分组并计算它们的出现次数。然后，我们过滤出出现次数大于1的元素，并使用map()方法将它们转换为一个List集合。最后，我们打印出这个List集合，即为重复出现的元素。\n\n这种方法的好处是代码简洁、易于阅读和理解，并且在处理大型数据集时具有较好的性能。\n\n\n\n\n","source":"_posts/20220506多个集合快速找出重复数据的两种方法.md","raw":"---\ntitle: 多个集合快速找出重复数据的两种方法\ntags: List\ncategories: 后端\nabbrlink: 62af1c5a\ndate: 2023-05-06 16:22:35\ncover:\n---\n多个集合快速找出重复数据的两种方法\n\n# 多个集合如何取出交集 (重复的数据)\n\n```java\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class CollectionDuplicates {\n    public static void main(String[] args) {\n\n\n        // 方法1\n        List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> list2 = Arrays.asList(4, 5, 6, 7, 8);\n        List<Integer> list3 = Arrays.asList(5, 6, 8, 9);\n\n        Set<Integer> set1 = new HashSet<>(list1);\n        Set<Integer> set2 = new HashSet<>(list2);\n        Set<Integer> set3 = new HashSet<>(list3);\n\n        set1.retainAll(set2);\n        set1.retainAll(set3);\n\n        System.out.println(\"重复元素: \" + set1);\n\n        // 方法2\n        List<Integer> duplicates = Stream.of(list1, list2, list3)\n                .flatMap(Collection::stream)\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n                .entrySet()\n                .stream()\n                .filter(e -> e.getValue() > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n\n        System.out.println(\"重复元素: \" + duplicates);\n\n    }\n}\n```\n\n结果\n\n```bash\n重复元素: [5]\n重复元素: [4, 5, 6, 8]\n```\n\n# 注意\n\n方法1：三个List集合（list1、list2和list3），然后将它们分别转换为Set集合（set1、set2和set3）。接下来，我们使用set1的retainAll()方法依次取交集，并将结果存储回set1中。最后，我们打印出set1中的元素，即为重复出现的元素。\n\n可以将此代码用于任意数量的列表，只需将它们添加到数组中并转换为Set集合，并使用Set的retainAll()方法依次取交集即可。这种方法是集合依次取交集，list1 和 list3 重复的元素就不能打印出。\n\n方法2：使用Stream.of()方法将它们转换为一个Stream。接下来，我们使用flatMap()方法将所有元素连接到一个单独的Stream中，并使用groupingBy()方法将它们分组并计算它们的出现次数。然后，我们过滤出出现次数大于1的元素，并使用map()方法将它们转换为一个List集合。最后，我们打印出这个List集合，即为重复出现的元素。\n\n这种方法的好处是代码简洁、易于阅读和理解，并且在处理大型数据集时具有较好的性能。\n\n\n\n\n","slug":"20220506多个集合快速找出重复数据的两种方法","published":1,"updated":"2023-05-12T11:18:04.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxb000kw0uh08n04a4t","content":"<p>多个集合快速找出重复数据的两种方法</p>\n<h1 id=\"多个集合如何取出交集-重复的数据\"><a href=\"#多个集合如何取出交集-重复的数据\" class=\"headerlink\" title=\"多个集合如何取出交集 (重复的数据)\"></a>多个集合如何取出交集 (重复的数据)</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CollectionDuplicates</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法1</span></span><br><span class=\"line\">        List&lt;Integer&gt; list1 = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; list2 = Arrays.asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; list3 = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;Integer&gt; set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list1);</span><br><span class=\"line\">        Set&lt;Integer&gt; set2 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list2);</span><br><span class=\"line\">        Set&lt;Integer&gt; set3 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list3);</span><br><span class=\"line\"></span><br><span class=\"line\">        set1.retainAll(set2);</span><br><span class=\"line\">        set1.retainAll(set3);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重复元素: &quot;</span> + set1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        List&lt;Integer&gt; duplicates = Stream.of(list1, list2, list3)</span><br><span class=\"line\">                .flatMap(Collection::stream)</span><br><span class=\"line\">                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))</span><br><span class=\"line\">                .entrySet()</span><br><span class=\"line\">                .stream()</span><br><span class=\"line\">                .filter(e -&gt; e.getValue() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                .map(Map.Entry::getKey)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重复元素: &quot;</span> + duplicates);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重复元素: [5]</span><br><span class=\"line\">重复元素: [4, 5, 6, 8]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>方法1：三个List集合（list1、list2和list3），然后将它们分别转换为Set集合（set1、set2和set3）。接下来，我们使用set1的retainAll()方法依次取交集，并将结果存储回set1中。最后，我们打印出set1中的元素，即为重复出现的元素。</p>\n<p>可以将此代码用于任意数量的列表，只需将它们添加到数组中并转换为Set集合，并使用Set的retainAll()方法依次取交集即可。这种方法是集合依次取交集，list1 和 list3 重复的元素就不能打印出。</p>\n<p>方法2：使用Stream.of()方法将它们转换为一个Stream。接下来，我们使用flatMap()方法将所有元素连接到一个单独的Stream中，并使用groupingBy()方法将它们分组并计算它们的出现次数。然后，我们过滤出出现次数大于1的元素，并使用map()方法将它们转换为一个List集合。最后，我们打印出这个List集合，即为重复出现的元素。</p>\n<p>这种方法的好处是代码简洁、易于阅读和理解，并且在处理大型数据集时具有较好的性能。</p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>多个集合快速找出重复数据的两种方法</p>\n<h1 id=\"多个集合如何取出交集-重复的数据\"><a href=\"#多个集合如何取出交集-重复的数据\" class=\"headerlink\" title=\"多个集合如何取出交集 (重复的数据)\"></a>多个集合如何取出交集 (重复的数据)</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Stream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CollectionDuplicates</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法1</span></span><br><span class=\"line\">        List&lt;Integer&gt; list1 = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; list2 = Arrays.asList(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">        List&lt;Integer&gt; list3 = Arrays.asList(<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Set&lt;Integer&gt; set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list1);</span><br><span class=\"line\">        Set&lt;Integer&gt; set2 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list2);</span><br><span class=\"line\">        Set&lt;Integer&gt; set3 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(list3);</span><br><span class=\"line\"></span><br><span class=\"line\">        set1.retainAll(set2);</span><br><span class=\"line\">        set1.retainAll(set3);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重复元素: &quot;</span> + set1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        List&lt;Integer&gt; duplicates = Stream.of(list1, list2, list3)</span><br><span class=\"line\">                .flatMap(Collection::stream)</span><br><span class=\"line\">                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))</span><br><span class=\"line\">                .entrySet()</span><br><span class=\"line\">                .stream()</span><br><span class=\"line\">                .filter(e -&gt; e.getValue() &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                .map(Map.Entry::getKey)</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;重复元素: &quot;</span> + duplicates);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重复元素: [5]</span><br><span class=\"line\">重复元素: [4, 5, 6, 8]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>方法1：三个List集合（list1、list2和list3），然后将它们分别转换为Set集合（set1、set2和set3）。接下来，我们使用set1的retainAll()方法依次取交集，并将结果存储回set1中。最后，我们打印出set1中的元素，即为重复出现的元素。</p>\n<p>可以将此代码用于任意数量的列表，只需将它们添加到数组中并转换为Set集合，并使用Set的retainAll()方法依次取交集即可。这种方法是集合依次取交集，list1 和 list3 重复的元素就不能打印出。</p>\n<p>方法2：使用Stream.of()方法将它们转换为一个Stream。接下来，我们使用flatMap()方法将所有元素连接到一个单独的Stream中，并使用groupingBy()方法将它们分组并计算它们的出现次数。然后，我们过滤出出现次数大于1的元素，并使用map()方法将它们转换为一个List集合。最后，我们打印出这个List集合，即为重复出现的元素。</p>\n<p>这种方法的好处是代码简洁、易于阅读和理解，并且在处理大型数据集时具有较好的性能。</p>\n"},{"title":"List集合去重的五种方法","abbrlink":"6f8b73d","date":"2023-05-07T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"### List 去重的五种方法\n\n**一、借助 Set 的特性进行去重**\n\n```java\n/**\n* 去除重复数据\n* 由于Set的无序性，不会保持原来顺序\n* @param list\n*/\npublic static List<String> distinct(List<String> list) {\n    final boolean sta = null != list && list.size() > 0;\n    List doubleList= new ArrayList();\n    if (sta) {\n        Set set = new HashSet();\n        set.addAll(list);\n        doubleList.addAll(set);\n    }\n    return doubleList;\n}\n```\n\n**二、利用 Set 集合特性保持顺序一直去重**\n\n```java\n// Set去重并保持原先顺序的两种方法\npublic static void delRepeat(List<String> list) {\n    //方法一\n    List<String> listNew = new ArrayList<String>(new TreeSet<String>(list));\n    //方法二\n    List<String> listNew2 = new ArrayList<String>(new LinkedHashSet<String>(list));\n}\n```\n\n**三、使用 List 自身方法 remove() -> 不推荐**\n\n```java\n/**\n* 去除重复数据(一般不推荐)\n* 类似于冒泡排序思想\n* @param list\n*/\npublic static List<Map<String, Object>> distinct(List<Map<String, Object>> list) {\n    if (null != list && list.size() > 0) {\n        //循环list集合\n        for  ( int  i  =   0 ; i  <  list.size()  -   1 ; i ++ )  {\n            for  ( int  j  =  list.size()  -   1 ; j  >  i; j -- )  {\n                // 这里是对象的比较，如果去重条件不一样，在这里修改即可\n                if  (list.get(j).equals(list.get(i)))  {\n                    list.remove(j);\n                }\n            }\n        }\n    }\n    //得到最新移除重复元素的list\n    return list;\n}\n```\n\n**四、遍历 List 集合，将元素添加到另一个 List 集合中**\n\n```java\n// 遍历后判断赋给另一个list集合，保持原来顺序\npublic static List<String> delRepeat(List<String> list) {\n   List<String> listNew = new ArrayList<String>();\n   for (String str : list) {\n        if (!listNew.contains(str)) {\n            listNew.add(str);\n        }\n    }\n   return listNew ;\n}\n```\n\n**五、使用 Java8 特性去重**\n\n```java\npublic static List<String> delRepeat(List<String> list) {\n     List<String> myList = list.stream().distinct().collect(Collectors.toList());\n  return myList ;\n}\n```\n\n\n\n\n\n\n","source":"_posts/20220507List集合去重的五种方法.md","raw":"---\ntitle: List集合去重的五种方法\ntags: List\ncategories: 后端\nabbrlink: 6f8b73d\ndate: 2023-05-07 16:22:35\ncover:\n---\n### List 去重的五种方法\n\n**一、借助 Set 的特性进行去重**\n\n```java\n/**\n* 去除重复数据\n* 由于Set的无序性，不会保持原来顺序\n* @param list\n*/\npublic static List<String> distinct(List<String> list) {\n    final boolean sta = null != list && list.size() > 0;\n    List doubleList= new ArrayList();\n    if (sta) {\n        Set set = new HashSet();\n        set.addAll(list);\n        doubleList.addAll(set);\n    }\n    return doubleList;\n}\n```\n\n**二、利用 Set 集合特性保持顺序一直去重**\n\n```java\n// Set去重并保持原先顺序的两种方法\npublic static void delRepeat(List<String> list) {\n    //方法一\n    List<String> listNew = new ArrayList<String>(new TreeSet<String>(list));\n    //方法二\n    List<String> listNew2 = new ArrayList<String>(new LinkedHashSet<String>(list));\n}\n```\n\n**三、使用 List 自身方法 remove() -> 不推荐**\n\n```java\n/**\n* 去除重复数据(一般不推荐)\n* 类似于冒泡排序思想\n* @param list\n*/\npublic static List<Map<String, Object>> distinct(List<Map<String, Object>> list) {\n    if (null != list && list.size() > 0) {\n        //循环list集合\n        for  ( int  i  =   0 ; i  <  list.size()  -   1 ; i ++ )  {\n            for  ( int  j  =  list.size()  -   1 ; j  >  i; j -- )  {\n                // 这里是对象的比较，如果去重条件不一样，在这里修改即可\n                if  (list.get(j).equals(list.get(i)))  {\n                    list.remove(j);\n                }\n            }\n        }\n    }\n    //得到最新移除重复元素的list\n    return list;\n}\n```\n\n**四、遍历 List 集合，将元素添加到另一个 List 集合中**\n\n```java\n// 遍历后判断赋给另一个list集合，保持原来顺序\npublic static List<String> delRepeat(List<String> list) {\n   List<String> listNew = new ArrayList<String>();\n   for (String str : list) {\n        if (!listNew.contains(str)) {\n            listNew.add(str);\n        }\n    }\n   return listNew ;\n}\n```\n\n**五、使用 Java8 特性去重**\n\n```java\npublic static List<String> delRepeat(List<String> list) {\n     List<String> myList = list.stream().distinct().collect(Collectors.toList());\n  return myList ;\n}\n```\n\n\n\n\n\n\n","slug":"20220507List集合去重的五种方法","published":1,"updated":"2023-05-12T11:18:04.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxb000nw0uh52f01hvk","content":"<h3 id=\"List-去重的五种方法\"><a href=\"#List-去重的五种方法\" class=\"headerlink\" title=\"List 去重的五种方法\"></a>List 去重的五种方法</h3><p><strong>一、借助 Set 的特性进行去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 去除重复数据</span></span><br><span class=\"line\"><span class=\"comment\">* 由于Set的无序性，不会保持原来顺序</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">distinct</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">sta</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    List doubleList= <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sta) &#123;</span><br><span class=\"line\">        <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        set.addAll(list);</span><br><span class=\"line\">        doubleList.addAll(set);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二、利用 Set 集合特性保持顺序一直去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set去重并保持原先顺序的两种方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//方法一</span></span><br><span class=\"line\">    List&lt;String&gt; listNew = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;String&gt;(list));</span><br><span class=\"line\">    <span class=\"comment\">//方法二</span></span><br><span class=\"line\">    List&lt;String&gt; listNew2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;String&gt;(list));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三、使用 List 自身方法 remove() -&gt; 不推荐</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 去除重复数据(一般不推荐)</span></span><br><span class=\"line\"><span class=\"comment\">* 类似于冒泡排序思想</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">distinct</span><span class=\"params\">(List&lt;Map&lt;String, Object&gt;&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//循环list集合</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>  ( <span class=\"type\">int</span>  <span class=\"variable\">i</span>  <span class=\"operator\">=</span>   <span class=\"number\">0</span> ; i  &lt;  list.size()  -   <span class=\"number\">1</span> ; i ++ )  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>  ( <span class=\"type\">int</span>  <span class=\"variable\">j</span>  <span class=\"operator\">=</span>  list.size()  -   <span class=\"number\">1</span> ; j  &gt;  i; j -- )  &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里是对象的比较，如果去重条件不一样，在这里修改即可</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>  (list.get(j).equals(list.get(i)))  &#123;</span><br><span class=\"line\">                    list.remove(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//得到最新移除重复元素的list</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>四、遍历 List 集合，将元素添加到另一个 List 集合中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历后判断赋给另一个list集合，保持原来顺序</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">   List&lt;String&gt; listNew = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (String str : list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!listNew.contains(str)) &#123;</span><br><span class=\"line\">            listNew.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> listNew ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>五、使用 Java8 特性去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">     List&lt;String&gt; myList = list.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myList ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"List-去重的五种方法\"><a href=\"#List-去重的五种方法\" class=\"headerlink\" title=\"List 去重的五种方法\"></a>List 去重的五种方法</h3><p><strong>一、借助 Set 的特性进行去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 去除重复数据</span></span><br><span class=\"line\"><span class=\"comment\">* 由于Set的无序性，不会保持原来顺序</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">distinct</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">sta</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    List doubleList= <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sta) &#123;</span><br><span class=\"line\">        <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>();</span><br><span class=\"line\">        set.addAll(list);</span><br><span class=\"line\">        doubleList.addAll(set);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> doubleList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>二、利用 Set 集合特性保持顺序一直去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set去重并保持原先顺序的两种方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//方法一</span></span><br><span class=\"line\">    List&lt;String&gt; listNew = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">TreeSet</span>&lt;String&gt;(list));</span><br><span class=\"line\">    <span class=\"comment\">//方法二</span></span><br><span class=\"line\">    List&lt;String&gt; listNew2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;String&gt;(list));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三、使用 List 自身方法 remove() -&gt; 不推荐</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 去除重复数据(一般不推荐)</span></span><br><span class=\"line\"><span class=\"comment\">* 类似于冒泡排序思想</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">distinct</span><span class=\"params\">(List&lt;Map&lt;String, Object&gt;&gt; list)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != list &amp;&amp; list.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//循环list集合</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>  ( <span class=\"type\">int</span>  <span class=\"variable\">i</span>  <span class=\"operator\">=</span>   <span class=\"number\">0</span> ; i  &lt;  list.size()  -   <span class=\"number\">1</span> ; i ++ )  &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>  ( <span class=\"type\">int</span>  <span class=\"variable\">j</span>  <span class=\"operator\">=</span>  list.size()  -   <span class=\"number\">1</span> ; j  &gt;  i; j -- )  &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 这里是对象的比较，如果去重条件不一样，在这里修改即可</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>  (list.get(j).equals(list.get(i)))  &#123;</span><br><span class=\"line\">                    list.remove(j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//得到最新移除重复元素的list</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>四、遍历 List 集合，将元素添加到另一个 List 集合中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历后判断赋给另一个list集合，保持原来顺序</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">   List&lt;String&gt; listNew = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (String str : list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!listNew.contains(str)) &#123;</span><br><span class=\"line\">            listNew.add(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> listNew ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>五、使用 Java8 特性去重</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title function_\">delRepeat</span><span class=\"params\">(List&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">     List&lt;String&gt; myList = list.stream().distinct().collect(Collectors.toList());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myList ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"abbrlink":"24593a1d","title":"Linux服务器redis部署","date":"2023-05-03T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"## Redis安装和配置\n\n1、首先在官网下载好`redis-6.0.9.tar.gz` [http://redis.io/](https://redis.io/)\n\n2、下载使用上传到阿里云，这里时放到  `/usr/localhost/java/ ` 目录下\n\n3、进入到 `/usr/localhost/java/ `目录，开始解压安装\n\n```bash\ntar -zxvf redis-6.0.9.tar.gz\n\n#进入到redis-6.0.9目录执行make命令\nmake\n#注意：这里执行make的时候可能会报错，这是可能没有gcc的原因，需要安装，命令为\nyum install gcc-c++\n\n#再次执行make命令，执行时先清除上次没安装成功的一些make内容\nmake distclean\nmake \nmake install\n\n#注意：这里gcc版本过低，也会导致安装不成功\n\n#查看gcc版本\ngcc -v  \n#升级gcc版本，依次执行已下命令升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\n#以上为临时使用，需要长期使用需要执行一下命令\necho \"source /opt/rh/devtoolset-9/enable\" >>/etc/profile\n```\n\n4、安装完成之后会默认在`/usr/local/bin`下生成一下 `redis` 的可执行文件，为了方便可以在 `redis-6.0.9` 建一个 `bin` 目录，把 `redis` 这些可执行文件都放到bin目录下，方便执行。\n\n执行`./redis-server`命令\n\n出现 `Ready to accept connections`，说明已经启动成功\n\n5、连接redis执行`./redis-cli`\n\n6、这时 `redis` 已经安装成功，我们来进行设置 `redis.conf` 配置文件：\n\n- `redis` 默认是本机访问，其他地方无法连接，需要把这个注释掉`#bind 127.0.0.1`改成`bind 0.0.0.0` \n\n- 设置后台启动 `redis` 服务 `daemonize` 设置为 `yes`\n\n- 执行后台启动`./redis-server redis.conf`\n\n- `appendonly` 是 `redis` 持久化默认为 `no`，需要改为 `yes`\n\n- `redis` 远程连接后，输入命令出现 `Error：Server closed the connection`，不需要登陆密码，改为 `no`\n\n  ```bash\n  protected-mode no\n  ```\n\n```bash\n#常用命令\n#后台启动的两种方式\n./redis-server redis.conf \nnohup ./redis-server redis.conf &\nnohup ./redis-server  redis.conf  >> /usr/local/java/redis-6.0.9/logs/redis.log  2>&1 &\n#后台验证redis是否在启动\nps -ef |grep redis 或 ps aux | grep redis\n#查看端口是否在监听\nnetstat -lntp | grep 6379\n#关闭客户端\nredis-cli shutdown\n```\n\n- Redis持久化报错\n\n```bash\nredis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.\n```\n\n```bash\n#将stop-writes-on-bgsave-error设置为no\n127.0.0.1:6379> config set stop-writes-on-bgsave-error no\n或者进入redis.conf改no\n```\n\n- 注意：如果 `redis` 不设置登录密码在服务器上会出现 `key` 丢失情况，设置密码\n\n- 在 `redis` 中所有的 `key` 都变成 `backup` 是因为 `redis` 暴漏在公网ip下，没有设置密码，遭到恶意请求\n\n- 如果出现一下错误修改 `protected-mode  yes` 改为：`protected-mode no`，密码太短也有可能会出现这个问题\n\n```java\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 192.168.43.129:6379\n```\n\n## Redis Docker 安装测试\n\ndocker官方文档安装方式：`https://hub.docker.com/_/redis`\n\n```bash\n# 拉取最新镜像\ndocker pull redis:latest\n# 启动\ndocker run --name myredis -p6379:6379 --restart=always -d redis:latest --requirepass \"test123456\"\n# redis 使用命令行设置密码和持久化方式\ndocker run --name myredis -v /data/redis/data:/data \\\n-p 6379:6379 -d redis:latest --requirepass \"test123456\" --appendonly yes \n\n# 指定配置文件启动\ndocker run --name myredis -v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf --requirepass \"test123456\" --appendonly yes \n\n\n\n# redis 使用自定义配置方式启动，如果要修改配置文件直接修改\ndocker run --name myredis \\\n-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf \n```\n\n\n\n\n\n\n","source":"_posts/20220503Linux服务器redis部署.md","raw":"---\nabbrlink: 24593a1d\ntitle: Linux服务器redis部署\ntags: redis\ncategories: 后端\ndate: 2023-05-03 16:22:35\ncover:\n---\n## Redis安装和配置\n\n1、首先在官网下载好`redis-6.0.9.tar.gz` [http://redis.io/](https://redis.io/)\n\n2、下载使用上传到阿里云，这里时放到  `/usr/localhost/java/ ` 目录下\n\n3、进入到 `/usr/localhost/java/ `目录，开始解压安装\n\n```bash\ntar -zxvf redis-6.0.9.tar.gz\n\n#进入到redis-6.0.9目录执行make命令\nmake\n#注意：这里执行make的时候可能会报错，这是可能没有gcc的原因，需要安装，命令为\nyum install gcc-c++\n\n#再次执行make命令，执行时先清除上次没安装成功的一些make内容\nmake distclean\nmake \nmake install\n\n#注意：这里gcc版本过低，也会导致安装不成功\n\n#查看gcc版本\ngcc -v  \n#升级gcc版本，依次执行已下命令升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\n#以上为临时使用，需要长期使用需要执行一下命令\necho \"source /opt/rh/devtoolset-9/enable\" >>/etc/profile\n```\n\n4、安装完成之后会默认在`/usr/local/bin`下生成一下 `redis` 的可执行文件，为了方便可以在 `redis-6.0.9` 建一个 `bin` 目录，把 `redis` 这些可执行文件都放到bin目录下，方便执行。\n\n执行`./redis-server`命令\n\n出现 `Ready to accept connections`，说明已经启动成功\n\n5、连接redis执行`./redis-cli`\n\n6、这时 `redis` 已经安装成功，我们来进行设置 `redis.conf` 配置文件：\n\n- `redis` 默认是本机访问，其他地方无法连接，需要把这个注释掉`#bind 127.0.0.1`改成`bind 0.0.0.0` \n\n- 设置后台启动 `redis` 服务 `daemonize` 设置为 `yes`\n\n- 执行后台启动`./redis-server redis.conf`\n\n- `appendonly` 是 `redis` 持久化默认为 `no`，需要改为 `yes`\n\n- `redis` 远程连接后，输入命令出现 `Error：Server closed the connection`，不需要登陆密码，改为 `no`\n\n  ```bash\n  protected-mode no\n  ```\n\n```bash\n#常用命令\n#后台启动的两种方式\n./redis-server redis.conf \nnohup ./redis-server redis.conf &\nnohup ./redis-server  redis.conf  >> /usr/local/java/redis-6.0.9/logs/redis.log  2>&1 &\n#后台验证redis是否在启动\nps -ef |grep redis 或 ps aux | grep redis\n#查看端口是否在监听\nnetstat -lntp | grep 6379\n#关闭客户端\nredis-cli shutdown\n```\n\n- Redis持久化报错\n\n```bash\nredis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.\n```\n\n```bash\n#将stop-writes-on-bgsave-error设置为no\n127.0.0.1:6379> config set stop-writes-on-bgsave-error no\n或者进入redis.conf改no\n```\n\n- 注意：如果 `redis` 不设置登录密码在服务器上会出现 `key` 丢失情况，设置密码\n\n- 在 `redis` 中所有的 `key` 都变成 `backup` 是因为 `redis` 暴漏在公网ip下，没有设置密码，遭到恶意请求\n\n- 如果出现一下错误修改 `protected-mode  yes` 改为：`protected-mode no`，密码太短也有可能会出现这个问题\n\n```java\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 192.168.43.129:6379\n```\n\n## Redis Docker 安装测试\n\ndocker官方文档安装方式：`https://hub.docker.com/_/redis`\n\n```bash\n# 拉取最新镜像\ndocker pull redis:latest\n# 启动\ndocker run --name myredis -p6379:6379 --restart=always -d redis:latest --requirepass \"test123456\"\n# redis 使用命令行设置密码和持久化方式\ndocker run --name myredis -v /data/redis/data:/data \\\n-p 6379:6379 -d redis:latest --requirepass \"test123456\" --appendonly yes \n\n# 指定配置文件启动\ndocker run --name myredis -v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf --requirepass \"test123456\" --appendonly yes \n\n\n\n# redis 使用自定义配置方式启动，如果要修改配置文件直接修改\ndocker run --name myredis \\\n-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf \n```\n\n\n\n\n\n\n","slug":"20220503Linux服务器redis部署","published":1,"updated":"2023-05-12T11:38:48.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxd000rw0uhcjvjaoy3","content":"<h2 id=\"Redis安装和配置\"><a href=\"#Redis安装和配置\" class=\"headerlink\" title=\"Redis安装和配置\"></a>Redis安装和配置</h2><p>1、首先在官网下载好<code>redis-6.0.9.tar.gz</code> <a href=\"https://redis.io/\">http://redis.io/</a></p>\n<p>2、下载使用上传到阿里云，这里时放到  <code>/usr/localhost/java/ </code> 目录下</p>\n<p>3、进入到 <code>/usr/localhost/java/ </code>目录，开始解压安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到redis-6.0.9目录执行make命令</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\">#注意：这里执行make的时候可能会报错，这是可能没有gcc的原因，需要安装，命令为</span></span><br><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次执行make命令，执行时先清除上次没安装成功的一些make内容</span></span><br><span class=\"line\">make distclean</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意：这里gcc版本过低，也会导致安装不成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看gcc版本</span></span><br><span class=\"line\">gcc -v  </span><br><span class=\"line\"><span class=\"comment\">#升级gcc版本，依次执行已下命令升级gcc</span></span><br><span class=\"line\">yum -y install centos-release-scl</span><br><span class=\"line\">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class=\"line\"><span class=\"comment\">#以上为临时使用，需要长期使用需要执行一下命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>4、安装完成之后会默认在<code>/usr/local/bin</code>下生成一下 <code>redis</code> 的可执行文件，为了方便可以在 <code>redis-6.0.9</code> 建一个 <code>bin</code> 目录，把 <code>redis</code> 这些可执行文件都放到bin目录下，方便执行。</p>\n<p>执行<code>./redis-server</code>命令</p>\n<p>出现 <code>Ready to accept connections</code>，说明已经启动成功</p>\n<p>5、连接redis执行<code>./redis-cli</code></p>\n<p>6、这时 <code>redis</code> 已经安装成功，我们来进行设置 <code>redis.conf</code> 配置文件：</p>\n<ul>\n<li><p><code>redis</code> 默认是本机访问，其他地方无法连接，需要把这个注释掉<code>#bind 127.0.0.1</code>改成<code>bind 0.0.0.0</code> </p>\n</li>\n<li><p>设置后台启动 <code>redis</code> 服务 <code>daemonize</code> 设置为 <code>yes</code></p>\n</li>\n<li><p>执行后台启动<code>./redis-server redis.conf</code></p>\n</li>\n<li><p><code>appendonly</code> 是 <code>redis</code> 持久化默认为 <code>no</code>，需要改为 <code>yes</code></p>\n</li>\n<li><p><code>redis</code> 远程连接后，输入命令出现 <code>Error：Server closed the connection</code>，不需要登陆密码，改为 <code>no</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected-mode no</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常用命令</span></span><br><span class=\"line\"><span class=\"comment\">#后台启动的两种方式</span></span><br><span class=\"line\">./redis-server redis.conf </span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./redis-server redis.conf &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./redis-server  redis.conf  &gt;&gt; /usr/local/java/redis-6.0.9/logs/redis.log  2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台验证redis是否在启动</span></span><br><span class=\"line\">ps -ef |grep redis 或 ps aux | grep redis</span><br><span class=\"line\"><span class=\"comment\">#查看端口是否在监听</span></span><br><span class=\"line\">netstat -lntp | grep 6379</span><br><span class=\"line\"><span class=\"comment\">#关闭客户端</span></span><br><span class=\"line\">redis-cli shutdown</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Redis持久化报错</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data <span class=\"built_in\">set</span> are disabled, because this instance is configured to report errors during writes <span class=\"keyword\">if</span> RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs <span class=\"keyword\">for</span> details about the RDB error.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将stop-writes-on-bgsave-error设置为no</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> stop-writes-on-bgsave-error no</span><br><span class=\"line\">或者进入redis.conf改no</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注意：如果 <code>redis</code> 不设置登录密码在服务器上会出现 <code>key</code> 丢失情况，设置密码</p>\n</li>\n<li><p>在 <code>redis</code> 中所有的 <code>key</code> 都变成 <code>backup</code> 是因为 <code>redis</code> 暴漏在公网ip下，没有设置密码，遭到恶意请求</p>\n</li>\n<li><p>如果出现一下错误修改 <code>protected-mode  yes</code> 改为：<code>protected-mode no</code>，密码太短也有可能会出现这个问题</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to <span class=\"number\">192.168</span><span class=\"number\">.43</span><span class=\"number\">.129</span>:<span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-Docker-安装测试\"><a href=\"#Redis-Docker-安装测试\" class=\"headerlink\" title=\"Redis Docker 安装测试\"></a>Redis Docker 安装测试</h2><p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新镜像</span></span><br><span class=\"line\">docker pull redis:latest</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">docker run --name myredis -p6379:6379 --restart=always -d redis:latest --requirepass <span class=\"string\">&quot;test123456&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># redis 使用命令行设置密码和持久化方式</span></span><br><span class=\"line\">docker run --name myredis -v /data/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 -d redis:latest --requirepass <span class=\"string\">&quot;test123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定配置文件启动</span></span><br><span class=\"line\">docker run --name myredis -v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf --requirepass <span class=\"string\">&quot;test123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class=\"line\">docker run --name myredis \\</span><br><span class=\"line\">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"Redis安装和配置\"><a href=\"#Redis安装和配置\" class=\"headerlink\" title=\"Redis安装和配置\"></a>Redis安装和配置</h2><p>1、首先在官网下载好<code>redis-6.0.9.tar.gz</code> <a href=\"https://redis.io/\">http://redis.io/</a></p>\n<p>2、下载使用上传到阿里云，这里时放到  <code>/usr/localhost/java/ </code> 目录下</p>\n<p>3、进入到 <code>/usr/localhost/java/ </code>目录，开始解压安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进入到redis-6.0.9目录执行make命令</span></span><br><span class=\"line\">make</span><br><span class=\"line\"><span class=\"comment\">#注意：这里执行make的时候可能会报错，这是可能没有gcc的原因，需要安装，命令为</span></span><br><span class=\"line\">yum install gcc-c++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次执行make命令，执行时先清除上次没安装成功的一些make内容</span></span><br><span class=\"line\">make distclean</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#注意：这里gcc版本过低，也会导致安装不成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看gcc版本</span></span><br><span class=\"line\">gcc -v  </span><br><span class=\"line\"><span class=\"comment\">#升级gcc版本，依次执行已下命令升级gcc</span></span><br><span class=\"line\">yum -y install centos-release-scl</span><br><span class=\"line\">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class=\"line\"><span class=\"comment\">#以上为临时使用，需要长期使用需要执行一下命令</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>4、安装完成之后会默认在<code>/usr/local/bin</code>下生成一下 <code>redis</code> 的可执行文件，为了方便可以在 <code>redis-6.0.9</code> 建一个 <code>bin</code> 目录，把 <code>redis</code> 这些可执行文件都放到bin目录下，方便执行。</p>\n<p>执行<code>./redis-server</code>命令</p>\n<p>出现 <code>Ready to accept connections</code>，说明已经启动成功</p>\n<p>5、连接redis执行<code>./redis-cli</code></p>\n<p>6、这时 <code>redis</code> 已经安装成功，我们来进行设置 <code>redis.conf</code> 配置文件：</p>\n<ul>\n<li><p><code>redis</code> 默认是本机访问，其他地方无法连接，需要把这个注释掉<code>#bind 127.0.0.1</code>改成<code>bind 0.0.0.0</code> </p>\n</li>\n<li><p>设置后台启动 <code>redis</code> 服务 <code>daemonize</code> 设置为 <code>yes</code></p>\n</li>\n<li><p>执行后台启动<code>./redis-server redis.conf</code></p>\n</li>\n<li><p><code>appendonly</code> 是 <code>redis</code> 持久化默认为 <code>no</code>，需要改为 <code>yes</code></p>\n</li>\n<li><p><code>redis</code> 远程连接后，输入命令出现 <code>Error：Server closed the connection</code>，不需要登陆密码，改为 <code>no</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected-mode no</span><br></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#常用命令</span></span><br><span class=\"line\"><span class=\"comment\">#后台启动的两种方式</span></span><br><span class=\"line\">./redis-server redis.conf </span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./redis-server redis.conf &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> ./redis-server  redis.conf  &gt;&gt; /usr/local/java/redis-6.0.9/logs/redis.log  2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"comment\">#后台验证redis是否在启动</span></span><br><span class=\"line\">ps -ef |grep redis 或 ps aux | grep redis</span><br><span class=\"line\"><span class=\"comment\">#查看端口是否在监听</span></span><br><span class=\"line\">netstat -lntp | grep 6379</span><br><span class=\"line\"><span class=\"comment\">#关闭客户端</span></span><br><span class=\"line\">redis-cli shutdown</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Redis持久化报错</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.exceptions.ResponseError: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data <span class=\"built_in\">set</span> are disabled, because this instance is configured to report errors during writes <span class=\"keyword\">if</span> RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs <span class=\"keyword\">for</span> details about the RDB error.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将stop-writes-on-bgsave-error设置为no</span></span><br><span class=\"line\">127.0.0.1:6379&gt; config <span class=\"built_in\">set</span> stop-writes-on-bgsave-error no</span><br><span class=\"line\">或者进入redis.conf改no</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注意：如果 <code>redis</code> 不设置登录密码在服务器上会出现 <code>key</code> 丢失情况，设置密码</p>\n</li>\n<li><p>在 <code>redis</code> 中所有的 <code>key</code> 都变成 <code>backup</code> 是因为 <code>redis</code> 暴漏在公网ip下，没有设置密码，遭到恶意请求</p>\n</li>\n<li><p>如果出现一下错误修改 <code>protected-mode  yes</code> 改为：<code>protected-mode no</code>，密码太短也有可能会出现这个问题</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to <span class=\"number\">192.168</span><span class=\"number\">.43</span><span class=\"number\">.129</span>:<span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Redis-Docker-安装测试\"><a href=\"#Redis-Docker-安装测试\" class=\"headerlink\" title=\"Redis Docker 安装测试\"></a>Redis Docker 安装测试</h2><p>docker官方文档安装方式：<code>https://hub.docker.com/_/redis</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拉取最新镜像</span></span><br><span class=\"line\">docker pull redis:latest</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">docker run --name myredis -p6379:6379 --restart=always -d redis:latest --requirepass <span class=\"string\">&quot;test123456&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># redis 使用命令行设置密码和持久化方式</span></span><br><span class=\"line\">docker run --name myredis -v /data/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 -d redis:latest --requirepass <span class=\"string\">&quot;test123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定配置文件启动</span></span><br><span class=\"line\">docker run --name myredis -v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf --requirepass <span class=\"string\">&quot;test123456&quot;</span> --appendonly <span class=\"built_in\">yes</span> </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># redis 使用自定义配置方式启动，如果要修改配置文件直接修改</span></span><br><span class=\"line\">docker run --name myredis \\</span><br><span class=\"line\">-v /data/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data -p 6379:6379 -d redis:latest redis-server /etc/redis/redis.conf </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"常用集合初始化方法","abbrlink":"5ae5e555","date":"2023-05-08T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"## 1、常规方式\n\n```java\nList<String> languages = new ArrayList<>();\nlanguages.add(\"张\");\nlanguages.add(\"李\");\nlanguages.add(\"王\");\nSystem.out.println(languages);\n```\n\n## 2、Arrays 工具类\n\n```java\nList<String> jdks = Arrays.asList(\"JDK6\", \"JDK8\", \"JDK10\");\nSystem.out.println(jdks);\n```\n\n这种方式添加的是不可变的 List, 即不能添加、删除等操作，需要警惕。。\n\n如果要可变，那就使用 ArrayList 再包装一下，如下面所示。\n\n```java\nList<String> numbers = new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\"));\nnumbers.add(\"4\");\nSystem.out.println(numbers);\n```\n\n## 3、Collections 工具类\n\n```java\nList<String> apples = Collections.nCopies(3, \"apple\");\nSystem.out.println(apples);\n```\n\n这种方式添加的是不可变的、复制某个元素N遍的工具类：\n\n```java\nList<String> dogs = new ArrayList<>(Collections.nCopies(3, \"dog\"));\ndogs.add(\"dog\");\nSystem.out.println(dogs);\n```\n\n还有初始化单个对象的 List 工具类，这种方式也是不可变的，集合内只能有一个元素，这种也用得很少啊。\n\n```java\nList<String> cat = Collections.singletonList(\"cat\");\nSystem.out.println(cat);\n```\n\n还有一个创建空 List 的工具类，没有默认容量，节省空间，但不知道实际工作中有什么鸟用。\n\n```java\nList<String> cat = Collections.emptyList(\"cat\");\n```\n\n## 4、匿名内部类\n\n```java\nList<String> names = new ArrayList<>() {{\n    add(\"Tom\");\n    add(\"Sally\");\n    add(\"John\");\n}};\nSystem.out.println(names);\n```\n\n## 5、JDK8 Stream\n\n```java\nList<String> colors = Stream.of(\"blue\", \"red\", \"yellow\").collect(toList());\nSystem.out.println(colors);\n```\n\n## 6、JDK 9 List.of\n\n```java\nList<String> cups = List.of(\"A\", \"B\", \"C\");\nSystem.out.println(cups);\n```\n\n## 7、guava\n\n```bash\n// 使用ImmutableList初始化一个List,是不可变集合，不能进行删除\nList<String> list = ImmutableList.of(\"Hollis\", \"hollis\", \"HollisChuang\", \"H\");\n```","source":"_posts/20220508常用集合初始化方法.md","raw":"---\ntitle: 常用集合初始化方法\ntags: List\ncategories: 后端\nabbrlink: 5ae5e555\ndate: 2023-05-08 16:22:35\ncover:\n---\n## 1、常规方式\n\n```java\nList<String> languages = new ArrayList<>();\nlanguages.add(\"张\");\nlanguages.add(\"李\");\nlanguages.add(\"王\");\nSystem.out.println(languages);\n```\n\n## 2、Arrays 工具类\n\n```java\nList<String> jdks = Arrays.asList(\"JDK6\", \"JDK8\", \"JDK10\");\nSystem.out.println(jdks);\n```\n\n这种方式添加的是不可变的 List, 即不能添加、删除等操作，需要警惕。。\n\n如果要可变，那就使用 ArrayList 再包装一下，如下面所示。\n\n```java\nList<String> numbers = new ArrayList<>(Arrays.asList(\"1\", \"2\", \"3\"));\nnumbers.add(\"4\");\nSystem.out.println(numbers);\n```\n\n## 3、Collections 工具类\n\n```java\nList<String> apples = Collections.nCopies(3, \"apple\");\nSystem.out.println(apples);\n```\n\n这种方式添加的是不可变的、复制某个元素N遍的工具类：\n\n```java\nList<String> dogs = new ArrayList<>(Collections.nCopies(3, \"dog\"));\ndogs.add(\"dog\");\nSystem.out.println(dogs);\n```\n\n还有初始化单个对象的 List 工具类，这种方式也是不可变的，集合内只能有一个元素，这种也用得很少啊。\n\n```java\nList<String> cat = Collections.singletonList(\"cat\");\nSystem.out.println(cat);\n```\n\n还有一个创建空 List 的工具类，没有默认容量，节省空间，但不知道实际工作中有什么鸟用。\n\n```java\nList<String> cat = Collections.emptyList(\"cat\");\n```\n\n## 4、匿名内部类\n\n```java\nList<String> names = new ArrayList<>() {{\n    add(\"Tom\");\n    add(\"Sally\");\n    add(\"John\");\n}};\nSystem.out.println(names);\n```\n\n## 5、JDK8 Stream\n\n```java\nList<String> colors = Stream.of(\"blue\", \"red\", \"yellow\").collect(toList());\nSystem.out.println(colors);\n```\n\n## 6、JDK 9 List.of\n\n```java\nList<String> cups = List.of(\"A\", \"B\", \"C\");\nSystem.out.println(cups);\n```\n\n## 7、guava\n\n```bash\n// 使用ImmutableList初始化一个List,是不可变集合，不能进行删除\nList<String> list = ImmutableList.of(\"Hollis\", \"hollis\", \"HollisChuang\", \"H\");\n```","slug":"20220508常用集合初始化方法","published":1,"updated":"2023-05-12T11:18:04.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxd000uw0uh57q4ecco","content":"<h2 id=\"1、常规方式\"><a href=\"#1、常规方式\" class=\"headerlink\" title=\"1、常规方式\"></a>1、常规方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; languages = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;张&quot;</span>);</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;李&quot;</span>);</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;王&quot;</span>);</span><br><span class=\"line\">System.out.println(languages);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Arrays-工具类\"><a href=\"#2、Arrays-工具类\" class=\"headerlink\" title=\"2、Arrays 工具类\"></a>2、Arrays 工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; jdks = Arrays.asList(<span class=\"string\">&quot;JDK6&quot;</span>, <span class=\"string\">&quot;JDK8&quot;</span>, <span class=\"string\">&quot;JDK10&quot;</span>);</span><br><span class=\"line\">System.out.println(jdks);</span><br></pre></td></tr></table></figure>\n\n<p>这种方式添加的是不可变的 List, 即不能添加、删除等操作，需要警惕。。</p>\n<p>如果要可变，那就使用 ArrayList 再包装一下，如下面所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">numbers.add(<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">System.out.println(numbers);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、Collections-工具类\"><a href=\"#3、Collections-工具类\" class=\"headerlink\" title=\"3、Collections 工具类\"></a>3、Collections 工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; apples = Collections.nCopies(<span class=\"number\">3</span>, <span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">System.out.println(apples);</span><br></pre></td></tr></table></figure>\n\n<p>这种方式添加的是不可变的、复制某个元素N遍的工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Collections.nCopies(<span class=\"number\">3</span>, <span class=\"string\">&quot;dog&quot;</span>));</span><br><span class=\"line\">dogs.add(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">System.out.println(dogs);</span><br></pre></td></tr></table></figure>\n\n<p>还有初始化单个对象的 List 工具类，这种方式也是不可变的，集合内只能有一个元素，这种也用得很少啊。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cat = Collections.singletonList(<span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\">System.out.println(cat);</span><br></pre></td></tr></table></figure>\n\n<p>还有一个创建空 List 的工具类，没有默认容量，节省空间，但不知道实际工作中有什么鸟用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cat = Collections.emptyList(<span class=\"string\">&quot;cat&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、匿名内部类\"><a href=\"#4、匿名内部类\" class=\"headerlink\" title=\"4、匿名内部类\"></a>4、匿名内部类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;() &#123;&#123;</span><br><span class=\"line\">    add(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    add(<span class=\"string\">&quot;Sally&quot;</span>);</span><br><span class=\"line\">    add(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\">System.out.println(names);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、JDK8-Stream\"><a href=\"#5、JDK8-Stream\" class=\"headerlink\" title=\"5、JDK8 Stream\"></a>5、JDK8 Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; colors = Stream.of(<span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>).collect(toList());</span><br><span class=\"line\">System.out.println(colors);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、JDK-9-List-of\"><a href=\"#6、JDK-9-List-of\" class=\"headerlink\" title=\"6、JDK 9 List.of\"></a>6、JDK 9 List.of</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cups = List.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">System.out.println(cups);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、guava\"><a href=\"#7、guava\" class=\"headerlink\" title=\"7、guava\"></a>7、guava</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用ImmutableList初始化一个List,是不可变集合，不能进行删除</span><br><span class=\"line\">List&lt;String&gt; list = ImmutableList.of(<span class=\"string\">&quot;Hollis&quot;</span>, <span class=\"string\">&quot;hollis&quot;</span>, <span class=\"string\">&quot;HollisChuang&quot;</span>, <span class=\"string\">&quot;H&quot;</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"1、常规方式\"><a href=\"#1、常规方式\" class=\"headerlink\" title=\"1、常规方式\"></a>1、常规方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; languages = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;张&quot;</span>);</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;李&quot;</span>);</span><br><span class=\"line\">languages.add(<span class=\"string\">&quot;王&quot;</span>);</span><br><span class=\"line\">System.out.println(languages);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、Arrays-工具类\"><a href=\"#2、Arrays-工具类\" class=\"headerlink\" title=\"2、Arrays 工具类\"></a>2、Arrays 工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; jdks = Arrays.asList(<span class=\"string\">&quot;JDK6&quot;</span>, <span class=\"string\">&quot;JDK8&quot;</span>, <span class=\"string\">&quot;JDK10&quot;</span>);</span><br><span class=\"line\">System.out.println(jdks);</span><br></pre></td></tr></table></figure>\n\n<p>这种方式添加的是不可变的 List, 即不能添加、删除等操作，需要警惕。。</p>\n<p>如果要可变，那就使用 ArrayList 再包装一下，如下面所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>));</span><br><span class=\"line\">numbers.add(<span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">System.out.println(numbers);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3、Collections-工具类\"><a href=\"#3、Collections-工具类\" class=\"headerlink\" title=\"3、Collections 工具类\"></a>3、Collections 工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; apples = Collections.nCopies(<span class=\"number\">3</span>, <span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">System.out.println(apples);</span><br></pre></td></tr></table></figure>\n\n<p>这种方式添加的是不可变的、复制某个元素N遍的工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; dogs = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Collections.nCopies(<span class=\"number\">3</span>, <span class=\"string\">&quot;dog&quot;</span>));</span><br><span class=\"line\">dogs.add(<span class=\"string\">&quot;dog&quot;</span>);</span><br><span class=\"line\">System.out.println(dogs);</span><br></pre></td></tr></table></figure>\n\n<p>还有初始化单个对象的 List 工具类，这种方式也是不可变的，集合内只能有一个元素，这种也用得很少啊。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cat = Collections.singletonList(<span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\">System.out.println(cat);</span><br></pre></td></tr></table></figure>\n\n<p>还有一个创建空 List 的工具类，没有默认容量，节省空间，但不知道实际工作中有什么鸟用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cat = Collections.emptyList(<span class=\"string\">&quot;cat&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4、匿名内部类\"><a href=\"#4、匿名内部类\" class=\"headerlink\" title=\"4、匿名内部类\"></a>4、匿名内部类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;() &#123;&#123;</span><br><span class=\"line\">    add(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">    add(<span class=\"string\">&quot;Sally&quot;</span>);</span><br><span class=\"line\">    add(<span class=\"string\">&quot;John&quot;</span>);</span><br><span class=\"line\">&#125;&#125;;</span><br><span class=\"line\">System.out.println(names);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5、JDK8-Stream\"><a href=\"#5、JDK8-Stream\" class=\"headerlink\" title=\"5、JDK8 Stream\"></a>5、JDK8 Stream</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; colors = Stream.of(<span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>).collect(toList());</span><br><span class=\"line\">System.out.println(colors);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、JDK-9-List-of\"><a href=\"#6、JDK-9-List-of\" class=\"headerlink\" title=\"6、JDK 9 List.of\"></a>6、JDK 9 List.of</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; cups = List.of(<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">System.out.println(cups);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7、guava\"><a href=\"#7、guava\" class=\"headerlink\" title=\"7、guava\"></a>7、guava</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用ImmutableList初始化一个List,是不可变集合，不能进行删除</span><br><span class=\"line\">List&lt;String&gt; list = ImmutableList.of(<span class=\"string\">&quot;Hollis&quot;</span>, <span class=\"string\">&quot;hollis&quot;</span>, <span class=\"string\">&quot;HollisChuang&quot;</span>, <span class=\"string\">&quot;H&quot;</span>);</span><br></pre></td></tr></table></figure>"},{"title":"Nginx 负载均衡机制实现用户无感更新服务","abbrlink":"d1d4b46a","date":"2023-05-11T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"项目用户数量比较多时，项目发布时用户不能访问，对用户来说体验很不好，对企业来说来说也是一种损失，如何无感知平滑稳定的升级，下面开始介绍。\n\n当前文章用的方法是，后端服务器配置多个节点：在 `Nginx` 配置中使用反向代理配置将流量分发到这些后端服务器。下面是通过备用节点的方式实现，也可以通过调整反向代理的权重，逐渐将流量从旧版本的服务节点转移到新版本的服务节点实现。\n\n### 环境准备\n\n前后端项目部署可参考：[手把手教你部署前后端分离项目](https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA)\n\n### 后端节点部署\n\n后端部署三个节点，一个用于备用节点，分别在服务器项目目录下依次执行以下命令\n\n```bash\nnohup java -jar ruoyi-admin.jar --server.port=8080 >nohup.out 2>&1 &\nnohup java -jar ruoyi-admin.jar --server.port=8081 >nohup1.out 2>&1 &\nnohup java -jar ruoyi-admin.jar --server.port=8082 >nohup2.out 2>&1 &\n```\n\n查看是否启动成功，一种是直接查看 `nuhuo.out` 日志，另一种是浏览器访问 `http://ip:8080/swagger-ui/index.html` 出现接口文档地址则说明成功\n\n### 配置 upstream\n\n添加 `backup` 表示这台服务器是备用服务器，只有其他服务器都停机时才会启用，更新节点也是利用这一特点\n\nupstream 中节点 down 之后，会自动剔除，新的请求会分配到正常能访问的节点\n\n`weight=2` 表示权重占比为 `2/3`，每 3 次请求会转发 2 次到这台服务器上\n\n`weight=1` 表示权重占比为 `1/3`，每 3 次请求会转发 1 次到这台服务器上\n\n```bash\nupstream backend {\n    # 权重为2，max_fails=3 fail_timeout=20s表示最大失败3次，20s之内则不会向该节点发送请求\n    server localhost:8080 weight=2 max_fails=3 fail_timeout=20s;\n    server localhost:8081 weight=1;\n    server localhost:8082 backup;\n}\n```\n\n### 修改 proxy_pass 代理地址\n\n代理地址替换为 `upstream` 后的 `backend` 即可\n\n```\nproxy_pass http://backend/;\n```\n\n### 重启 Nginx\n\n1. 这里是用 `tar` 包安装的，在 `sbin`目录下， 检查 `nginx` 配置是否正确，输入 `./nginx -t`，出现下列内容则说明配置是正确的\n\n   ```bash\n   [root@aliyun sbin]# ./nginx -t\n   nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok\n   nginx: configuration file /data/nginx/conf/nginx.conf test is successful\n   ```\n\n2. 重启 `nginx`\n\n   ```bash\n   ./nginx -s reload\n   ```\n\n### 测试\n\n访问项目默地址登录之后，这里是 http://ip，每次请求 `nohup.out` 都会有日志打印，把 8080 和 8081 的服务都停掉，你会发现 8082 的服务才启用，这是 8082 服务会接收所有请求的流量\n\n依次替换项目包进行升级，重新启动服务即可\n\n`Nginx` 域名证书配置可参考：[服务器 Nginx 配置域名和证书](https://mp.weixin.qq.com/s/cWQlbMJNm0Uw6ssp7BWErw)\n\n\n","source":"_posts/20220511Nginx负载均衡机制实现用户无感更新服务.md","raw":"---\ntitle: Nginx 负载均衡机制实现用户无感更新服务\ntags: nginx\ncategories: 后端\nabbrlink: d1d4b46a\ndate: 2023-05-11 16:22:35\ncover:\n---\n项目用户数量比较多时，项目发布时用户不能访问，对用户来说体验很不好，对企业来说来说也是一种损失，如何无感知平滑稳定的升级，下面开始介绍。\n\n当前文章用的方法是，后端服务器配置多个节点：在 `Nginx` 配置中使用反向代理配置将流量分发到这些后端服务器。下面是通过备用节点的方式实现，也可以通过调整反向代理的权重，逐渐将流量从旧版本的服务节点转移到新版本的服务节点实现。\n\n### 环境准备\n\n前后端项目部署可参考：[手把手教你部署前后端分离项目](https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA)\n\n### 后端节点部署\n\n后端部署三个节点，一个用于备用节点，分别在服务器项目目录下依次执行以下命令\n\n```bash\nnohup java -jar ruoyi-admin.jar --server.port=8080 >nohup.out 2>&1 &\nnohup java -jar ruoyi-admin.jar --server.port=8081 >nohup1.out 2>&1 &\nnohup java -jar ruoyi-admin.jar --server.port=8082 >nohup2.out 2>&1 &\n```\n\n查看是否启动成功，一种是直接查看 `nuhuo.out` 日志，另一种是浏览器访问 `http://ip:8080/swagger-ui/index.html` 出现接口文档地址则说明成功\n\n### 配置 upstream\n\n添加 `backup` 表示这台服务器是备用服务器，只有其他服务器都停机时才会启用，更新节点也是利用这一特点\n\nupstream 中节点 down 之后，会自动剔除，新的请求会分配到正常能访问的节点\n\n`weight=2` 表示权重占比为 `2/3`，每 3 次请求会转发 2 次到这台服务器上\n\n`weight=1` 表示权重占比为 `1/3`，每 3 次请求会转发 1 次到这台服务器上\n\n```bash\nupstream backend {\n    # 权重为2，max_fails=3 fail_timeout=20s表示最大失败3次，20s之内则不会向该节点发送请求\n    server localhost:8080 weight=2 max_fails=3 fail_timeout=20s;\n    server localhost:8081 weight=1;\n    server localhost:8082 backup;\n}\n```\n\n### 修改 proxy_pass 代理地址\n\n代理地址替换为 `upstream` 后的 `backend` 即可\n\n```\nproxy_pass http://backend/;\n```\n\n### 重启 Nginx\n\n1. 这里是用 `tar` 包安装的，在 `sbin`目录下， 检查 `nginx` 配置是否正确，输入 `./nginx -t`，出现下列内容则说明配置是正确的\n\n   ```bash\n   [root@aliyun sbin]# ./nginx -t\n   nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok\n   nginx: configuration file /data/nginx/conf/nginx.conf test is successful\n   ```\n\n2. 重启 `nginx`\n\n   ```bash\n   ./nginx -s reload\n   ```\n\n### 测试\n\n访问项目默地址登录之后，这里是 http://ip，每次请求 `nohup.out` 都会有日志打印，把 8080 和 8081 的服务都停掉，你会发现 8082 的服务才启用，这是 8082 服务会接收所有请求的流量\n\n依次替换项目包进行升级，重新启动服务即可\n\n`Nginx` 域名证书配置可参考：[服务器 Nginx 配置域名和证书](https://mp.weixin.qq.com/s/cWQlbMJNm0Uw6ssp7BWErw)\n\n\n","slug":"20220511Nginx负载均衡机制实现用户无感更新服务","published":1,"updated":"2023-05-12T11:18:04.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxe000xw0uh7zzbeb26","content":"<p>项目用户数量比较多时，项目发布时用户不能访问，对用户来说体验很不好，对企业来说来说也是一种损失，如何无感知平滑稳定的升级，下面开始介绍。</p>\n<p>当前文章用的方法是，后端服务器配置多个节点：在 <code>Nginx</code> 配置中使用反向代理配置将流量分发到这些后端服务器。下面是通过备用节点的方式实现，也可以通过调整反向代理的权重，逐渐将流量从旧版本的服务节点转移到新版本的服务节点实现。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>前后端项目部署可参考：<a href=\"https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA\">手把手教你部署前后端分离项目</a></p>\n<h3 id=\"后端节点部署\"><a href=\"#后端节点部署\" class=\"headerlink\" title=\"后端节点部署\"></a>后端节点部署</h3><p>后端部署三个节点，一个用于备用节点，分别在服务器项目目录下依次执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8080 &gt;nohup.out 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8081 &gt;nohup1.out 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8082 &gt;nohup2.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否启动成功，一种是直接查看 <code>nuhuo.out</code> 日志，另一种是浏览器访问 <code>http://ip:8080/swagger-ui/index.html</code> 出现接口文档地址则说明成功</p>\n<h3 id=\"配置-upstream\"><a href=\"#配置-upstream\" class=\"headerlink\" title=\"配置 upstream\"></a>配置 upstream</h3><p>添加 <code>backup</code> 表示这台服务器是备用服务器，只有其他服务器都停机时才会启用，更新节点也是利用这一特点</p>\n<p>upstream 中节点 down 之后，会自动剔除，新的请求会分配到正常能访问的节点</p>\n<p><code>weight=2</code> 表示权重占比为 <code>2/3</code>，每 3 次请求会转发 2 次到这台服务器上</p>\n<p><code>weight=1</code> 表示权重占比为 <code>1/3</code>，每 3 次请求会转发 1 次到这台服务器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 权重为2，max_fails=3 fail_timeout=20s表示最大失败3次，20s之内则不会向该节点发送请求</span></span><br><span class=\"line\">    server localhost:8080 weight=2 max_fails=3 fail_timeout=20s;</span><br><span class=\"line\">    server localhost:8081 weight=1;</span><br><span class=\"line\">    server localhost:8082 backup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-proxy-pass-代理地址\"><a href=\"#修改-proxy-pass-代理地址\" class=\"headerlink\" title=\"修改 proxy_pass 代理地址\"></a>修改 proxy_pass 代理地址</h3><p>代理地址替换为 <code>upstream</code> 后的 <code>backend</code> 即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://backend/;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启-Nginx\"><a href=\"#重启-Nginx\" class=\"headerlink\" title=\"重启 Nginx\"></a>重启 Nginx</h3><ol>\n<li><p>这里是用 <code>tar</code> 包安装的，在 <code>sbin</code>目录下， 检查 <code>nginx</code> 配置是否正确，输入 <code>./nginx -t</code>，出现下列内容则说明配置是正确的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun sbin]<span class=\"comment\"># ./nginx -t</span></span><br><span class=\"line\">nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /data/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 <code>nginx</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>访问项目默地址登录之后，这里是 <a href=\"http://ip,每次请求/\">http://ip，每次请求</a> <code>nohup.out</code> 都会有日志打印，把 8080 和 8081 的服务都停掉，你会发现 8082 的服务才启用，这是 8082 服务会接收所有请求的流量</p>\n<p>依次替换项目包进行升级，重新启动服务即可</p>\n<p><code>Nginx</code> 域名证书配置可参考：<a href=\"https://mp.weixin.qq.com/s/cWQlbMJNm0Uw6ssp7BWErw\">服务器 Nginx 配置域名和证书</a></p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>项目用户数量比较多时，项目发布时用户不能访问，对用户来说体验很不好，对企业来说来说也是一种损失，如何无感知平滑稳定的升级，下面开始介绍。</p>\n<p>当前文章用的方法是，后端服务器配置多个节点：在 <code>Nginx</code> 配置中使用反向代理配置将流量分发到这些后端服务器。下面是通过备用节点的方式实现，也可以通过调整反向代理的权重，逐渐将流量从旧版本的服务节点转移到新版本的服务节点实现。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>前后端项目部署可参考：<a href=\"https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA\">手把手教你部署前后端分离项目</a></p>\n<h3 id=\"后端节点部署\"><a href=\"#后端节点部署\" class=\"headerlink\" title=\"后端节点部署\"></a>后端节点部署</h3><p>后端部署三个节点，一个用于备用节点，分别在服务器项目目录下依次执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8080 &gt;nohup.out 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8081 &gt;nohup1.out 2&gt;&amp;1 &amp;</span><br><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ruoyi-admin.jar --server.port=8082 &gt;nohup2.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否启动成功，一种是直接查看 <code>nuhuo.out</code> 日志，另一种是浏览器访问 <code>http://ip:8080/swagger-ui/index.html</code> 出现接口文档地址则说明成功</p>\n<h3 id=\"配置-upstream\"><a href=\"#配置-upstream\" class=\"headerlink\" title=\"配置 upstream\"></a>配置 upstream</h3><p>添加 <code>backup</code> 表示这台服务器是备用服务器，只有其他服务器都停机时才会启用，更新节点也是利用这一特点</p>\n<p>upstream 中节点 down 之后，会自动剔除，新的请求会分配到正常能访问的节点</p>\n<p><code>weight=2</code> 表示权重占比为 <code>2/3</code>，每 3 次请求会转发 2 次到这台服务器上</p>\n<p><code>weight=1</code> 表示权重占比为 <code>1/3</code>，每 3 次请求会转发 1 次到这台服务器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream backend &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 权重为2，max_fails=3 fail_timeout=20s表示最大失败3次，20s之内则不会向该节点发送请求</span></span><br><span class=\"line\">    server localhost:8080 weight=2 max_fails=3 fail_timeout=20s;</span><br><span class=\"line\">    server localhost:8081 weight=1;</span><br><span class=\"line\">    server localhost:8082 backup;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-proxy-pass-代理地址\"><a href=\"#修改-proxy-pass-代理地址\" class=\"headerlink\" title=\"修改 proxy_pass 代理地址\"></a>修改 proxy_pass 代理地址</h3><p>代理地址替换为 <code>upstream</code> 后的 <code>backend</code> 即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass http://backend/;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启-Nginx\"><a href=\"#重启-Nginx\" class=\"headerlink\" title=\"重启 Nginx\"></a>重启 Nginx</h3><ol>\n<li><p>这里是用 <code>tar</code> 包安装的，在 <code>sbin</code>目录下， 检查 <code>nginx</code> 配置是否正确，输入 <code>./nginx -t</code>，出现下列内容则说明配置是正确的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@aliyun sbin]<span class=\"comment\"># ./nginx -t</span></span><br><span class=\"line\">nginx: the configuration file /data/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /data/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启 <code>nginx</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s reload</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>访问项目默地址登录之后，这里是 <a href=\"http://ip,每次请求/\">http://ip，每次请求</a> <code>nohup.out</code> 都会有日志打印，把 8080 和 8081 的服务都停掉，你会发现 8082 的服务才启用，这是 8082 服务会接收所有请求的流量</p>\n<p>依次替换项目包进行升级，重新启动服务即可</p>\n<p><code>Nginx</code> 域名证书配置可参考：<a href=\"https://mp.weixin.qq.com/s/cWQlbMJNm0Uw6ssp7BWErw\">服务器 Nginx 配置域名和证书</a></p>\n"},{"title":"服务器Nginx配置域名和证书","abbrlink":"7ee9b5","date":"2023-05-10T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"项目开发完成后，将项目部署到服务器上时，为了保证安全性和加密通信，我们通常会配置 `Nginx` 作为反向代理服务器，并使用域名证书启用 `HTTPS`。下面将为你指导 `Nginx` 如何配置域名和证书。\n\n### 环境准备\n\n域名准备，提前准备好域名或重新申请一个新的域名，域名解析到你部署项目的服务器。下载好` Nginx` 对应的证书，这里我用的阿里云，一个域名可以申请 20 个免费的证书（推荐）。\n\n前后端项目部署可参考这篇文章：[手把手教你部署前后端分离项目](https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA)\n\n### 上传证书\n\n在安装 `Nginx` 的目录下创建一个 `ssl` 的文件夹，证书一开始下载后是一个 `zpi` 的压缩包，上传解压修改证书配置对应的目录即可。\n\n有些服务器没有 `zip` 和 `unzip` 的以来和命令，执行以下一行命令\n\n```\nyum install -y zip unzip\n```\n\n### 配置 ssl 及证书\n\nssl 配置说明，修改 `linsten` 对应的端口和 `server_name` 对应的域名\n\n```bash\n# 修改监听的端口，注意不要忘了加 ssl\nlisten  443 default ssl;\n# 域名可以有多个，用逗号隔开\nserver_name  xxxxx.top;\n\n# 配置域名证书\nssl_certificate         /data/nginx/ssl/sjy.pem; \nssl_certificate_key     /data/nginx/ssl/sjy.key;\n# 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）\nssl_session_cache  shared:SSL:1m;\n\n#  SSL 会话的过期时间 默认5分钟\nssl_session_timeout 5m;\n# SSL/TLS 协议版本，可以指定多个，以空格分开\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n# 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off\nssl_prefer_server_ciphers on;\n# 加密算法的优先顺序\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n```\n\n### Nginx 完整配置\n\n可直接使用，修改对应的文件目录即可\n\n```bash\nuser  root;\nworker_processes  auto;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n # 开启gzip压缩\n gzip on;\n # 不压缩临界值，大于1K的才压缩，一般不用改\n gzip_min_length 1k;\n # 压缩缓冲区\n gzip_buffers 16 64K;\n # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n gzip_http_version 1.1;\n # 压缩级别，1-10，数字越大压缩的越好，时间也越长\n gzip_comp_level 5;\n # 进行压缩的文件类型\n gzip_types text/plain application/x-javascript text/css application/xml application/javascript;\n # 跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\"\n gzip_vary on;\n # IE6对Gzip不怎么友好，不给它Gzip了\n gzip_disable \"MSIE [1-6]\\.\";\n\n # 配置 80 端口\n    server {\n        listen       80;\n  # 域名可以有多个，用逗号隔开,把 xxxx 替换成对应域名即可，不许加 http www\n  server_name  xxxxx.com; \n  # HTTP 自动跳转 HTTPS\n  rewrite ^(.*) https://$server_name$1 permanent;\n  charset utf-8;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n         error_page   500 502 503 504  /50x.html;\n         location = /50x.html {\n         root   html;\n        }\n    }\n \n # 配置 443 端口\n server {\n        listen  443 default ssl;\n  # 域名可以有多个，用逗号隔开，把 xxxx 替换成对应域名即可，不许加 http www\n  server_name  xxxxx.com;\n  charset utf-8;\n  \n  \n        # 配置域名证书\n        ssl_certificate         /data/nginx/ssl/sjy.pem; \n        ssl_certificate_key     /data/nginx/ssl/sjy.key;\n        # 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）\n        ssl_session_cache  shared:SSL:1m;\n\n  #  SSL 会话的过期时间 默认5分钟\n        ssl_session_timeout 5m;\n        # SSL/TLS 协议版本，可以指定多个，以空格分开\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n        # 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off\n        ssl_prefer_server_ciphers on;\n        # 加密算法的优先顺序\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        \n        \n        proxy_set_header    Host                  $host;\n        proxy_set_header    X-Real-IP             $remote_addr;\n        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;\n     proxy_set_header    X-Forwarded-Proto     $scheme;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n         location = /50x.html {\n         root   html;\n        }\n    }\n}\n```\n\n替换配置后，重新加载一个 `nginx.conf` 的配置文件，浏览器能正常访问则说明配置成功\n\n### Nginx 常用命令\n\n```bash\n# 首先进入 nginx 可执行文件目录，我这是是安装到 /data/nginx/sbin 目录下\ncd /data/nginx/sbin\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/data/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n\n\n\n\n\n","source":"_posts/20220510服务器Nginx配置域名和证书.md","raw":"---\ntitle: 服务器Nginx配置域名和证书\ntags: nginx\ncategories: 后端\nabbrlink: 7ee9b5\ndate: 2023-05-10 16:22:35\ncover:\n---\n项目开发完成后，将项目部署到服务器上时，为了保证安全性和加密通信，我们通常会配置 `Nginx` 作为反向代理服务器，并使用域名证书启用 `HTTPS`。下面将为你指导 `Nginx` 如何配置域名和证书。\n\n### 环境准备\n\n域名准备，提前准备好域名或重新申请一个新的域名，域名解析到你部署项目的服务器。下载好` Nginx` 对应的证书，这里我用的阿里云，一个域名可以申请 20 个免费的证书（推荐）。\n\n前后端项目部署可参考这篇文章：[手把手教你部署前后端分离项目](https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA)\n\n### 上传证书\n\n在安装 `Nginx` 的目录下创建一个 `ssl` 的文件夹，证书一开始下载后是一个 `zpi` 的压缩包，上传解压修改证书配置对应的目录即可。\n\n有些服务器没有 `zip` 和 `unzip` 的以来和命令，执行以下一行命令\n\n```\nyum install -y zip unzip\n```\n\n### 配置 ssl 及证书\n\nssl 配置说明，修改 `linsten` 对应的端口和 `server_name` 对应的域名\n\n```bash\n# 修改监听的端口，注意不要忘了加 ssl\nlisten  443 default ssl;\n# 域名可以有多个，用逗号隔开\nserver_name  xxxxx.top;\n\n# 配置域名证书\nssl_certificate         /data/nginx/ssl/sjy.pem; \nssl_certificate_key     /data/nginx/ssl/sjy.key;\n# 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）\nssl_session_cache  shared:SSL:1m;\n\n#  SSL 会话的过期时间 默认5分钟\nssl_session_timeout 5m;\n# SSL/TLS 协议版本，可以指定多个，以空格分开\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n# 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off\nssl_prefer_server_ciphers on;\n# 加密算法的优先顺序\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n```\n\n### Nginx 完整配置\n\n可直接使用，修改对应的文件目录即可\n\n```bash\nuser  root;\nworker_processes  auto;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n # 开启gzip压缩\n gzip on;\n # 不压缩临界值，大于1K的才压缩，一般不用改\n gzip_min_length 1k;\n # 压缩缓冲区\n gzip_buffers 16 64K;\n # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n gzip_http_version 1.1;\n # 压缩级别，1-10，数字越大压缩的越好，时间也越长\n gzip_comp_level 5;\n # 进行压缩的文件类型\n gzip_types text/plain application/x-javascript text/css application/xml application/javascript;\n # 跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\"\n gzip_vary on;\n # IE6对Gzip不怎么友好，不给它Gzip了\n gzip_disable \"MSIE [1-6]\\.\";\n\n # 配置 80 端口\n    server {\n        listen       80;\n  # 域名可以有多个，用逗号隔开,把 xxxx 替换成对应域名即可，不许加 http www\n  server_name  xxxxx.com; \n  # HTTP 自动跳转 HTTPS\n  rewrite ^(.*) https://$server_name$1 permanent;\n  charset utf-8;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n         error_page   500 502 503 504  /50x.html;\n         location = /50x.html {\n         root   html;\n        }\n    }\n \n # 配置 443 端口\n server {\n        listen  443 default ssl;\n  # 域名可以有多个，用逗号隔开，把 xxxx 替换成对应域名即可，不许加 http www\n  server_name  xxxxx.com;\n  charset utf-8;\n  \n  \n        # 配置域名证书\n        ssl_certificate         /data/nginx/ssl/sjy.pem; \n        ssl_certificate_key     /data/nginx/ssl/sjy.key;\n        # 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）\n        ssl_session_cache  shared:SSL:1m;\n\n  #  SSL 会话的过期时间 默认5分钟\n        ssl_session_timeout 5m;\n        # SSL/TLS 协议版本，可以指定多个，以空格分开\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n        # 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off\n        ssl_prefer_server_ciphers on;\n        # 加密算法的优先顺序\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        \n        \n        proxy_set_header    Host                  $host;\n        proxy_set_header    X-Real-IP             $remote_addr;\n        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;\n     proxy_set_header    X-Forwarded-Proto     $scheme;\n\n  location / {\n            root   /data/pro/front/ruoyi-ui;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n  \n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_pass http://localhost:8080/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n         location = /50x.html {\n         root   html;\n        }\n    }\n}\n```\n\n替换配置后，重新加载一个 `nginx.conf` 的配置文件，浏览器能正常访问则说明配置成功\n\n### Nginx 常用命令\n\n```bash\n# 首先进入 nginx 可执行文件目录，我这是是安装到 /data/nginx/sbin 目录下\ncd /data/nginx/sbin\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/data/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n\n\n\n\n\n","slug":"20220510服务器Nginx配置域名和证书","published":1,"updated":"2023-05-12T11:18:04.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxf0010w0uh9yixht9p","content":"<p>项目开发完成后，将项目部署到服务器上时，为了保证安全性和加密通信，我们通常会配置 <code>Nginx</code> 作为反向代理服务器，并使用域名证书启用 <code>HTTPS</code>。下面将为你指导 <code>Nginx</code> 如何配置域名和证书。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>域名准备，提前准备好域名或重新申请一个新的域名，域名解析到你部署项目的服务器。下载好<code> Nginx</code> 对应的证书，这里我用的阿里云，一个域名可以申请 20 个免费的证书（推荐）。</p>\n<p>前后端项目部署可参考这篇文章：<a href=\"https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA\">手把手教你部署前后端分离项目</a></p>\n<h3 id=\"上传证书\"><a href=\"#上传证书\" class=\"headerlink\" title=\"上传证书\"></a>上传证书</h3><p>在安装 <code>Nginx</code> 的目录下创建一个 <code>ssl</code> 的文件夹，证书一开始下载后是一个 <code>zpi</code> 的压缩包，上传解压修改证书配置对应的目录即可。</p>\n<p>有些服务器没有 <code>zip</code> 和 <code>unzip</code> 的以来和命令，执行以下一行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zip unzip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-ssl-及证书\"><a href=\"#配置-ssl-及证书\" class=\"headerlink\" title=\"配置 ssl 及证书\"></a>配置 ssl 及证书</h3><p>ssl 配置说明，修改 <code>linsten</code> 对应的端口和 <code>server_name</code> 对应的域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改监听的端口，注意不要忘了加 ssl</span></span><br><span class=\"line\">listen  443 default ssl;</span><br><span class=\"line\"><span class=\"comment\"># 域名可以有多个，用逗号隔开</span></span><br><span class=\"line\">server_name  xxxxx.top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置域名证书</span></span><br><span class=\"line\">ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class=\"line\">ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class=\"line\"><span class=\"comment\"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class=\"line\">ssl_session_cache  shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class=\"line\">ssl_session_timeout 5m;</span><br><span class=\"line\"><span class=\"comment\"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\"><span class=\"comment\"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"><span class=\"comment\"># 加密算法的优先顺序</span></span><br><span class=\"line\">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-完整配置\"><a href=\"#Nginx-完整配置\" class=\"headerlink\" title=\"Nginx 完整配置\"></a>Nginx 完整配置</h3><p>可直接使用，修改对应的文件目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root;</span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 开启gzip压缩</span></span><br><span class=\"line\"> gzip on;</span><br><span class=\"line\"> <span class=\"comment\"># 不压缩临界值，大于1K的才压缩，一般不用改</span></span><br><span class=\"line\"> gzip_min_length 1k;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩缓冲区</span></span><br><span class=\"line\"> gzip_buffers 16 64K;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class=\"line\"> gzip_http_version 1.1;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩级别，1-10，数字越大压缩的越好，时间也越长</span></span><br><span class=\"line\"> gzip_comp_level 5;</span><br><span class=\"line\"> <span class=\"comment\"># 进行压缩的文件类型</span></span><br><span class=\"line\"> gzip_types text/plain application/x-javascript text/css application/xml application/javascript;</span><br><span class=\"line\"> <span class=\"comment\"># 跟Squid等缓存服务有关，on的话会在Header里增加&quot;Vary: Accept-Encoding&quot;</span></span><br><span class=\"line\"> gzip_vary on;</span><br><span class=\"line\"> <span class=\"comment\"># IE6对Gzip不怎么友好，不给它Gzip了</span></span><br><span class=\"line\"> gzip_disable <span class=\"string\">&quot;MSIE [1-6]\\.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 配置 80 端口</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">  <span class=\"comment\"># 域名可以有多个，用逗号隔开,把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class=\"line\">  server_name  xxxxx.com; </span><br><span class=\"line\">  <span class=\"comment\"># HTTP 自动跳转 HTTPS</span></span><br><span class=\"line\">  rewrite ^(.*) https://$server_name<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">   proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">         root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 配置 443 端口</span></span><br><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen  443 default ssl;</span><br><span class=\"line\">  <span class=\"comment\"># 域名可以有多个，用逗号隔开，把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class=\"line\">  server_name  xxxxx.com;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 配置域名证书</span></span><br><span class=\"line\">        ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class=\"line\">        ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class=\"line\">        <span class=\"comment\"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class=\"line\">        ssl_session_cache  shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        <span class=\"comment\"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\">        <span class=\"comment\"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        <span class=\"comment\"># 加密算法的优先顺序</span></span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        proxy_set_header    Host                  <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header    X-Real-IP             <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header    X-Forwarded-For       <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">     proxy_set_header    X-Forwarded-Proto     <span class=\"variable\">$scheme</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">   proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">         root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换配置后，重新加载一个 <code>nginx.conf</code> 的配置文件，浏览器能正常访问则说明配置成功</p>\n<h3 id=\"Nginx-常用命令\"><a href=\"#Nginx-常用命令\" class=\"headerlink\" title=\"Nginx 常用命令\"></a>Nginx 常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先进入 nginx 可执行文件目录，我这是是安装到 /data/nginx/sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/nginx/sbin</span><br><span class=\"line\">./nginx  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">./nginx -s stop  <span class=\"comment\"># 停止(暴力停止服务)</span></span><br><span class=\"line\">./nginx -s quit  <span class=\"comment\"># 安全退出(优雅停止服务)</span></span><br><span class=\"line\">./nginx -s reload  <span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">./nginx -h <span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">./nginx -t <span class=\"comment\"># 检查配置文件</span></span><br><span class=\"line\">/data/nginx/conf/nginx.conf <span class=\"comment\"># nginx配置文件路径</span></span><br><span class=\"line\">ps aux|grep nginx  <span class=\"comment\"># 查看nginx进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>项目开发完成后，将项目部署到服务器上时，为了保证安全性和加密通信，我们通常会配置 <code>Nginx</code> 作为反向代理服务器，并使用域名证书启用 <code>HTTPS</code>。下面将为你指导 <code>Nginx</code> 如何配置域名和证书。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>域名准备，提前准备好域名或重新申请一个新的域名，域名解析到你部署项目的服务器。下载好<code> Nginx</code> 对应的证书，这里我用的阿里云，一个域名可以申请 20 个免费的证书（推荐）。</p>\n<p>前后端项目部署可参考这篇文章：<a href=\"https://mp.weixin.qq.com/s/9EI9-n9v1R5lUJHlgSa_GA\">手把手教你部署前后端分离项目</a></p>\n<h3 id=\"上传证书\"><a href=\"#上传证书\" class=\"headerlink\" title=\"上传证书\"></a>上传证书</h3><p>在安装 <code>Nginx</code> 的目录下创建一个 <code>ssl</code> 的文件夹，证书一开始下载后是一个 <code>zpi</code> 的压缩包，上传解压修改证书配置对应的目录即可。</p>\n<p>有些服务器没有 <code>zip</code> 和 <code>unzip</code> 的以来和命令，执行以下一行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zip unzip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-ssl-及证书\"><a href=\"#配置-ssl-及证书\" class=\"headerlink\" title=\"配置 ssl 及证书\"></a>配置 ssl 及证书</h3><p>ssl 配置说明，修改 <code>linsten</code> 对应的端口和 <code>server_name</code> 对应的域名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改监听的端口，注意不要忘了加 ssl</span></span><br><span class=\"line\">listen  443 default ssl;</span><br><span class=\"line\"><span class=\"comment\"># 域名可以有多个，用逗号隔开</span></span><br><span class=\"line\">server_name  xxxxx.top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置域名证书</span></span><br><span class=\"line\">ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class=\"line\">ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class=\"line\"><span class=\"comment\"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class=\"line\">ssl_session_cache  shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class=\"line\">ssl_session_timeout 5m;</span><br><span class=\"line\"><span class=\"comment\"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\"><span class=\"comment\"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class=\"line\">ssl_prefer_server_ciphers on;</span><br><span class=\"line\"><span class=\"comment\"># 加密算法的优先顺序</span></span><br><span class=\"line\">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nginx-完整配置\"><a href=\"#Nginx-完整配置\" class=\"headerlink\" title=\"Nginx 完整配置\"></a>Nginx 完整配置</h3><p>可直接使用，修改对应的文件目录即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  root;</span><br><span class=\"line\">worker_processes  auto;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 开启gzip压缩</span></span><br><span class=\"line\"> gzip on;</span><br><span class=\"line\"> <span class=\"comment\"># 不压缩临界值，大于1K的才压缩，一般不用改</span></span><br><span class=\"line\"> gzip_min_length 1k;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩缓冲区</span></span><br><span class=\"line\"> gzip_buffers 16 64K;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span></span><br><span class=\"line\"> gzip_http_version 1.1;</span><br><span class=\"line\"> <span class=\"comment\"># 压缩级别，1-10，数字越大压缩的越好，时间也越长</span></span><br><span class=\"line\"> gzip_comp_level 5;</span><br><span class=\"line\"> <span class=\"comment\"># 进行压缩的文件类型</span></span><br><span class=\"line\"> gzip_types text/plain application/x-javascript text/css application/xml application/javascript;</span><br><span class=\"line\"> <span class=\"comment\"># 跟Squid等缓存服务有关，on的话会在Header里增加&quot;Vary: Accept-Encoding&quot;</span></span><br><span class=\"line\"> gzip_vary on;</span><br><span class=\"line\"> <span class=\"comment\"># IE6对Gzip不怎么友好，不给它Gzip了</span></span><br><span class=\"line\"> gzip_disable <span class=\"string\">&quot;MSIE [1-6]\\.&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># 配置 80 端口</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">  <span class=\"comment\"># 域名可以有多个，用逗号隔开,把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class=\"line\">  server_name  xxxxx.com; </span><br><span class=\"line\">  <span class=\"comment\"># HTTP 自动跳转 HTTPS</span></span><br><span class=\"line\">  rewrite ^(.*) https://$server_name<span class=\"variable\">$1</span> permanent;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">   proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">         root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\"># 配置 443 端口</span></span><br><span class=\"line\"> server &#123;</span><br><span class=\"line\">        listen  443 default ssl;</span><br><span class=\"line\">  <span class=\"comment\"># 域名可以有多个，用逗号隔开，把 xxxx 替换成对应域名即可，不许加 http www</span></span><br><span class=\"line\">  server_name  xxxxx.com;</span><br><span class=\"line\">  charset utf-8;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\"># 配置域名证书</span></span><br><span class=\"line\">        ssl_certificate         /data/nginx/ssl/sjy.pem; </span><br><span class=\"line\">        ssl_certificate_key     /data/nginx/ssl/sjy.key;</span><br><span class=\"line\">        <span class=\"comment\"># 用于缓存 SSL 会话参数的共享内存区的大小，使用大小单位（例如 10m 表示 10 兆字节）</span></span><br><span class=\"line\">        ssl_session_cache  shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">#  SSL 会话的过期时间 默认5分钟</span></span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        <span class=\"comment\"># SSL/TLS 协议版本，可以指定多个，以空格分开</span></span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\">        <span class=\"comment\"># 指定是否优先使用服务器端加密算法顺序。设置为 on，表示使用服务器端优先的加密算法顺序。默认情况下，该选项为 off</span></span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        <span class=\"comment\"># 加密算法的优先顺序</span></span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        proxy_set_header    Host                  <span class=\"variable\">$host</span>;</span><br><span class=\"line\">        proxy_set_header    X-Real-IP             <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">        proxy_set_header    X-Forwarded-For       <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">     proxy_set_header    X-Forwarded-Proto     <span class=\"variable\">$scheme</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">            root   /data/pro/front/ruoyi-ui;</span><br><span class=\"line\">   try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host <span class=\"variable\">$http_host</span>;</span><br><span class=\"line\">   proxy_set_header X-Real-IP <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST <span class=\"variable\">$remote_addr</span>;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;</span><br><span class=\"line\">   proxy_pass http://localhost:8080/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">         root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>替换配置后，重新加载一个 <code>nginx.conf</code> 的配置文件，浏览器能正常访问则说明配置成功</p>\n<h3 id=\"Nginx-常用命令\"><a href=\"#Nginx-常用命令\" class=\"headerlink\" title=\"Nginx 常用命令\"></a>Nginx 常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首先进入 nginx 可执行文件目录，我这是是安装到 /data/nginx/sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /data/nginx/sbin</span><br><span class=\"line\">./nginx  <span class=\"comment\"># 启动</span></span><br><span class=\"line\">./nginx -s stop  <span class=\"comment\"># 停止(暴力停止服务)</span></span><br><span class=\"line\">./nginx -s quit  <span class=\"comment\"># 安全退出(优雅停止服务)</span></span><br><span class=\"line\">./nginx -s reload  <span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">./nginx -h <span class=\"comment\"># 帮助命令</span></span><br><span class=\"line\">./nginx -t <span class=\"comment\"># 检查配置文件</span></span><br><span class=\"line\">/data/nginx/conf/nginx.conf <span class=\"comment\"># nginx配置文件路径</span></span><br><span class=\"line\">ps aux|grep nginx  <span class=\"comment\"># 查看nginx进程</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"C++栈队列代码","abbrlink":"ab1e3f0","date":"2023-05-14T07:55:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"新建一个栈，读取标准输入 3 个整数 3 4 5，入栈 3 4 5，依次出栈，打印 5 4 3，新建循环队列（Maxsize 为 5），\n读取标准输入 3 4 5 6 7，入队 7 时，队满，打印 false，然后依次出队，输出 3 4 5 6\nInput\n读取标准输入，内容依次是 3 4 5，换行后，接着是 3 4 5 6 7\nOutput\n如果输入是 3 4 5，换行，接着是 3 4 5 6 7，那么输出是\n5 4 3\nfalse\n3 4 5 6\n注意每个数字占用两个字符的位置，5 之前是有一个空格的，第三行的 3 之前也是有一个空格的\n\n\n\n栈、队列出队入队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n // 定义栈\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组\n    int top; // 始终指向栈顶的一个变量\n} SqStack;\n\n// 初始化栈\nvoid initStack(SqStack &S) {\n    S.top = -1;//代表栈为空\n}\n\n// 入栈\nbool push(SqStack &S, ElemType x) {\n    if (S.top == MaxSize - 1) {//数组的大小不能改变，避免访问越界\n        return false;\n    }\n    S.data[++S.top] = x;\n    return true;\n}\n\n// 出栈\nbool pop(SqStack &S, ElemType &x) {\n    if (-1 == S.top) {\n        return false;\n    }\n    x = S.data[S.top--];//后减减，x=S.data[S.top];S.top=S.top-1;\n    return true;\n}\n\n// 定义一个循环队列\ntypedef struct {\n    ElemType data[MaxSize];\n    int front, rear;// 队列头 队列尾\n} SqQueue;\n\n// 初始化\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0;\n}\n\n// 入队\nbool enQueue(SqQueue &Q, ElemType x) {\n    if ((Q.rear + 1) % MaxSize == Q.front) { // 判断是否队满\n        return false;\n    }\n    Q.data[Q.rear] = x;\n    Q.rear = (Q.rear + 1) % MaxSize;\n    return true;\n}\n\n// 出队\nbool deQueue(SqQueue &Q, ElemType &x) {\n    if (Q.rear == Q.front) { // 判断是否为空\n        return false;\n    }\n    x = Q.data[Q.front]; // 先进先出\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqStack S; // 先进后出\n    bool flag;\n    ElemType m; // 用来存放拿出来的元素\n    // 初始化栈\n    initStack(S);\n    // 入队\n    int i, num;\n    for (i = 0; i < 3; i++) {\n        scanf(\"%2d\", &num);\n        push(S, num);\n    }\n    // 出队\n    for (i = 0; i < 3; i++) {\n        pop(S, m);\n        printf(\"%2d\", m);\n    }\n    printf(\"\\n\");\n\n    // 初始化队列\n    SqQueue Q;\n    initQueue(Q);\n    for (i = 0; i < 5; i++)//入队 5 个元素，最后一个元素不会入队成功\n    {\n        scanf(\"%d\", &num);\n        flag = enQueue(Q, num);\n        if (false == flag) {\n            printf(\"false\\n\");\n        }\n    }\n    ElemType element;\n    for (i = 0; i < 4; i++)//出队 4 个元素并打印每一个\n    {\n        deQueue(Q, element);\n        printf(\"%2d\", element);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n","source":"_posts/20230514C++栈队列代码.md","raw":"---\ntitle: C++栈队列代码\ncategories: 数据结构\nabbrlink: ab1e3f0\ndate: 2023-05-14 15:55:35\ntags:\ncover:\n---\n新建一个栈，读取标准输入 3 个整数 3 4 5，入栈 3 4 5，依次出栈，打印 5 4 3，新建循环队列（Maxsize 为 5），\n读取标准输入 3 4 5 6 7，入队 7 时，队满，打印 false，然后依次出队，输出 3 4 5 6\nInput\n读取标准输入，内容依次是 3 4 5，换行后，接着是 3 4 5 6 7\nOutput\n如果输入是 3 4 5，换行，接着是 3 4 5 6 7，那么输出是\n5 4 3\nfalse\n3 4 5 6\n注意每个数字占用两个字符的位置，5 之前是有一个空格的，第三行的 3 之前也是有一个空格的\n\n\n\n栈、队列出队入队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n // 定义栈\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组\n    int top; // 始终指向栈顶的一个变量\n} SqStack;\n\n// 初始化栈\nvoid initStack(SqStack &S) {\n    S.top = -1;//代表栈为空\n}\n\n// 入栈\nbool push(SqStack &S, ElemType x) {\n    if (S.top == MaxSize - 1) {//数组的大小不能改变，避免访问越界\n        return false;\n    }\n    S.data[++S.top] = x;\n    return true;\n}\n\n// 出栈\nbool pop(SqStack &S, ElemType &x) {\n    if (-1 == S.top) {\n        return false;\n    }\n    x = S.data[S.top--];//后减减，x=S.data[S.top];S.top=S.top-1;\n    return true;\n}\n\n// 定义一个循环队列\ntypedef struct {\n    ElemType data[MaxSize];\n    int front, rear;// 队列头 队列尾\n} SqQueue;\n\n// 初始化\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0;\n}\n\n// 入队\nbool enQueue(SqQueue &Q, ElemType x) {\n    if ((Q.rear + 1) % MaxSize == Q.front) { // 判断是否队满\n        return false;\n    }\n    Q.data[Q.rear] = x;\n    Q.rear = (Q.rear + 1) % MaxSize;\n    return true;\n}\n\n// 出队\nbool deQueue(SqQueue &Q, ElemType &x) {\n    if (Q.rear == Q.front) { // 判断是否为空\n        return false;\n    }\n    x = Q.data[Q.front]; // 先进先出\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqStack S; // 先进后出\n    bool flag;\n    ElemType m; // 用来存放拿出来的元素\n    // 初始化栈\n    initStack(S);\n    // 入队\n    int i, num;\n    for (i = 0; i < 3; i++) {\n        scanf(\"%2d\", &num);\n        push(S, num);\n    }\n    // 出队\n    for (i = 0; i < 3; i++) {\n        pop(S, m);\n        printf(\"%2d\", m);\n    }\n    printf(\"\\n\");\n\n    // 初始化队列\n    SqQueue Q;\n    initQueue(Q);\n    for (i = 0; i < 5; i++)//入队 5 个元素，最后一个元素不会入队成功\n    {\n        scanf(\"%d\", &num);\n        flag = enQueue(Q, num);\n        if (false == flag) {\n            printf(\"false\\n\");\n        }\n    }\n    ElemType element;\n    for (i = 0; i < 4; i++)//出队 4 个元素并打印每一个\n    {\n        deQueue(Q, element);\n        printf(\"%2d\", element);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\n```\n\n","slug":"20230514C++栈队列代码","published":1,"updated":"2023-05-14T07:56:55.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxf0012w0uh4xwp6yml","content":"<p>新建一个栈，读取标准输入 3 个整数 3 4 5，入栈 3 4 5，依次出栈，打印 5 4 3，新建循环队列（Maxsize 为 5），<br>读取标准输入 3 4 5 6 7，入队 7 时，队满，打印 false，然后依次出队，输出 3 4 5 6<br>Input<br>读取标准输入，内容依次是 3 4 5，换行后，接着是 3 4 5 6 7<br>Output<br>如果输入是 3 4 5，换行，接着是 3 4 5 6 7，那么输出是<br>5 4 3<br>false<br>3 4 5 6<br>注意每个数字占用两个字符的位置，5 之前是有一个空格的，第三行的 3 之前也是有一个空格的</p>\n<p>栈、队列出队入队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 定义栈</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top; <span class=\"comment\">// 始终指向栈顶的一个变量</span></span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>;<span class=\"comment\">//代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(SqStack &amp;S, ElemType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123;<span class=\"comment\">//数组的大小不能改变，避免访问越界</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = S.data[S.top--];<span class=\"comment\">//后减减，x=S.data[S.top];S.top=S.top-1;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear;<span class=\"comment\">// 队列头 队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123; <span class=\"comment\">// 判断是否队满</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = x;</span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.rear == Q.front) &#123; <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = Q.data[Q.front]; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S; <span class=\"comment\">// 先进后出</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    ElemType m; <span class=\"comment\">// 用来存放拿出来的元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i, num;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%2d&quot;</span>, &amp;num);</span><br><span class=\"line\">        <span class=\"built_in\">push</span>(S, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">pop</span>(S, m);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2d&quot;</span>, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)<span class=\"comment\">//入队 5 个元素，最后一个元素不会入队成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">        flag = <span class=\"built_in\">enQueue</span>(Q, num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> == flag) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType element;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)<span class=\"comment\">//出队 4 个元素并打印每一个</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">deQueue</span>(Q, element);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2d&quot;</span>, element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>新建一个栈，读取标准输入 3 个整数 3 4 5，入栈 3 4 5，依次出栈，打印 5 4 3，新建循环队列（Maxsize 为 5），<br>读取标准输入 3 4 5 6 7，入队 7 时，队满，打印 false，然后依次出队，输出 3 4 5 6<br>Input<br>读取标准输入，内容依次是 3 4 5，换行后，接着是 3 4 5 6 7<br>Output<br>如果输入是 3 4 5，换行，接着是 3 4 5 6 7，那么输出是<br>5 4 3<br>false<br>3 4 5 6<br>注意每个数字占用两个字符的位置，5 之前是有一个空格的，第三行的 3 之前也是有一个空格的</p>\n<p>栈、队列出队入队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 定义栈</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> top; <span class=\"comment\">// 始终指向栈顶的一个变量</span></span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>;<span class=\"comment\">//代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">push</span><span class=\"params\">(SqStack &amp;S, ElemType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123;<span class=\"comment\">//数组的大小不能改变，避免访问越界</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = S.data[S.top--];<span class=\"comment\">//后减减，x=S.data[S.top];S.top=S.top-1;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个循环队列</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear;<span class=\"comment\">// 队列头 队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123; <span class=\"comment\">// 判断是否队满</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = x;</span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.rear == Q.front) &#123; <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = Q.data[Q.front]; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S; <span class=\"comment\">// 先进后出</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    ElemType m; <span class=\"comment\">// 用来存放拿出来的元素</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化栈</span></span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i, num;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%2d&quot;</span>, &amp;num);</span><br><span class=\"line\">        <span class=\"built_in\">push</span>(S, num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">pop</span>(S, m);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2d&quot;</span>, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)<span class=\"comment\">//入队 5 个元素，最后一个元素不会入队成功</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">        flag = <span class=\"built_in\">enQueue</span>(Q, num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> == flag) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType element;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)<span class=\"comment\">//出队 4 个元素并打印每一个</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">deQueue</span>(Q, element);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%2d&quot;</span>, element);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"二叉树层次建树前序中序后序遍历层序遍历代码","abbrlink":"225d868e","date":"2023-05-14T10:55:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"二叉树的建树，层次建树，深度优先遍历，广度优先遍历\n\n二叉树前序、中序、后序遍历\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 定义一个二叉树结构体\ntypedef char BiElemType;\ntypedef struct BiTNode {\n    BiElemType c;\n    struct BiTNode *lchild;\n    struct BiTNode *rchild;\n} BiTNode, *BiTree;\n\n// tag结构体是辅助队列使用的\ntypedef struct tag {\n    BiTree p; // 树的某一个节点的地址值\n    struct tag *pnext;\n} tag_t, *ptag_t;\n\n// 前序遍历，深度优先遍历\nvoid preOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        printf(\"%c\", p->c);\n        preOrder(p->lchild); // 打印左子树\n        preOrder(p->rchild); // 打印右子树\n    }\n}\n\n// 中序遍历\nvoid inOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        inOrder(p->lchild); // 打印左子树\n        printf(\"%c\", p->c);\n        inOrder(p->rchild); // 打印右子树\n    }\n}\n\n// 后续遍历\nvoid posOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        posOrder(p->lchild); // 打印左子树\n        posOrder(p->rchild); // 打印右子树\n        printf(\"%c\", p->c);\n    }\n}\n\n// 队列\ntypedef BiTree ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode *next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode *) malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 判断队列是否为空\nbool isEmptyQueue(LinkQueue Q) {\n    return Q.front == Q.rear;\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode *p = (LinkNode *) malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next = p->next;//断链\n    if (Q.rear == p) {//删除的是最后一个元素\n        Q.rear = Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 层次遍历、层序便来，广度优先遍历\nvoid levelOrder(BiTree T) {\n    LinkQueue Q;\n    initQueue(Q);\n    BiTree p; // 存储出队的节点\n    // 把根节点入队\n    enQueue(Q, T);\n    // 判断队列是否为空\n    while (!isEmptyQueue(Q)) {\n        deQueue(Q, p);\n        putchar(p->c);  // 等价于 printf(\"%c\",c);\n        // 入队\n        if (p->lchild != NULL) {\n            enQueue(Q, p->lchild);\n        }\n        if (p->rchild != NULL) {\n            enQueue(Q, p->rchild);\n        }\n    }\n}\n\n// 二叉树的建树，层次建树\nint main() {\n    BiTree pnew; // 申请一个树的新节点\n    BiTree tree = NULL;  // 指向树根，代表树\n    char c;\n    // phead就是队列头，ptail就是队列尾\n    ptag_t phead = NULL, ptail = NULL, listpnew = NULL, pcur;\n    while (scanf(\"%c\", &c)) {\n        if (c == '\\n') {\n            break;  // 读到换行结束\n        }\n        // calloc申请的空间大小是两个参数直接相乘，并对空间进行初始化，赋值为0\n        pnew = (BiTree) calloc(1, sizeof(BiTNode));\n        // 数据放进去\n        pnew->c = c;\n        // 给队列申请空间\n        listpnew = (ptag_t) calloc(1, sizeof(tag_t));\n        listpnew->p = pnew;\n        // 如果是树的第一个节点\n        if (NULL == tree) {\n            tree = pnew;  // tree指向树的根节点\n            phead = listpnew; // 第一个节点即是队列头，也是队列尾\n            ptail = listpnew; // 队列尾\n            pcur = listpnew; // pcur 要指向要进入树的父亲元素\n        } else {\n            // 让元素先入队列\n            ptail->pnext = listpnew;\n            ptail = listpnew;\n            if (NULL == pcur->p->lchild) {\n                pcur->p->lchild = pnew; // 左孩子为空，就放入左孩子\n            } else if (NULL == pcur->p->rchild) {\n                pcur->p->rchild = pnew;\n                pcur = pcur->pnext; //当前节点左右孩子都有了，pcur就指向下一个\n            }\n        }\n    }\n\n    // 二叉树前序、中序、后续遍历\n    printf(\"--------------preOrder()----------------\\n\");\n    preOrder(tree);\n    printf(\"\\n\");\n    // 中序遍历\n    printf(\"--------------inOrder()-----------------\\n\");\n    inOrder(tree);\n    printf(\"\\n\");\n    // 后续遍历\n    printf(\"--------------posOrder()-----------------\\n\");\n    posOrder(tree);\n\n    printf(\"\\n\");\n    // 层次遍历，广度优先遍历\n    printf(\"--------------levelOrder()-----------------\\n\");\n    levelOrder(tree);\n    printf(\"\\n\");\n    return 0;\n}\n```","source":"_posts/20230514二叉树层次建树前序中序后序遍历层序遍历代码.md","raw":"---\ntitle: 二叉树层次建树前序中序后序遍历层序遍历代码\ncategories: 数据结构\nabbrlink: 225d868e\ntags: 二叉树\ndate: 2023-05-14 18:55:35\ncover:\n---\n二叉树的建树，层次建树，深度优先遍历，广度优先遍历\n\n二叉树前序、中序、后序遍历\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 定义一个二叉树结构体\ntypedef char BiElemType;\ntypedef struct BiTNode {\n    BiElemType c;\n    struct BiTNode *lchild;\n    struct BiTNode *rchild;\n} BiTNode, *BiTree;\n\n// tag结构体是辅助队列使用的\ntypedef struct tag {\n    BiTree p; // 树的某一个节点的地址值\n    struct tag *pnext;\n} tag_t, *ptag_t;\n\n// 前序遍历，深度优先遍历\nvoid preOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        printf(\"%c\", p->c);\n        preOrder(p->lchild); // 打印左子树\n        preOrder(p->rchild); // 打印右子树\n    }\n}\n\n// 中序遍历\nvoid inOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        inOrder(p->lchild); // 打印左子树\n        printf(\"%c\", p->c);\n        inOrder(p->rchild); // 打印右子树\n    }\n}\n\n// 后续遍历\nvoid posOrder(BiTree p) {\n    // 判断是否满足条件\n    if (NULL != p) {\n        posOrder(p->lchild); // 打印左子树\n        posOrder(p->rchild); // 打印右子树\n        printf(\"%c\", p->c);\n    }\n}\n\n// 队列\ntypedef BiTree ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode *next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode *) malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 判断队列是否为空\nbool isEmptyQueue(LinkQueue Q) {\n    return Q.front == Q.rear;\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode *p = (LinkNode *) malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next = p->next;//断链\n    if (Q.rear == p) {//删除的是最后一个元素\n        Q.rear = Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 层次遍历、层序便来，广度优先遍历\nvoid levelOrder(BiTree T) {\n    LinkQueue Q;\n    initQueue(Q);\n    BiTree p; // 存储出队的节点\n    // 把根节点入队\n    enQueue(Q, T);\n    // 判断队列是否为空\n    while (!isEmptyQueue(Q)) {\n        deQueue(Q, p);\n        putchar(p->c);  // 等价于 printf(\"%c\",c);\n        // 入队\n        if (p->lchild != NULL) {\n            enQueue(Q, p->lchild);\n        }\n        if (p->rchild != NULL) {\n            enQueue(Q, p->rchild);\n        }\n    }\n}\n\n// 二叉树的建树，层次建树\nint main() {\n    BiTree pnew; // 申请一个树的新节点\n    BiTree tree = NULL;  // 指向树根，代表树\n    char c;\n    // phead就是队列头，ptail就是队列尾\n    ptag_t phead = NULL, ptail = NULL, listpnew = NULL, pcur;\n    while (scanf(\"%c\", &c)) {\n        if (c == '\\n') {\n            break;  // 读到换行结束\n        }\n        // calloc申请的空间大小是两个参数直接相乘，并对空间进行初始化，赋值为0\n        pnew = (BiTree) calloc(1, sizeof(BiTNode));\n        // 数据放进去\n        pnew->c = c;\n        // 给队列申请空间\n        listpnew = (ptag_t) calloc(1, sizeof(tag_t));\n        listpnew->p = pnew;\n        // 如果是树的第一个节点\n        if (NULL == tree) {\n            tree = pnew;  // tree指向树的根节点\n            phead = listpnew; // 第一个节点即是队列头，也是队列尾\n            ptail = listpnew; // 队列尾\n            pcur = listpnew; // pcur 要指向要进入树的父亲元素\n        } else {\n            // 让元素先入队列\n            ptail->pnext = listpnew;\n            ptail = listpnew;\n            if (NULL == pcur->p->lchild) {\n                pcur->p->lchild = pnew; // 左孩子为空，就放入左孩子\n            } else if (NULL == pcur->p->rchild) {\n                pcur->p->rchild = pnew;\n                pcur = pcur->pnext; //当前节点左右孩子都有了，pcur就指向下一个\n            }\n        }\n    }\n\n    // 二叉树前序、中序、后续遍历\n    printf(\"--------------preOrder()----------------\\n\");\n    preOrder(tree);\n    printf(\"\\n\");\n    // 中序遍历\n    printf(\"--------------inOrder()-----------------\\n\");\n    inOrder(tree);\n    printf(\"\\n\");\n    // 后续遍历\n    printf(\"--------------posOrder()-----------------\\n\");\n    posOrder(tree);\n\n    printf(\"\\n\");\n    // 层次遍历，广度优先遍历\n    printf(\"--------------levelOrder()-----------------\\n\");\n    levelOrder(tree);\n    printf(\"\\n\");\n    return 0;\n}\n```","slug":"20230514二叉树层次建树前序中序后序遍历层序遍历代码","published":1,"updated":"2023-05-14T10:12:07.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxg0016w0uh5iux2e5s","content":"<p>二叉树的建树，层次建树，深度优先遍历，广度优先遍历</p>\n<p>二叉树前序、中序、后序遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个二叉树结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> BiElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> &#123;</span><br><span class=\"line\">    BiElemType c;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *lchild;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *rchild;</span><br><span class=\"line\">&#125; BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tag结构体是辅助队列使用的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tag</span> &#123;</span><br><span class=\"line\">    BiTree p; <span class=\"comment\">// 树的某一个节点的地址值</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">tag</span> *pnext;</span><br><span class=\"line\">&#125; <span class=\"type\">tag_t</span>, *<span class=\"type\">ptag_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前序遍历，深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后续遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">posOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">posOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">posOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> BiTree ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> *next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyQueue</span><span class=\"params\">(LinkQueue Q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode *p = (LinkNode *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next = p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.rear == p) &#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear = Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次遍历、层序便来，广度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">levelOrder</span><span class=\"params\">(BiTree T)</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    BiTree p; <span class=\"comment\">// 存储出队的节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 把根节点入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, T);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isEmptyQueue</span>(Q)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">deQueue</span>(Q, p);</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(p-&gt;c);  <span class=\"comment\">// 等价于 printf(&quot;%c&quot;,c);</span></span><br><span class=\"line\">        <span class=\"comment\">// 入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;lchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">enQueue</span>(Q, p-&gt;lchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;rchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">enQueue</span>(Q, p-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树的建树，层次建树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BiTree pnew; <span class=\"comment\">// 申请一个树的新节点</span></span><br><span class=\"line\">    BiTree tree = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 指向树根，代表树</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"comment\">// phead就是队列头，ptail就是队列尾</span></span><br><span class=\"line\">    <span class=\"type\">ptag_t</span> phead = <span class=\"literal\">NULL</span>, ptail = <span class=\"literal\">NULL</span>, listpnew = <span class=\"literal\">NULL</span>, pcur;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>, &amp;c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;\\n&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  <span class=\"comment\">// 读到换行结束</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// calloc申请的空间大小是两个参数直接相乘，并对空间进行初始化，赋值为0</span></span><br><span class=\"line\">        pnew = (BiTree) <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"built_in\">sizeof</span>(BiTNode));</span><br><span class=\"line\">        <span class=\"comment\">// 数据放进去</span></span><br><span class=\"line\">        pnew-&gt;c = c;</span><br><span class=\"line\">        <span class=\"comment\">// 给队列申请空间</span></span><br><span class=\"line\">        listpnew = (<span class=\"type\">ptag_t</span>) <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"built_in\">sizeof</span>(<span class=\"type\">tag_t</span>));</span><br><span class=\"line\">        listpnew-&gt;p = pnew;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是树的第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == tree) &#123;</span><br><span class=\"line\">            tree = pnew;  <span class=\"comment\">// tree指向树的根节点</span></span><br><span class=\"line\">            phead = listpnew; <span class=\"comment\">// 第一个节点即是队列头，也是队列尾</span></span><br><span class=\"line\">            ptail = listpnew; <span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">            pcur = listpnew; <span class=\"comment\">// pcur 要指向要进入树的父亲元素</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 让元素先入队列</span></span><br><span class=\"line\">            ptail-&gt;pnext = listpnew;</span><br><span class=\"line\">            ptail = listpnew;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == pcur-&gt;p-&gt;lchild) &#123;</span><br><span class=\"line\">                pcur-&gt;p-&gt;lchild = pnew; <span class=\"comment\">// 左孩子为空，就放入左孩子</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == pcur-&gt;p-&gt;rchild) &#123;</span><br><span class=\"line\">                pcur-&gt;p-&gt;rchild = pnew;</span><br><span class=\"line\">                pcur = pcur-&gt;pnext; <span class=\"comment\">//当前节点左右孩子都有了，pcur就指向下一个</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二叉树前序、中序、后续遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------preOrder()----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------inOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 后续遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------posOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">posOrder</span>(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 层次遍历，广度优先遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------levelOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">levelOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>二叉树的建树，层次建树，深度优先遍历，广度优先遍历</p>\n<p>二叉树前序、中序、后序遍历</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个二叉树结构体</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> BiElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> &#123;</span><br><span class=\"line\">    BiElemType c;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *lchild;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">BiTNode</span> *rchild;</span><br><span class=\"line\">&#125; BiTNode, *BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tag结构体是辅助队列使用的</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">tag</span> &#123;</span><br><span class=\"line\">    BiTree p; <span class=\"comment\">// 树的某一个节点的地址值</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">tag</span> *pnext;</span><br><span class=\"line\">&#125; <span class=\"type\">tag_t</span>, *<span class=\"type\">ptag_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 前序遍历，深度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">preOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">        <span class=\"built_in\">inOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 后续遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">posOrder</span><span class=\"params\">(BiTree p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否满足条件</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> != p) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">posOrder</span>(p-&gt;lchild); <span class=\"comment\">// 打印左子树</span></span><br><span class=\"line\">        <span class=\"built_in\">posOrder</span>(p-&gt;rchild); <span class=\"comment\">// 打印右子树</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, p-&gt;c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> BiTree ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> *next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyQueue</span><span class=\"params\">(LinkQueue Q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode *p = (LinkNode *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next = p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.rear == p) &#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear = Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 层次遍历、层序便来，广度优先遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">levelOrder</span><span class=\"params\">(BiTree T)</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    BiTree p; <span class=\"comment\">// 存储出队的节点</span></span><br><span class=\"line\">    <span class=\"comment\">// 把根节点入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, T);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isEmptyQueue</span>(Q)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">deQueue</span>(Q, p);</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(p-&gt;c);  <span class=\"comment\">// 等价于 printf(&quot;%c&quot;,c);</span></span><br><span class=\"line\">        <span class=\"comment\">// 入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;lchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">enQueue</span>(Q, p-&gt;lchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p-&gt;rchild != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">enQueue</span>(Q, p-&gt;rchild);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二叉树的建树，层次建树</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BiTree pnew; <span class=\"comment\">// 申请一个树的新节点</span></span><br><span class=\"line\">    BiTree tree = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 指向树根，代表树</span></span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\">    <span class=\"comment\">// phead就是队列头，ptail就是队列尾</span></span><br><span class=\"line\">    <span class=\"type\">ptag_t</span> phead = <span class=\"literal\">NULL</span>, ptail = <span class=\"literal\">NULL</span>, listpnew = <span class=\"literal\">NULL</span>, pcur;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>, &amp;c)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;\\n&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;  <span class=\"comment\">// 读到换行结束</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// calloc申请的空间大小是两个参数直接相乘，并对空间进行初始化，赋值为0</span></span><br><span class=\"line\">        pnew = (BiTree) <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"built_in\">sizeof</span>(BiTNode));</span><br><span class=\"line\">        <span class=\"comment\">// 数据放进去</span></span><br><span class=\"line\">        pnew-&gt;c = c;</span><br><span class=\"line\">        <span class=\"comment\">// 给队列申请空间</span></span><br><span class=\"line\">        listpnew = (<span class=\"type\">ptag_t</span>) <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"built_in\">sizeof</span>(<span class=\"type\">tag_t</span>));</span><br><span class=\"line\">        listpnew-&gt;p = pnew;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是树的第一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == tree) &#123;</span><br><span class=\"line\">            tree = pnew;  <span class=\"comment\">// tree指向树的根节点</span></span><br><span class=\"line\">            phead = listpnew; <span class=\"comment\">// 第一个节点即是队列头，也是队列尾</span></span><br><span class=\"line\">            ptail = listpnew; <span class=\"comment\">// 队列尾</span></span><br><span class=\"line\">            pcur = listpnew; <span class=\"comment\">// pcur 要指向要进入树的父亲元素</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 让元素先入队列</span></span><br><span class=\"line\">            ptail-&gt;pnext = listpnew;</span><br><span class=\"line\">            ptail = listpnew;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == pcur-&gt;p-&gt;lchild) &#123;</span><br><span class=\"line\">                pcur-&gt;p-&gt;lchild = pnew; <span class=\"comment\">// 左孩子为空，就放入左孩子</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == pcur-&gt;p-&gt;rchild) &#123;</span><br><span class=\"line\">                pcur-&gt;p-&gt;rchild = pnew;</span><br><span class=\"line\">                pcur = pcur-&gt;pnext; <span class=\"comment\">//当前节点左右孩子都有了，pcur就指向下一个</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 二叉树前序、中序、后续遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------preOrder()----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">preOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 中序遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------inOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">inOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 后续遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------posOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">posOrder</span>(tree);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 层次遍历，广度优先遍历</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;--------------levelOrder()-----------------\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">levelOrder</span>(tree);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"顺序查找 排序 二分查找","abbrlink":"b78c9d72","date":"2023-05-16T11:48:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"顺序查找 排序 二分查找代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef int ElemType;\ntypedef struct {\n    ElemType *elem; // 整形指针\n    int length;  // 存储动态数组里边元素的个数\n} SSTable;\n\n// 初始化\nvoid initSSTable(SSTable &S, int length) {\n    // 多申请一个位置，为了存哨兵\n    S.length = length + 1;\n    S.elem = (ElemType *) malloc(sizeof(ElemType) * S.length);\n    int i;\n    // 随机生成数\n    srand(time(NULL)); //生成随机数\n    // 因为第0个是哨兵，所以从第1个开始随机\n    for (i = 1; i < S.length; i++) {\n        S.elem[i] = rand() % 100;\n    }\n}\n\n// 打印\nvoid printST(SSTable S) {\n    // 从1开始打印，0是哨兵\n    for (int i = 1; i < S.length; i++) {\n        printf(\"%3d\", S.elem[i]);\n    }\n    printf(\"\\n\");\n}\n\n// 查找\nint selSSTable(SSTable S, ElemType e) {\n    S.elem[0] = e;\n    int i;\n    // 方式一循环\n//    for (i = S.length - 1; S.elem[i] != e; i--);\n//    return i;\n    // 方式二循环\n    for (i = S.length - 1; i >= 0; i--) {\n        if (S.elem[i] == e) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// 二分查找 时间复杂度 logN\nint binarySearch(SSTable L, ElemType key) {\n    int low = 0, mid, high = L.length - 1;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (L.elem[mid] == key) {\n            return mid;//等于就找到了\n        } else if (L.elem[mid] > key) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\n// 排序\nint compare(const void *left, const void *right) {//left，right 是任意两个元素的地址值\n    return *(ElemType *) left - *(ElemType *) right;\n    //return *(ElemType*)right - *(ElemType*)left;//从大到小\n}\n\n// 顺序查找 折半查找（二分查找）\nint main() {\n    SSTable S;\n    // 初始化\n    initSSTable(S, 10);\n    // 打印\n    printST(S);\n    // 顺序查找，输入要查找的元素\n    ElemType key;\n    printf(\"请输入要查询的元素\\n\");\n    scanf(\"%d\", &key);\n    int index = selSSTable(S, key);\n    if (index) {\n        printf(\"查找元素的位置为：%d\\n\", index);\n    } else {\n        printf(\"没有找到\");\n    }\n\n    //排序 qsort 实现的是快排\n    qsort(S.elem, S.length, sizeof(ElemType), compare);\n    printf(\"排序后的顺序是\\n\");\n    printST(S);\n    // 二分查找\n    printf(\"请输入要查询的值\\n\");\n    scanf(\"%d\", &key);\n    int ret = binarySearch(S, key);\n    if (ret != -1) {\n        printf(\"查找成功 位置为 %d\\n\", ret);\n    } else {\n        printf(\"查找失败\\n\");\n    }\n    return 0;\n}\n```","source":"_posts/20230516顺序查找二分查找.md","raw":"---\ntitle: 顺序查找 排序 二分查找\ncategories: 数据结构\nabbrlink: \ndate: 2023-05-16 19:48:35\ntags: \ncover:\n---\n顺序查找 排序 二分查找代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef int ElemType;\ntypedef struct {\n    ElemType *elem; // 整形指针\n    int length;  // 存储动态数组里边元素的个数\n} SSTable;\n\n// 初始化\nvoid initSSTable(SSTable &S, int length) {\n    // 多申请一个位置，为了存哨兵\n    S.length = length + 1;\n    S.elem = (ElemType *) malloc(sizeof(ElemType) * S.length);\n    int i;\n    // 随机生成数\n    srand(time(NULL)); //生成随机数\n    // 因为第0个是哨兵，所以从第1个开始随机\n    for (i = 1; i < S.length; i++) {\n        S.elem[i] = rand() % 100;\n    }\n}\n\n// 打印\nvoid printST(SSTable S) {\n    // 从1开始打印，0是哨兵\n    for (int i = 1; i < S.length; i++) {\n        printf(\"%3d\", S.elem[i]);\n    }\n    printf(\"\\n\");\n}\n\n// 查找\nint selSSTable(SSTable S, ElemType e) {\n    S.elem[0] = e;\n    int i;\n    // 方式一循环\n//    for (i = S.length - 1; S.elem[i] != e; i--);\n//    return i;\n    // 方式二循环\n    for (i = S.length - 1; i >= 0; i--) {\n        if (S.elem[i] == e) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// 二分查找 时间复杂度 logN\nint binarySearch(SSTable L, ElemType key) {\n    int low = 0, mid, high = L.length - 1;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (L.elem[mid] == key) {\n            return mid;//等于就找到了\n        } else if (L.elem[mid] > key) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\n// 排序\nint compare(const void *left, const void *right) {//left，right 是任意两个元素的地址值\n    return *(ElemType *) left - *(ElemType *) right;\n    //return *(ElemType*)right - *(ElemType*)left;//从大到小\n}\n\n// 顺序查找 折半查找（二分查找）\nint main() {\n    SSTable S;\n    // 初始化\n    initSSTable(S, 10);\n    // 打印\n    printST(S);\n    // 顺序查找，输入要查找的元素\n    ElemType key;\n    printf(\"请输入要查询的元素\\n\");\n    scanf(\"%d\", &key);\n    int index = selSSTable(S, key);\n    if (index) {\n        printf(\"查找元素的位置为：%d\\n\", index);\n    } else {\n        printf(\"没有找到\");\n    }\n\n    //排序 qsort 实现的是快排\n    qsort(S.elem, S.length, sizeof(ElemType), compare);\n    printf(\"排序后的顺序是\\n\");\n    printST(S);\n    // 二分查找\n    printf(\"请输入要查询的值\\n\");\n    scanf(\"%d\", &key);\n    int ret = binarySearch(S, key);\n    if (ret != -1) {\n        printf(\"查找成功 位置为 %d\\n\", ret);\n    } else {\n        printf(\"查找失败\\n\");\n    }\n    return 0;\n}\n```","slug":"20230516顺序查找二分查找","published":1,"updated":"2023-05-16T11:49:43.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxh0019w0uh4w4wfj97","content":"<p>顺序查找 排序 二分查找代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType *elem; <span class=\"comment\">// 整形指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;  <span class=\"comment\">// 存储动态数组里边元素的个数</span></span><br><span class=\"line\">&#125; SSTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initSSTable</span><span class=\"params\">(SSTable &amp;S, <span class=\"type\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 多申请一个位置，为了存哨兵</span></span><br><span class=\"line\">    S.length = length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    S.elem = (ElemType *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(ElemType) * S.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 随机生成数</span></span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>)); <span class=\"comment\">//生成随机数</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为第0个是哨兵，所以从第1个开始随机</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        S.elem[i] = <span class=\"built_in\">rand</span>() % <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printST</span><span class=\"params\">(SSTable S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从1开始打印，0是哨兵</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, S.elem[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">selSSTable</span><span class=\"params\">(SSTable S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    S.elem[<span class=\"number\">0</span>] = e;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 方式一循环</span></span><br><span class=\"line\"><span class=\"comment\">//    for (i = S.length - 1; S.elem[i] != e; i--);</span></span><br><span class=\"line\"><span class=\"comment\">//    return i;</span></span><br><span class=\"line\">    <span class=\"comment\">// 方式二循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = S.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (S.elem[i] == e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二分查找 时间复杂度 logN</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(SSTable L, ElemType key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> low = <span class=\"number\">0</span>, mid, high = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L.elem[mid] == key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;<span class=\"comment\">//等于就找到了</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (L.elem[mid] &gt; key) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *left, <span class=\"type\">const</span> <span class=\"type\">void</span> *right)</span> </span>&#123;<span class=\"comment\">//left，right 是任意两个元素的地址值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(ElemType *) left - *(ElemType *) right;</span><br><span class=\"line\">    <span class=\"comment\">//return *(ElemType*)right - *(ElemType*)left;//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顺序查找 折半查找（二分查找）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SSTable S;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">initSSTable</span>(S, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 打印</span></span><br><span class=\"line\">    <span class=\"built_in\">printST</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 顺序查找，输入要查找的元素</span></span><br><span class=\"line\">    ElemType key;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查询的元素\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;key);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"built_in\">selSSTable</span>(S, key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找元素的位置为：%d\\n&quot;</span>, index);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;没有找到&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序 qsort 实现的是快排</span></span><br><span class=\"line\">    <span class=\"built_in\">qsort</span>(S.elem, S.length, <span class=\"built_in\">sizeof</span>(ElemType), compare);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;排序后的顺序是\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printST</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查询的值\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;key);</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">binarySearch</span>(S, key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找成功 位置为 %d\\n&quot;</span>, ret);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>顺序查找 排序 二分查找代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType *elem; <span class=\"comment\">// 整形指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;  <span class=\"comment\">// 存储动态数组里边元素的个数</span></span><br><span class=\"line\">&#125; SSTable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initSSTable</span><span class=\"params\">(SSTable &amp;S, <span class=\"type\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 多申请一个位置，为了存哨兵</span></span><br><span class=\"line\">    S.length = length + <span class=\"number\">1</span>;</span><br><span class=\"line\">    S.elem = (ElemType *) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(ElemType) * S.length);</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 随机生成数</span></span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>)); <span class=\"comment\">//生成随机数</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为第0个是哨兵，所以从第1个开始随机</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        S.elem[i] = <span class=\"built_in\">rand</span>() % <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printST</span><span class=\"params\">(SSTable S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从1开始打印，0是哨兵</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, S.elem[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">selSSTable</span><span class=\"params\">(SSTable S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    S.elem[<span class=\"number\">0</span>] = e;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">// 方式一循环</span></span><br><span class=\"line\"><span class=\"comment\">//    for (i = S.length - 1; S.elem[i] != e; i--);</span></span><br><span class=\"line\"><span class=\"comment\">//    return i;</span></span><br><span class=\"line\">    <span class=\"comment\">// 方式二循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = S.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (S.elem[i] == e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二分查找 时间复杂度 logN</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(SSTable L, ElemType key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> low = <span class=\"number\">0</span>, mid, high = L.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L.elem[mid] == key) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;<span class=\"comment\">//等于就找到了</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (L.elem[mid] &gt; key) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *left, <span class=\"type\">const</span> <span class=\"type\">void</span> *right)</span> </span>&#123;<span class=\"comment\">//left，right 是任意两个元素的地址值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(ElemType *) left - *(ElemType *) right;</span><br><span class=\"line\">    <span class=\"comment\">//return *(ElemType*)right - *(ElemType*)left;//从大到小</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顺序查找 折半查找（二分查找）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SSTable S;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">initSSTable</span>(S, <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 打印</span></span><br><span class=\"line\">    <span class=\"built_in\">printST</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 顺序查找，输入要查找的元素</span></span><br><span class=\"line\">    ElemType key;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查询的元素\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;key);</span><br><span class=\"line\">    <span class=\"type\">int</span> index = <span class=\"built_in\">selSSTable</span>(S, key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找元素的位置为：%d\\n&quot;</span>, index);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;没有找到&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序 qsort 实现的是快排</span></span><br><span class=\"line\">    <span class=\"built_in\">qsort</span>(S.elem, S.length, <span class=\"built_in\">sizeof</span>(ElemType), compare);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;排序后的顺序是\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printST</span>(S);</span><br><span class=\"line\">    <span class=\"comment\">// 二分查找</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入要查询的值\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;key);</span><br><span class=\"line\">    <span class=\"type\">int</span> ret = <span class=\"built_in\">binarySearch</span>(S, key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找成功 位置为 %d\\n&quot;</span>, ret);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;查找失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","abbrlink":"4a17b156","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: test\nabbrlink: 4a17b156\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-03-14T07:39:24.317Z","updated":"2023-03-14T07:39:24.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxh001cw0uh7s8a5t8k","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"abbrlink":"0","_content":"### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n\n\n\n\n\n","source":"_posts/install.md","raw":"---\nabbrlink: '0'\n---\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n\n\n\n\n\n","slug":"install","published":1,"date":"2023-03-14T07:39:24.317Z","updated":"2023-03-14T07:39:24.317Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxi001fw0uh1ng6fn1e","content":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","cover_type":"img","excerpt":"","more":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n"},{"title":"mysql","cover":"/img/default_cover1.jpg","abbrlink":"9520183a","date":"2023-02-02T08:41:35.000Z","_content":"\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n==注意==：添加mysql-server rpm包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 MySQL 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动MySQL服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 MySql 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 MySql，登录命令（==第一种方式使用密码登录==）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动MySQL后，就会有临时密码，这个默认的初始密码在/var/log/mysqld.log文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n==配置文件说明：==\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n2、启动 mysql镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/mysql-data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n\n# 修改命令\ndocker update \n```\n\nmy.cnf 配置文件：\n\n```bash\n# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n!includedir /etc/mysql/conf.d/\n!includedir /etc/mysql/mysql.conf.d/\n\n[mysql]\ndefault_character_set=utf8\n[client]\ndefault_character_set=utf8\n\n[mysqld]\nmax_connections = 3000\nmax_user_connections = 3000\nmax_connect_errors = 100000\nmax_allowed_packet = 1G\ncharacter_set_server=utf8\ncollation-server=utf8_general_ci\n\n\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n# bin-log\nexpire_logs_days = 15\nbinlog_format=mixed\nserver-id=168168\n\n##########################\n## log slow\n###########################\nslow_query_log=off\nslow_query_log_file=/var/log/mysql/mysqld_slow.log\nlong_query_time=1\nlog_queries_not_using_indexes=on\n\n##########################\n## innodb\n###########################\ninnodb_file_per_table=1\ninnodb_log_file_size=1024M\ninnodb_log_buffer_size=64M \n\ntable_open_cache = 8000\n\n```\n\n\n","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ntags: test\ncategories: mysql\ncover: /img/default_cover1.jpg\nabbrlink: 9520183a\ndate: 2023-02-02 16:41:35\n---\n\n### MySql使用rpm的方式安装\n\n官方下载地址：https://downloads.mysql.com/archives/community/\n\n1、安装 MySQL 官方的 yum repository\n\n```bash\nwget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm\n #　或者可以更改自家下载后的文件名，命名为,mysql.rpm\nwget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm\n```\n\n说明：`CentOS 7`的`yum`源中默认是没有`mysql`的。所以，为了解决这个问题我们首先下载安装`mysql`的`repository`源\n\n2、下载 rpm 包\n\n```bash\nyum -y install mysql57-community-release-el7-10.noarch.rpm\n```\n\n==注意==：添加mysql-server rpm包（当前版本是 MySQL5.7）\n\n`rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm`\n\n3、安装 MySQL 服务 \n\n```bash\n# 安装 MySql 服务方式一：\nyum -y install mysql-community-server\n# 安装 MySql 服务方式二(共3步)：\n# 1、安装 mysql-server\nyum install mysql-server\n# 2、安装 mysql-devel\nyum install mysql-devel\n# 3、安装 mysql\nyum install mysql\n# 1、2、3步安装的过程选择的步骤都选y\n# 查看 MySQL 安装的软件\nrpm -qa|grep -i mysql\n```\n\n4、启动MySQL服务\n\n```bash\n# 启动服务 \nsystemctl start mysqld.service  或者  service mysqld start\n# 停止服务\nsystemctl stop mysqld.service  或者 service mysqld stop\n# 查看状态\nsystemctl status mysqld.service  或者  service mysqld status\n#　重启服务\nsystemctl restart mysqld.service  或者 service mysqld restart\n# 查看 mysql 启动的 pid\npidof mysqld\n```\n\n5、设置 MySql 开机启动\n\n```bash\n# 设置开机启动\nsystemctl enable mysqld\n# 刷新配置\nsystemctl daemon-reload\n```\n\n6、关于登录 MySql，登录命令（==第一种方式使用密码登录==）\n\n```bash\nmysql -u root -p \n```\n\n第一次启动MySQL后，就会有临时密码，这个默认的初始密码在/var/log/mysqld.log文件中，我们可以用以下命令来查看：\n\n```bash\n# 查看密码\n[root@izuf61151k3ad2dso6mo9oz mysql]# grep \"password\" /var/log/mysqld.log\n2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated for root@localhost: Tt;vkIhrd71?\n2021-04-21T14:44:16.590080Z 2 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n2021-04-21T14:44:30.478638Z 3 [Note] Access denied for user 'root'@'localhost' (using password: YES)\n# 进入 mysql 修改 root 用户的密码\nupdate mysql.user set authentication_string=password('shijinying123!@#') where user='root';\n# 修改之后刷新\nflush privileges;\n# 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句\nmysql> flush privileges;\nERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.\n# 出现这种情况一次执行一下命令\nSET PASSWORD = PASSWORD('Shijinying123!@#');\nALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER;\nflush privileges;\n# 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。\n# 完成之后就可以使用新密码登录了\nmysql -u root -p Shijinying123!@#\n# 修改 root 用户远程 连接\nupdate user set host = '%' where user ='root';  #　直接修改 root 用户\n# 修改完刷新数据库\nflush privileges;\n# 新增一条\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Shijinying123!@#' WITH GRANT OPTION;\n```\n\n==配置文件说明：==\n\n> /etc/my.cnf 这是mysql的主配置文件\n> /var/lib/mysql mysql数据库的数据库文件存放位置\n> /var/log mysql数据库的日志输出存放位置\n\n一下常用命令：\n\n```bash\n# 检查 MySQL 是否已经安装\nyum list installed | grep mysql\n# 已经安装的使用 yum 方式卸载\nyum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*\n# 验证下是否成功添加到了你的系统 repository 列表中\nyum repolist enabled | grep \"mysql.*-community.*\" \n# 查看 MySQL 版本\nyum repolist all | grep mysql\n# 查看当前的启动的 MySQL 版本\nyum repolist enabled | grep mysql\n# 查看 MySQL 的安装目录\nwhereis mysql\n# 查看 mysql 启动的 pid\npidof mysqld\n# 查看 MySQL 3306 端口是否启动成功\nnetstat -nap |grep 3306\n```\n\n### MySql使用Docker的方式安装\n\n1、拉去镜像\n\n```bash\ndocker pull mysql:5.7\n```\n\n2、启动 mysql镜像\n\n说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.\n\n```bash\ndocker run -itd --name mysql-test \\\n-v /data/mysql/mysql-data/:/var/lib/mysql \\\n-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\\n--privileged=true -e MYSQL_ROOT_PASSWORD=test123456 \\\n-p 3306:3306 --restart=always mysql:5.7\n\n# 修改命令\ndocker update \n```\n\nmy.cnf 配置文件：\n\n```bash\n# Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; version 2 of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n\n!includedir /etc/mysql/conf.d/\n!includedir /etc/mysql/mysql.conf.d/\n\n[mysql]\ndefault_character_set=utf8\n[client]\ndefault_character_set=utf8\n\n[mysqld]\nmax_connections = 3000\nmax_user_connections = 3000\nmax_connect_errors = 100000\nmax_allowed_packet = 1G\ncharacter_set_server=utf8\ncollation-server=utf8_general_ci\n\n\nsql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\n\n# bin-log\nexpire_logs_days = 15\nbinlog_format=mixed\nserver-id=168168\n\n##########################\n## log slow\n###########################\nslow_query_log=off\nslow_query_log_file=/var/log/mysql/mysqld_slow.log\nlong_query_time=1\nlog_queries_not_using_indexes=on\n\n##########################\n## innodb\n###########################\ninnodb_file_per_table=1\ninnodb_log_file_size=1024M\ninnodb_log_buffer_size=64M \n\ntable_open_cache = 8000\n\n```\n\n\n","slug":"mysql","published":1,"updated":"2023-03-14T07:39:24.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxl001jw0uhcf1jf73v","content":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意&#x3D;&#x3D;：添加mysql-server rpm包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 MySQL 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动MySQL服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 MySql 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 MySql，登录命令（&#x3D;&#x3D;第一种方式使用密码登录&#x3D;&#x3D;）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动MySQL后，就会有临时密码，这个默认的初始密码在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;配置文件说明：&#x3D;&#x3D;</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 mysql镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/mysql-data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改命令</span></span><br><span class=\"line\">docker update </span><br></pre></td></tr></table></figure>\n\n<p>my.cnf 配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\"># it under the terms of the GNU General Public License as published by</span></span><br><span class=\"line\"><span class=\"comment\"># the Free Software Foundation; version 2 of the License.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class=\"line\"><span class=\"comment\"># GNU General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You should have received a copy of the GNU General Public License</span></span><br><span class=\"line\"><span class=\"comment\"># along with this program; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span></span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_user_connections = 3000</span><br><span class=\"line\">max_connect_errors = 100000</span><br><span class=\"line\">max_allowed_packet = 1G</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bin-log</span></span><br><span class=\"line\">expire_logs_days = 15</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">server-id=168168</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## log slow</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">slow_query_log=off</span><br><span class=\"line\">slow_query_log_file=/var/log/mysql/mysqld_slow.log</span><br><span class=\"line\">long_query_time=1</span><br><span class=\"line\">log_queries_not_using_indexes=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## innodb</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">innodb_file_per_table=1</span><br><span class=\"line\">innodb_log_file_size=1024M</span><br><span class=\"line\">innodb_log_buffer_size=64M </span><br><span class=\"line\"></span><br><span class=\"line\">table_open_cache = 8000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"MySql使用rpm的方式安装\"><a href=\"#MySql使用rpm的方式安装\" class=\"headerlink\" title=\"MySql使用rpm的方式安装\"></a>MySql使用rpm的方式安装</h3><p>官方下载地址：<a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n<p>1、安装 MySQL 官方的 yum repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class=\"line\"> <span class=\"comment\">#　或者可以更改自家下载后的文件名，命名为,mysql.rpm</span></span><br><span class=\"line\">wget -O mysql.rpm http://repo.mysql.com//mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>说明：<code>CentOS 7</code>的<code>yum</code>源中默认是没有<code>mysql</code>的。所以，为了解决这个问题我们首先下载安装<code>mysql</code>的<code>repository</code>源</p>\n<p>2、下载 rpm 包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;注意&#x3D;&#x3D;：添加mysql-server rpm包（当前版本是 MySQL5.7）</p>\n<p><code>rpm -ivh https://repo.mysql.com//mysql57-community-release-el7-11.noarch.rpm</code></p>\n<p>3、安装 MySQL 服务 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式一：</span></span><br><span class=\"line\">yum -y install mysql-community-server</span><br><span class=\"line\"><span class=\"comment\"># 安装 MySql 服务方式二(共3步)：</span></span><br><span class=\"line\"><span class=\"comment\"># 1、安装 mysql-server</span></span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\"><span class=\"comment\"># 2、安装 mysql-devel</span></span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\"><span class=\"comment\"># 3、安装 mysql</span></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\"><span class=\"comment\"># 1、2、3步安装的过程选择的步骤都选y</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 安装的软件</span></span><br><span class=\"line\">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure>\n\n<p>4、启动MySQL服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动服务 </span></span><br><span class=\"line\">systemctl start mysqld.service  或者  service mysqld start</span><br><span class=\"line\"><span class=\"comment\"># 停止服务</span></span><br><span class=\"line\">systemctl stop mysqld.service  或者 service mysqld stop</span><br><span class=\"line\"><span class=\"comment\"># 查看状态</span></span><br><span class=\"line\">systemctl status mysqld.service  或者  service mysqld status</span><br><span class=\"line\"><span class=\"comment\">#　重启服务</span></span><br><span class=\"line\">systemctl restart mysqld.service  或者 service mysqld restart</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br></pre></td></tr></table></figure>\n\n<p>5、设置 MySql 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> mysqld</span><br><span class=\"line\"><span class=\"comment\"># 刷新配置</span></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<p>6、关于登录 MySql，登录命令（&#x3D;&#x3D;第一种方式使用密码登录&#x3D;&#x3D;）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p </span><br></pre></td></tr></table></figure>\n\n<p>第一次启动MySQL后，就会有临时密码，这个默认的初始密码在&#x2F;var&#x2F;log&#x2F;mysqld.log文件中，我们可以用以下命令来查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看密码</span></span><br><span class=\"line\">[root@izuf61151k3ad2dso6mo9oz mysql]<span class=\"comment\"># grep &quot;password&quot; /var/log/mysqld.log</span></span><br><span class=\"line\">2021-04-21T14:41:47.850679Z 1 [Note] A temporary password is generated <span class=\"keyword\">for</span> root@localhost: Tt;vkIhrd71?</span><br><span class=\"line\">2021-04-21T14:44:16.590080Z 2 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\">2021-04-21T14:44:30.478638Z 3 [Note] Access denied <span class=\"keyword\">for</span> user <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> (using password: YES)</span><br><span class=\"line\"><span class=\"comment\"># 进入 mysql 修改 root 用户的密码</span></span><br><span class=\"line\">update mysql.user <span class=\"built_in\">set</span> authentication_string=password(<span class=\"string\">&#x27;shijinying123!@#&#x27;</span>) <span class=\"built_in\">where</span> user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\"># 修改之后刷新</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 输入命令会报错误，或者先执行刷新语句，在执行修改密码语句</span></span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</span><br><span class=\"line\"><span class=\"comment\"># 出现这种情况一次执行一下命令</span></span><br><span class=\"line\">SET PASSWORD = PASSWORD(<span class=\"string\">&#x27;Shijinying123!@#&#x27;</span>);</span><br><span class=\"line\">ALTER USER <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 这里需要说明一下：密码必须包含数字，字母包含大小写，标点符号。不然是不能通过的。</span></span><br><span class=\"line\"><span class=\"comment\"># 完成之后就可以使用新密码登录了</span></span><br><span class=\"line\">mysql -u root -p Shijinying123!@<span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 修改 root 用户远程 连接</span></span><br><span class=\"line\">update user <span class=\"built_in\">set</span> host = <span class=\"string\">&#x27;%&#x27;</span> <span class=\"built_in\">where</span> user =<span class=\"string\">&#x27;root&#x27;</span>;  <span class=\"comment\">#　直接修改 root 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 修改完刷新数据库</span></span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\"><span class=\"comment\"># 新增一条</span></span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;Shijinying123!@#&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;配置文件说明：&#x3D;&#x3D;</p>\n<blockquote>\n<p>&#x2F;etc&#x2F;my.cnf 这是mysql的主配置文件<br>&#x2F;var&#x2F;lib&#x2F;mysql mysql数据库的数据库文件存放位置<br>&#x2F;var&#x2F;log mysql数据库的日志输出存放位置</p>\n</blockquote>\n<p>一下常用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 MySQL 是否已经安装</span></span><br><span class=\"line\">yum list installed | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 已经安装的使用 yum 方式卸载</span></span><br><span class=\"line\">yum -y remove mysql-libs.x86_64   删除和MySQL有关的所有依赖  yum -y remove mysql*</span><br><span class=\"line\"><span class=\"comment\"># 验证下是否成功添加到了你的系统 repository 列表中</span></span><br><span class=\"line\">yum repolist enabled | grep <span class=\"string\">&quot;mysql.*-community.*&quot;</span> </span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 版本</span></span><br><span class=\"line\">yum repolist all | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看当前的启动的 MySQL 版本</span></span><br><span class=\"line\">yum repolist enabled | grep mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 的安装目录</span></span><br><span class=\"line\">whereis mysql</span><br><span class=\"line\"><span class=\"comment\"># 查看 mysql 启动的 pid</span></span><br><span class=\"line\">pidof mysqld</span><br><span class=\"line\"><span class=\"comment\"># 查看 MySQL 3306 端口是否启动成功</span></span><br><span class=\"line\">netstat -nap |grep 3306</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySql使用Docker的方式安装\"><a href=\"#MySql使用Docker的方式安装\" class=\"headerlink\" title=\"MySql使用Docker的方式安装\"></a>MySql使用Docker的方式安装</h3><p>1、拉去镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 mysql镜像</p>\n<p>说明：-d 后台启动，-i 即使没有连接，也要保持标准输入保持打开状态，一般与 -t 连用，-t 分配一个伪tty，一般与 -i 连用.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --name mysql-test \\</span><br><span class=\"line\">-v /data/mysql/mysql-data/:/var/lib/mysql \\</span><br><span class=\"line\">-v /data/mysql/conf/my.cnf:/etc/mysql/my.cnf \\</span><br><span class=\"line\">--privileged=<span class=\"literal\">true</span> -e MYSQL_ROOT_PASSWORD=test123456 \\</span><br><span class=\"line\">-p 3306:3306 --restart=always mysql:5.7</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改命令</span></span><br><span class=\"line\">docker update </span><br></pre></td></tr></table></figure>\n\n<p>my.cnf 配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is free software; you can redistribute it and/or modify</span></span><br><span class=\"line\"><span class=\"comment\"># it under the terms of the GNU General Public License as published by</span></span><br><span class=\"line\"><span class=\"comment\"># the Free Software Foundation; version 2 of the License.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># This program is distributed in the hope that it will be useful,</span></span><br><span class=\"line\"><span class=\"comment\"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class=\"line\"><span class=\"comment\"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class=\"line\"><span class=\"comment\"># GNU General Public License for more details.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># You should have received a copy of the GNU General Public License</span></span><br><span class=\"line\"><span class=\"comment\"># along with this program; if not, write to the Free Software</span></span><br><span class=\"line\"><span class=\"comment\"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span></span><br><span class=\"line\"></span><br><span class=\"line\">!includedir /etc/mysql/conf.d/</span><br><span class=\"line\">!includedir /etc/mysql/mysql.conf.d/</span><br><span class=\"line\"></span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default_character_set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">max_connections = 3000</span><br><span class=\"line\">max_user_connections = 3000</span><br><span class=\"line\">max_connect_errors = 100000</span><br><span class=\"line\">max_allowed_packet = 1G</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">collation-server=utf8_general_ci</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># bin-log</span></span><br><span class=\"line\">expire_logs_days = 15</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">server-id=168168</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## log slow</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">slow_query_log=off</span><br><span class=\"line\">slow_query_log_file=/var/log/mysql/mysqld_slow.log</span><br><span class=\"line\">long_query_time=1</span><br><span class=\"line\">log_queries_not_using_indexes=on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##########################</span></span><br><span class=\"line\"><span class=\"comment\">## innodb</span></span><br><span class=\"line\"><span class=\"comment\">###########################</span></span><br><span class=\"line\">innodb_file_per_table=1</span><br><span class=\"line\">innodb_log_file_size=1024M</span><br><span class=\"line\">innodb_log_buffer_size=64M </span><br><span class=\"line\"></span><br><span class=\"line\">table_open_cache = 8000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"循环队列代码代码实现","abbrlink":"e434efff","date":"2023-05-09T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"\n循环队列代码练习\n\n初始化队列、判断队列是否为空、入队、出队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 循环队列代码实战\n#define MaxSize 5\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组存储MaxSize-1 个元素\n    int front, rear; // 队列头，队列尾\n} SqQueue;\n\n// 初始化队列\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0; // 初始化循环队列，就是让头和尾部都指向零号\n}\n\n// 判断队列是否为空\nbool isEmpty(SqQueue Q) {\n\n    return Q.front == Q.rear;\n}\n\n// 入队操作\nbool enQueue(SqQueue &Q, ElemType e) {\n    if ((Q.rear + 1) % MaxSize == Q.front) {\n        return false;\n    }\n    Q.data[Q.rear] = e; // 放入元素\n    Q.rear = (Q.rear + 1) % MaxSize; // rear 要加1，如果大于数组最大下标，回到开头\n    return true;\n}\n\n// 出队操作\nbool deQueue(SqQueue &Q, ElemType &e) {\n    // 判断为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    e = Q.data[Q.front]; //出队\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqQueue Q;\n    initQueue(Q);\n    bool ret;\n    ret = isEmpty(Q);\n    if (ret) {\n        printf(\"队列为空\");\n    } else {\n        printf(\"队列不为空\");\n    }\n    // 入队\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    ret = enQueue(Q, 6);\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    ElemType elem; //存储出队元素\n    ret = deQueue(Q, elem);\n    if (ret) {\n        printf(\"出队成功，出队元素：%d\\n\", elem);\n    } else {\n        printf(\"出队失败\\n\", elem);\n    }\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/循环队列代码实现.md","raw":"---\ntitle: 循环队列代码代码实现\ntags: 数据结构\ncategories: 队列\nabbrlink: e434efff\ndate: 2023-05-09 16:22:35\ncover:\n---\n\n循环队列代码练习\n\n初始化队列、判断队列是否为空、入队、出队\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 循环队列代码实战\n#define MaxSize 5\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize]; // 数组存储MaxSize-1 个元素\n    int front, rear; // 队列头，队列尾\n} SqQueue;\n\n// 初始化队列\nvoid initQueue(SqQueue &Q) {\n    Q.front = Q.rear = 0; // 初始化循环队列，就是让头和尾部都指向零号\n}\n\n// 判断队列是否为空\nbool isEmpty(SqQueue Q) {\n\n    return Q.front == Q.rear;\n}\n\n// 入队操作\nbool enQueue(SqQueue &Q, ElemType e) {\n    if ((Q.rear + 1) % MaxSize == Q.front) {\n        return false;\n    }\n    Q.data[Q.rear] = e; // 放入元素\n    Q.rear = (Q.rear + 1) % MaxSize; // rear 要加1，如果大于数组最大下标，回到开头\n    return true;\n}\n\n// 出队操作\nbool deQueue(SqQueue &Q, ElemType &e) {\n    // 判断为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    e = Q.data[Q.front]; //出队\n    Q.front = (Q.front + 1) % MaxSize;\n    return true;\n}\n\nint main() {\n    SqQueue Q;\n    initQueue(Q);\n    bool ret;\n    ret = isEmpty(Q);\n    if (ret) {\n        printf(\"队列为空\");\n    } else {\n        printf(\"队列不为空\");\n    }\n    // 入队\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    ret = enQueue(Q, 6);\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    ElemType elem; //存储出队元素\n    ret = deQueue(Q, elem);\n    if (ret) {\n        printf(\"出队成功，出队元素：%d\\n\", elem);\n    } else {\n        printf(\"出队失败\\n\", elem);\n    }\n    ret = enQueue(Q, 7);\n    if (ret) {\n        printf(\"入队成功\\n\");\n    } else {\n        printf(\"入队失败\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"循环队列代码实现","published":1,"updated":"2023-05-11T09:14:03.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxl001mw0uha4bgf4kt","content":"<p>循环队列代码练习</p>\n<p>初始化队列、判断队列是否为空、入队、出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环队列代码实战</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组存储MaxSize-1 个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear; <span class=\"comment\">// 队列头，队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化循环队列，就是让头和尾部都指向零号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqQueue Q)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = e; <span class=\"comment\">// 放入元素</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"comment\">// rear 要加1，如果大于数组最大下标，回到开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = Q.data[Q.front]; <span class=\"comment\">//出队</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType elem; <span class=\"comment\">//存储出队元素</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q, elem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队成功，出队元素：%d\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>循环队列代码练习</p>\n<p>初始化队列、判断队列是否为空、入队、出队</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 循环队列代码实战</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize]; <span class=\"comment\">// 数组存储MaxSize-1 个元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> front, rear; <span class=\"comment\">// 队列头，队列尾</span></span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(SqQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = <span class=\"number\">0</span>; <span class=\"comment\">// 初始化循环队列，就是让头和尾部都指向零号</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(SqQueue Q)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Q.front == Q.rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q.rear + <span class=\"number\">1</span>) % MaxSize == Q.front) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Q.data[Q.rear] = e; <span class=\"comment\">// 放入元素</span></span><br><span class=\"line\">    Q.rear = (Q.rear + <span class=\"number\">1</span>) % MaxSize; <span class=\"comment\">// rear 要加1，如果大于数组最大下标，回到开头</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 出队操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(SqQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = Q.data[Q.front]; <span class=\"comment\">//出队</span></span><br><span class=\"line\">    Q.front = (Q.front + <span class=\"number\">1</span>) % MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqQueue Q;</span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ElemType elem; <span class=\"comment\">//存储出队元素</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q, elem);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队成功，出队元素：%d\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败\\n&quot;</span>, elem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ret = <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队成功\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;入队失败\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"C++数据结构单链表代码","abbrlink":"669576d7","date":"2023-05-09T05:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover1.jpg","_content":"\nC++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除\n\n知道并理解单链表连理，练习并掌握代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LNode {\n    ElemType data; //数据域\n    struct LNode *next; //指针域\n} LNode, *LinkList;\n\n// LNode* 是结构体指针，和LinkList完全等价 头插法\nvoid linkHeadInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        s->next = L->next;\n        L->next = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n}\n\n// 尾插法\nvoid linkTailInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s, *r = L;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        r->next = s; // 尾部节点指向新的节点\n        r = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n    r->next = NULL;\n}\n\n// 按位置查找\nLinkList getElemIndex(LinkList L, int pos) {\n    if (pos < 0) {\n        return NULL;\n    }\n    int i = 0;\n    while (L && i < pos) {\n        L = L->next;\n        i++;\n    }\n    return L;\n}\n\n// 按值查找\nLinkList getLocalElem(LinkList L, ElemType value) {\n    L = L->next;\n    while (L) {\n        if (L->data == value) {\n            return L;\n        }\n        L = L->next;\n    }\n    return NULL;\n}\n\n\nvoid printList(LinkList L) {\n    L = L->next;\n    while (L != NULL) {\n        printf(\"%3d\", L->data);\n        L = L->next;\n    }\n    printf(\"\\n\");\n}\n\n// 新节点插入地i个位置\nbool insertFrontList(LinkList &L, int pos, ElemType val) {\n    LinkList p = getElemIndex(L, pos - 1);\n    if (NULL == p) {\n        return false;\n    }\n    LinkList s;\n    s = (LinkList) malloc(sizeof(LNode));\n    s->data = val;\n    s->next = p->next;\n    p->next = s;\n    return true;\n}\n\n// 删除id对应的元素，删除L 不会变，不需要加引用\nbool deleteList(LinkList L, int pos) {\n    LinkList p = getElemIndex(L, pos - 1); // 拿到要删除节点的前一个节点\n    if (NULL == p) {\n        return false;\n    }\n    LinkList q = p->next; // 拿到要删除的节点指针\n    p->next = q->next; // 断链\n    free(q); // 释放被删除的节点\n    return true;\n}\n\n// 头插法新建链表\nint main() {\n    LinkList L; // L是链表头指针，是数据机构的指针类型\n    // 头插法\n//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表\n//    printList(L);\n    // 尾插法\n    linkHeadInsert(L);\n    printList(L);\n    // 按位置查找\n//    LinkList linkList = getElemIndex(L, 1);\n//    if (linkList != NULL) {\n//        printf(\"data=%d\\n\", linkList->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 按位置查找\n//    LinkList searchValue = getLocalElem(L, 5);\n//    if (searchValue != NULL) {\n//        printf(\"data=%d\\n\", searchValue->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 新节点插入地i个位置\n    insertFrontList(L, 3, 99);\n    printList(L);\n    // 删除元素\n    bool ret = deleteList(L, 6);\n    if (ret) {\n        printf(\"success\");\n    } else {\n        printf(\"failer\");\n    }\n    printList(L);\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数据结构单链表代码.md","raw":"---\ntitle: C++数据结构单链表代码\ntags: 数据结构\ncategories: 单链表\nabbrlink: 669576d7\ndate: 2023-05-09 13:22:35\ncover:\n---\n\nC++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除\n\n知道并理解单链表连理，练习并掌握代码\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LNode {\n    ElemType data; //数据域\n    struct LNode *next; //指针域\n} LNode, *LinkList;\n\n// LNode* 是结构体指针，和LinkList完全等价 头插法\nvoid linkHeadInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        s->next = L->next;\n        L->next = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n}\n\n// 尾插法\nvoid linkTailInsert(LinkList &L) {\n    L = (LinkList) malloc(sizeof(LNode)); // 申请头节点空间，头指针指向头节点\n    L->next = NULL;\n    ElemType x;\n    scanf(\"%d\", &x);\n    LNode *s, *r = L;\n    while (x != 9999) {\n        s = (LinkList) malloc(sizeof(LNode));\n        s->data = x;\n        r->next = s; // 尾部节点指向新的节点\n        r = s;  // 头节点的next,指向新节点；\n        scanf(\"%d\", &x);\n    }\n    r->next = NULL;\n}\n\n// 按位置查找\nLinkList getElemIndex(LinkList L, int pos) {\n    if (pos < 0) {\n        return NULL;\n    }\n    int i = 0;\n    while (L && i < pos) {\n        L = L->next;\n        i++;\n    }\n    return L;\n}\n\n// 按值查找\nLinkList getLocalElem(LinkList L, ElemType value) {\n    L = L->next;\n    while (L) {\n        if (L->data == value) {\n            return L;\n        }\n        L = L->next;\n    }\n    return NULL;\n}\n\n\nvoid printList(LinkList L) {\n    L = L->next;\n    while (L != NULL) {\n        printf(\"%3d\", L->data);\n        L = L->next;\n    }\n    printf(\"\\n\");\n}\n\n// 新节点插入地i个位置\nbool insertFrontList(LinkList &L, int pos, ElemType val) {\n    LinkList p = getElemIndex(L, pos - 1);\n    if (NULL == p) {\n        return false;\n    }\n    LinkList s;\n    s = (LinkList) malloc(sizeof(LNode));\n    s->data = val;\n    s->next = p->next;\n    p->next = s;\n    return true;\n}\n\n// 删除id对应的元素，删除L 不会变，不需要加引用\nbool deleteList(LinkList L, int pos) {\n    LinkList p = getElemIndex(L, pos - 1); // 拿到要删除节点的前一个节点\n    if (NULL == p) {\n        return false;\n    }\n    LinkList q = p->next; // 拿到要删除的节点指针\n    p->next = q->next; // 断链\n    free(q); // 释放被删除的节点\n    return true;\n}\n\n// 头插法新建链表\nint main() {\n    LinkList L; // L是链表头指针，是数据机构的指针类型\n    // 头插法\n//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表\n//    printList(L);\n    // 尾插法\n    linkHeadInsert(L);\n    printList(L);\n    // 按位置查找\n//    LinkList linkList = getElemIndex(L, 1);\n//    if (linkList != NULL) {\n//        printf(\"data=%d\\n\", linkList->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 按位置查找\n//    LinkList searchValue = getLocalElem(L, 5);\n//    if (searchValue != NULL) {\n//        printf(\"data=%d\\n\", searchValue->data);\n//    } else {\n//        printf(\"no match\");\n//    }\n    // 新节点插入地i个位置\n    insertFrontList(L, 3, 99);\n    printList(L);\n    // 删除元素\n    bool ret = deleteList(L, 6);\n    if (ret) {\n        printf(\"success\");\n    } else {\n        printf(\"failer\");\n    }\n    printList(L);\n    return 0;\n}\n```\n\n\n\n","slug":"数据结构单链表代码","published":1,"updated":"2023-05-09T05:16:30.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxm001qw0uhck8tgmp3","content":"<p>C++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除</p>\n<p>知道并理解单链表连理，练习并掌握代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> &#123;</span><br><span class=\"line\">    ElemType data; <span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125; LNode, *LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LNode* 是结构体指针，和LinkList完全等价 头插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkHeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkTailInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s, *r = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s; <span class=\"comment\">// 尾部节点指向新的节点</span></span><br><span class=\"line\">        r = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getElemIndex</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L &amp;&amp; i &lt; pos) &#123;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按值查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getLocalElem</span><span class=\"params\">(LinkList L, ElemType value)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L-&gt;data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(LinkList L)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L-&gt;data);</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertFrontList</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> pos, ElemType val)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data = val;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除id对应的元素，删除L 不会变，不需要加引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>); <span class=\"comment\">// 拿到要删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList q = p-&gt;next; <span class=\"comment\">// 拿到要删除的节点指针</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next; <span class=\"comment\">// 断链</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q); <span class=\"comment\">// 释放被删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头插法新建链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkList L; <span class=\"comment\">// L是链表头指针，是数据机构的指针类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 头插法</span></span><br><span class=\"line\"><span class=\"comment\">//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表</span></span><br><span class=\"line\"><span class=\"comment\">//    printList(L);</span></span><br><span class=\"line\">    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">linkHeadInsert</span>(L);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList linkList = getElemIndex(L, 1);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (linkList != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, linkList-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList searchValue = getLocalElem(L, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (searchValue != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, searchValue-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\">    <span class=\"built_in\">insertFrontList</span>(L, <span class=\"number\">3</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">deleteList</span>(L, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;failer&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>C++数据结构单链表初始化、头插法、尾插法、按位置插入、按值查找、删除</p>\n<p>知道并理解单链表连理，练习并掌握代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> &#123;</span><br><span class=\"line\">    ElemType data; <span class=\"comment\">//数据域</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LNode</span> *next; <span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125; LNode, *LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LNode* 是结构体指针，和LinkList完全等价 头插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkHeadInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">linkTailInsert</span><span class=\"params\">(LinkList &amp;L)</span> </span>&#123;</span><br><span class=\"line\">    L = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode)); <span class=\"comment\">// 申请头节点空间，头指针指向头节点</span></span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    ElemType x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    LNode *s, *r = L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s; <span class=\"comment\">// 尾部节点指向新的节点</span></span><br><span class=\"line\">        r = s;  <span class=\"comment\">// 头节点的next,指向新节点；</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getElemIndex</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L &amp;&amp; i &lt; pos) &#123;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按值查找</span></span><br><span class=\"line\"><span class=\"function\">LinkList <span class=\"title\">getLocalElem</span><span class=\"params\">(LinkList L, ElemType value)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L-&gt;data == value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(LinkList L)</span> </span>&#123;</span><br><span class=\"line\">    L = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (L != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L-&gt;data);</span><br><span class=\"line\">        L = L-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertFrontList</span><span class=\"params\">(LinkList &amp;L, <span class=\"type\">int</span> pos, ElemType val)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LNode));</span><br><span class=\"line\">    s-&gt;data = val;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除id对应的元素，删除L 不会变，不需要加引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(LinkList L, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    LinkList p = <span class=\"built_in\">getElemIndex</span>(L, pos - <span class=\"number\">1</span>); <span class=\"comment\">// 拿到要删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList q = p-&gt;next; <span class=\"comment\">// 拿到要删除的节点指针</span></span><br><span class=\"line\">    p-&gt;next = q-&gt;next; <span class=\"comment\">// 断链</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q); <span class=\"comment\">// 释放被删除的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头插法新建链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkList L; <span class=\"comment\">// L是链表头指针，是数据机构的指针类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 头插法</span></span><br><span class=\"line\"><span class=\"comment\">//    linkHeadInsert(L); // 输入数据可以为3 4 5 6 7 9999,都插法新建链表</span></span><br><span class=\"line\"><span class=\"comment\">//    printList(L);</span></span><br><span class=\"line\">    <span class=\"comment\">// 尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">linkHeadInsert</span>(L);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList linkList = getElemIndex(L, 1);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (linkList != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, linkList-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 按位置查找</span></span><br><span class=\"line\"><span class=\"comment\">//    LinkList searchValue = getLocalElem(L, 5);</span></span><br><span class=\"line\"><span class=\"comment\">//    if (searchValue != NULL) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;data=%d\\n&quot;, searchValue-&gt;data);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        printf(&quot;no match&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// 新节点插入地i个位置</span></span><br><span class=\"line\">    <span class=\"built_in\">insertFrontList</span>(L, <span class=\"number\">3</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">deleteList</span>(L, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;failer&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(L);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"C++数据结构顺序表代码","abbrlink":"2f15bdd3","date":"2023-05-08T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"\nC++数据结构顺序表代码练习\n\n插入、删除、查找\n\n```c++\n#include <cstdlib>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid change(char*& p) {\n    p = (char*)malloc(100);\n    fgets(p, 100, stdin);\n}\n\n#define MaxSize 50\ntypedef int ElemType; // 让顺序表存储其他类型元素时，可以快速修改代码\ntypedef struct {\n    ElemType data[MaxSize];\n    int length; // 顺序表长度\n} SqlList;\n\n// 插入\nbool insertList(SqlList& L, int i, ElemType e) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = L.length; j >= i; j--) {\n        L.data[j] = L.data[j - 1];\n    }\n    L.data[i - 1] = e;\n    L.length++;\n\n    return true;\n}\n\n// 删除\nbool deleteList(SqlList& L, int i) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1] = L.data[j];\n    }\n    L.length--;\n    return true;\n}\n\n// 打印\nvoid printlist(SqlList L) {\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%3d\", L.data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    // char *p;\n    // scanf(\"%s\",p);\n    // change(p);\n    // puts(p);\n    // free(p);\n    SqlList L;\n    L.data[0] = 6;\n    L.data[1] = 7;\n    L.data[2] = 8;\n    L.length = 3;\n    int a;\n    scanf(\"%d\", &a);\n    // printlist(L);\n    bool ret = insertList(L, 2, a);\n    if (ret) {\n        printlist(L);\n    } else {\n        printf(\"\");\n    }\n    // 删除\n    int d;\n    scanf(\"%d\",&d);\n    bool dd = deleteList(L,d);\n    if(dd){\n        printlist(L);\n    }else {\n        printf(\"false\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数据结构顺序表代码.md","raw":"---\ntitle: C++数据结构顺序表代码\ntags: 数据结构\ncategories: 顺序表\nabbrlink: 2f15bdd3\ndate: 2023-05-08 16:22:35\ncover:\n---\n\nC++数据结构顺序表代码练习\n\n插入、删除、查找\n\n```c++\n#include <cstdlib>\n#include <stdio.h>\n#include <stdlib.h>\n\nvoid change(char*& p) {\n    p = (char*)malloc(100);\n    fgets(p, 100, stdin);\n}\n\n#define MaxSize 50\ntypedef int ElemType; // 让顺序表存储其他类型元素时，可以快速修改代码\ntypedef struct {\n    ElemType data[MaxSize];\n    int length; // 顺序表长度\n} SqlList;\n\n// 插入\nbool insertList(SqlList& L, int i, ElemType e) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = L.length; j >= i; j--) {\n        L.data[j] = L.data[j - 1];\n    }\n    L.data[i - 1] = e;\n    L.length++;\n\n    return true;\n}\n\n// 删除\nbool deleteList(SqlList& L, int i) {\n    if (i < 1 || i > L.length) {\n        return false;\n    }\n    for (int j = i; j < L.length; j++) {\n        L.data[j-1] = L.data[j];\n    }\n    L.length--;\n    return true;\n}\n\n// 打印\nvoid printlist(SqlList L) {\n    for (int i = 0; i < L.length; i++) {\n        printf(\"%3d\", L.data[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    // char *p;\n    // scanf(\"%s\",p);\n    // change(p);\n    // puts(p);\n    // free(p);\n    SqlList L;\n    L.data[0] = 6;\n    L.data[1] = 7;\n    L.data[2] = 8;\n    L.length = 3;\n    int a;\n    scanf(\"%d\", &a);\n    // printlist(L);\n    bool ret = insertList(L, 2, a);\n    if (ret) {\n        printlist(L);\n    } else {\n        printf(\"\");\n    }\n    // 删除\n    int d;\n    scanf(\"%d\",&d);\n    bool dd = deleteList(L,d);\n    if(dd){\n        printlist(L);\n    }else {\n        printf(\"false\\n\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"数据结构顺序表代码","published":1,"updated":"2023-05-11T07:04:26.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxn001sw0uhfea62jux","content":"<p>C++数据结构顺序表代码练习</p>\n<p>插入、删除、查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">char</span>*&amp; p)</span> </span>&#123;</span><br><span class=\"line\">    p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(p, <span class=\"number\">100</span>, stdin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType; <span class=\"comment\">// 让顺序表存储其他类型元素时，可以快速修改代码</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length; <span class=\"comment\">// 顺序表长度</span></span><br><span class=\"line\">&#125; SqlList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">        L.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>] = L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printlist</span><span class=\"params\">(SqlList L)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// char *p;</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%s&quot;,p);</span></span><br><span class=\"line\">    <span class=\"comment\">// change(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// puts(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// free(p);</span></span><br><span class=\"line\">    SqlList L;</span><br><span class=\"line\">    L.data[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">1</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">2</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    L.length = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"comment\">// printlist(L);</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">insertList</span>(L, <span class=\"number\">2</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">    <span class=\"type\">bool</span> dd = <span class=\"built_in\">deleteList</span>(L,d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dd)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>C++数据结构顺序表代码练习</p>\n<p>插入、删除、查找</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"type\">char</span>*&amp; p)</span> </span>&#123;</span><br><span class=\"line\">    p = (<span class=\"type\">char</span>*)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(p, <span class=\"number\">100</span>, stdin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType; <span class=\"comment\">// 让顺序表存储其他类型元素时，可以快速修改代码</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length; <span class=\"comment\">// 顺序表长度</span></span><br><span class=\"line\">&#125; SqlList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插入</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">insertList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L.length; j &gt;= i; j--) &#123;</span><br><span class=\"line\">        L.data[j] = L.data[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L.length++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deleteList</span><span class=\"params\">(SqlList&amp; L, <span class=\"type\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt; L.length; j++) &#123;</span><br><span class=\"line\">        L.data[j<span class=\"number\">-1</span>] = L.data[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printlist</span><span class=\"params\">(SqlList L)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%3d&quot;</span>, L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// char *p;</span></span><br><span class=\"line\">    <span class=\"comment\">// scanf(&quot;%s&quot;,p);</span></span><br><span class=\"line\">    <span class=\"comment\">// change(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// puts(p);</span></span><br><span class=\"line\">    <span class=\"comment\">// free(p);</span></span><br><span class=\"line\">    SqlList L;</span><br><span class=\"line\">    L.data[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">1</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">    L.data[<span class=\"number\">2</span>] = <span class=\"number\">8</span>;</span><br><span class=\"line\">    L.length = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">    <span class=\"comment\">// printlist(L);</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> ret = <span class=\"built_in\">insertList</span>(L, <span class=\"number\">2</span>, a);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 删除</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;d);</span><br><span class=\"line\">    <span class=\"type\">bool</span> dd = <span class=\"built_in\">deleteList</span>(L,d);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dd)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printlist</span>(L);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;false\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"C++队列的链式存储代码实现","abbrlink":"32dfacd1","date":"2023-05-10T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"\n队列的链式存储代码实现\n\n队列初始化、判断是否为空、入队尾插法、出队头部删除\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode* next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 是否为空 \nbool isEmpty(LinkQueue Q){\n\treturn (Q.front->next == NULL);\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode* p = (LinkNode*)malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next=p->next;//断链\n    if(Q.rear==p){//删除的是最后一个元素\n        Q.rear=Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 头部删除，尾部入队\nint main() {\n    LinkQueue Q;\n    bool ret;\n    // 初始化队列\n    initQueue(Q);\n    // 判断队列是否为空\n    ret = isEmpty(Q);\n    if(ret){\n        printf(\"队列为空\\n\");\n    }else {\n        printf(\"队列不为空\\n\");\n    }\n    // 入队，尾插法\n    enQueue(Q, 2);\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    enQueue(Q, 6);\n    // 出队\n    ElemType e;\n    ret = deQueue(Q,e);\n    if (ret) {\n       printf(\"出队元素：%d\\n\",e);\n    }else{\n       printf(\"出队失败\");\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/队列的链式存储代码实现.md","raw":"---\ntitle: C++队列的链式存储代码实现\ntags: 数据结构\ncategories: 队列\nabbrlink: 32dfacd1\ndate: 2023-05-10 16:22:35\ncover:\n---\n\n队列的链式存储代码实现\n\n队列初始化、判断是否为空、入队尾插法、出队头部删除\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElemType;\ntypedef struct LinkNode {\n    ElemType data;\n    struct LinkNode* next;\n} LinkNode;\n\ntypedef struct {\n    LinkNode *front, *rear;\n} LinkQueue; // 先进先出\n\n// 队列的初始化，使用的是带头节点的链表来实现的\nvoid initQueue(LinkQueue &Q) {\n    Q.front = Q.rear = (LinkNode*)malloc(sizeof(LinkNode));\n    Q.front->next = NULL; // 头指针指向\n}\n\n// 是否为空 \nbool isEmpty(LinkQueue Q){\n\treturn (Q.front->next == NULL);\n}\n\n// 入队，尾插法\nvoid enQueue(LinkQueue &Q, ElemType e) {\n    LinkNode* p = (LinkNode*)malloc(sizeof(LinkNode));\n    p->data = e;\n    p->next = NULL;   // next指向NULL\n    Q.rear->next = p; // 尾指针的 next指向p，因为要从尾部入队\n    Q.rear = p;       // rear要指向新的尾部\n}\n// 出队,头部删除方法\nbool deQueue(LinkQueue &Q, ElemType &e) {\n    // 判断队列为空\n    if (Q.front == Q.rear) {\n        return false;\n    }\n    LinkNode *p = Q.front->next;\n    e = p->data;\n    Q.front->next=p->next;//断链\n    if(Q.rear==p){//删除的是最后一个元素\n        Q.rear=Q.front;//队列置为空\n    }\n    free(p);\n    return true;\n}\n\n// 头部删除，尾部入队\nint main() {\n    LinkQueue Q;\n    bool ret;\n    // 初始化队列\n    initQueue(Q);\n    // 判断队列是否为空\n    ret = isEmpty(Q);\n    if(ret){\n        printf(\"队列为空\\n\");\n    }else {\n        printf(\"队列不为空\\n\");\n    }\n    // 入队，尾插法\n    enQueue(Q, 2);\n    enQueue(Q, 3);\n    enQueue(Q, 4);\n    enQueue(Q, 5);\n    enQueue(Q, 6);\n    // 出队\n    ElemType e;\n    ret = deQueue(Q,e);\n    if (ret) {\n       printf(\"出队元素：%d\\n\",e);\n    }else{\n       printf(\"出队失败\");\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"队列的链式存储代码实现","published":1,"updated":"2023-05-11T09:14:03.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxo001ww0uh7s4p0ch0","content":"<p>队列的链式存储代码实现</p>\n<p>队列初始化、判断是否为空、入队尾插法、出队头部删除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>* next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否为空 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkQueue Q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (Q.front-&gt;next == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode* p = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next=p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear==p)&#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear=Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头部删除，尾部入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    ElemType e;</span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队元素：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>队列的链式存储代码实现</p>\n<p>队列初始化、判断是否为空、入队尾插法、出队头部删除</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span> &#123;</span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkNode</span>* next;</span><br><span class=\"line\">&#125; LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    LinkNode *front, *rear;</span><br><span class=\"line\">&#125; LinkQueue; <span class=\"comment\">// 先进先出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 队列的初始化，使用的是带头节点的链表来实现的</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initQueue</span><span class=\"params\">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class=\"line\">    Q.front = Q.rear = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    Q.front-&gt;next = <span class=\"literal\">NULL</span>; <span class=\"comment\">// 头指针指向</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 是否为空 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmpty</span><span class=\"params\">(LinkQueue Q)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (Q.front-&gt;next == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">enQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    LinkNode* p = (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    p-&gt;data = e;</span><br><span class=\"line\">    p-&gt;next = <span class=\"literal\">NULL</span>;   <span class=\"comment\">// next指向NULL</span></span><br><span class=\"line\">    Q.rear-&gt;next = p; <span class=\"comment\">// 尾指针的 next指向p，因为要从尾部入队</span></span><br><span class=\"line\">    Q.rear = p;       <span class=\"comment\">// rear要指向新的尾部</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 出队,头部删除方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">deQueue</span><span class=\"params\">(LinkQueue &amp;Q, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q.front == Q.rear) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkNode *p = Q.front-&gt;next;</span><br><span class=\"line\">    e = p-&gt;data;</span><br><span class=\"line\">    Q.front-&gt;next=p-&gt;next;<span class=\"comment\">//断链</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Q.rear==p)&#123;<span class=\"comment\">//删除的是最后一个元素</span></span><br><span class=\"line\">        Q.rear=Q.front;<span class=\"comment\">//队列置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 头部删除，尾部入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    LinkQueue Q;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\">    <span class=\"built_in\">initQueue</span>(Q);</span><br><span class=\"line\">    <span class=\"comment\">// 判断队列是否为空</span></span><br><span class=\"line\">    ret = <span class=\"built_in\">isEmpty</span>(Q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;队列不为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入队，尾插法</span></span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enQueue</span>(Q, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 出队</span></span><br><span class=\"line\">    ElemType e;</span><br><span class=\"line\">    ret = <span class=\"built_in\">deQueue</span>(Q,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ret) &#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队元素：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;出队失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"数组实现栈的初始化入栈出栈操作","abbrlink":"ba62eb1b","date":"2023-05-08T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover3.jpg","_content":"\n数组实现栈的操作\n\n栈的初始化、入栈、出栈\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 栈的初始化、入栈、出栈\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize];\n    int top;\n} SqStack;\n\n// 初始化队列\nvoid initStack(SqStack &S) {\n    S.top = -1; // 代表栈为空\n}\n\n// 判断是否为空\nbool isEmptyStack(SqStack S) {\n    if (-1 == S.top) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// 入队\nbool enStack(SqStack &S, ElemType e) {\n    if (S.top == MaxSize - 1) { // 栈为空\n        return false;\n    }\n    S.data[++S.top] = e;\n    return true;\n}\n\n// 弹出栈顶元素\nbool pop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    S.data[S.top--] = e;\n    return true;\n}\n\n// 读取栈顶元素\nbool getTop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    e = S.data[S.top];\n    return true;\n}\n\nint main() {\n    SqStack S;\n    bool flag;\n    initStack(S);\n    flag = isEmptyStack(S);\n    if(flag){\n        printf(\"栈为空\\n\");\n    }\n    // 入栈\n    enStack(S,2);\n    enStack(S,3);\n    enStack(S,4);\n    // 获取栈顶元素\n    ElemType  e; //用于存放获取栈顶的元素\n    flag = getTop(S,e);\n    if(flag){\n        printf(\"栈顶元素是：%d\\n\",e);\n    }\n    // 出栈\n    flag = pop(S,e);\n    if(flag){\n        printf(\"弹出栈顶元素是：%d\\n\",e);\n    }\n    return 0;\n}\n```\n\n\n\n","source":"_posts/数组实现栈的初始化入栈出栈操作.md","raw":"---\ntitle: 数组实现栈的初始化入栈出栈操作\ntags: 数据结构\ncategories: 队列\nabbrlink: ba62eb1b\ndate: 2023-05-08 16:22:35\ncover:\n---\n\n数组实现栈的操作\n\n栈的初始化、入栈、出栈\n\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\n// 栈的初始化、入栈、出栈\n#define MaxSize 50\ntypedef int ElemType;\ntypedef struct {\n    ElemType data[MaxSize];\n    int top;\n} SqStack;\n\n// 初始化队列\nvoid initStack(SqStack &S) {\n    S.top = -1; // 代表栈为空\n}\n\n// 判断是否为空\nbool isEmptyStack(SqStack S) {\n    if (-1 == S.top) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// 入队\nbool enStack(SqStack &S, ElemType e) {\n    if (S.top == MaxSize - 1) { // 栈为空\n        return false;\n    }\n    S.data[++S.top] = e;\n    return true;\n}\n\n// 弹出栈顶元素\nbool pop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    S.data[S.top--] = e;\n    return true;\n}\n\n// 读取栈顶元素\nbool getTop(SqStack &S, ElemType &e) {\n    if (-1 == S.top) { // 栈为空\n        return false;\n    }\n    e = S.data[S.top];\n    return true;\n}\n\nint main() {\n    SqStack S;\n    bool flag;\n    initStack(S);\n    flag = isEmptyStack(S);\n    if(flag){\n        printf(\"栈为空\\n\");\n    }\n    // 入栈\n    enStack(S,2);\n    enStack(S,3);\n    enStack(S,4);\n    // 获取栈顶元素\n    ElemType  e; //用于存放获取栈顶的元素\n    flag = getTop(S,e);\n    if(flag){\n        printf(\"栈顶元素是：%d\\n\",e);\n    }\n    // 出栈\n    flag = pop(S,e);\n    if(flag){\n        printf(\"弹出栈顶元素是：%d\\n\",e);\n    }\n    return 0;\n}\n```\n\n\n\n","slug":"数组实现栈的初始化入栈出栈操作","published":1,"updated":"2023-05-11T09:14:03.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcxo001yw0uh3rkiftwe","content":"<p>数组实现栈的操作</p>\n<p>栈的初始化、入栈、出栈</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈的初始化、入栈、出栈</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>; <span class=\"comment\">// 代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyStack</span><span class=\"params\">(SqStack S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enStack</span><span class=\"params\">(SqStack &amp;S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[S.top--] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">getTop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    flag = <span class=\"built_in\">isEmptyStack</span>(S);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    ElemType  e; <span class=\"comment\">//用于存放获取栈顶的元素</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">getTop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">pop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;弹出栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>数组实现栈的操作</p>\n<p>栈的初始化、入栈、出栈</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 栈的初始化、入栈、出栈</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">initStack</span><span class=\"params\">(SqStack &amp;S)</span> </span>&#123;</span><br><span class=\"line\">    S.top = <span class=\"number\">-1</span>; <span class=\"comment\">// 代表栈为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isEmptyStack</span><span class=\"params\">(SqStack S)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 入队</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">enStack</span><span class=\"params\">(SqStack &amp;S, ElemType e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S.top == MaxSize - <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[++S.top] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">pop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    S.data[S.top--] = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取栈顶元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">getTop</span><span class=\"params\">(SqStack &amp;S, ElemType &amp;e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">-1</span> == S.top) &#123; <span class=\"comment\">// 栈为空</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e = S.data[S.top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flag;</span><br><span class=\"line\">    <span class=\"built_in\">initStack</span>(S);</span><br><span class=\"line\">    flag = <span class=\"built_in\">isEmptyStack</span>(S);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈为空\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 入栈</span></span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">enStack</span>(S,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    ElemType  e; <span class=\"comment\">//用于存放获取栈顶的元素</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">getTop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 出栈</span></span><br><span class=\"line\">    flag = <span class=\"built_in\">pop</span>(S,e);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;弹出栈顶元素是：%d\\n&quot;</span>,e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"abbrlink":"7e10b77c","title":"Linux服务器nginx部署及用配常置详解","date":"2023-05-04T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"## 安装 Nginx\n\n1、tar 压缩包安装，安装 `nginx` 需要先将官网下载的源码进行编译，编译依赖 `gcc` 环境，如果没有 `gcc` 环境，则需要安装：\n\n```\nyum install gcc-c++\n```\n\n2、 `linux` 上安装 `pcre` 库，`PCRE(Perl Compatible Regular Expressions)` 是一个 `Perl` 库，包括 `perl` 兼容的正则表达式库。`nginx` 的 `http` 模块使用 `pcre` 来解析正则表达式，所以需要在 `linux` 上安装 `pcre` 库，`pcre-devel` 是使用 `pcre` 开发的一个二次开发库。`nginx` 也需要此库。命令：\n\n```\nyum install -y pcre pcre-devel\n```\n\n3、`zlib` 安装，`zlib` 库提供了很多种压缩和解压缩的方式， `nginx` 使用 `zlib` 对 `http` 包的内容进行 `gzip` ，所以需要在 `Centos` 上安装 `zlib` 库\n\n```\nyum install -y zlib zlib-devel\n```\n\n4、 在 `linux` 安装 `openssl` 库，`OpenSSL` 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 `SSL` 协议，并提供丰富的应用程序供测试或其它目的使用。`nginx` 不仅支持 `http` 协议，还支持 `https`（即在 `ssl` 协议上传输 `http`），所以需要在 `Centos` 安装 `OpenSSL` 库。\n\n```\nyum install -y openssl openssl-devel\n```\n\n1~4 使用一条命令执行就是：\n\n```\nyum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n```\n\n4、进入压缩包所在目录，使用以下命令进行解压\n\n```\ntar -zxvf nginx-1.6.2.tar.gz\n```\n\n5、使用命令：`cd nginx-1.6.2.tar.gz`，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，`Linux` 上使用命令。\n\n6、使用命令：`cd nginx-1.6.2`，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，`Linux` 上使用命令和效果图如下：\n\n```\n# 可以直接运行 ./configure  命令\n./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module\n```\n\n7、在上步的基础上编译并安装，`Linux` 上使用命令和效果图如下(部分截图)，如果不按以上步骤会有两个错误，重新执行一遍即可\n\n```\nmake && make install\n# 安装到指定目录\nmake && make PREFIX=/usr/local/nginx install\n```\n\n**将 nginx 加到开机自启**(根据自己需要添加即可)\n\n```\necho \"/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &\" >>/etc/rc.local\n```\n\n## 卸载nginx\n\n1、首先通过命令：`ps -ef|grep nginx`，查看 `nginx` 运行状态\n\n2、如果 `nginx` 处于运行中的状态，使用命令：`kill -9` 进程号，杀掉进程\n\n3、全局查找 `nginx` 相关的文件所处路径，使用以下命令进行查询\n\n```\nsudo find / -name nginx*\n```\n\n4、根据上一步查询出的 `nginx` 相关路径，就可以使用以下命令逐一删除\n\n```\n# nginx* 代表自该目录起所有的子目录\n# 该条命令会删除/usr/local/路径下nginxd的整个文件夹(该文件的子文件都会删除掉)\nrm -rf file /usr/local/nginx*\n\n# 清除依赖\nyum remove nginx\n```\n\n5、通过以上几步，基本可以完全卸载 `nginx` ，以便重新安装 `nginx`\n\n## nginx常用命令\n\n```\n# 首先进入nginx目录\ncd /usr/local/nginx\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/usr/local/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n## Docker安装部署 nginx\n\n`nginx` 文件挂载到虚拟机外部\n\n1、运行 `nginx` ，把相关配置文件复制宿主机\n\n```\ndocker run --name mynginx -p 80:80 -p 443:443 -d nginx:latest\n```\n\n2、创建挂在的文件夹\n\n```\nmkdir -p /data/nginx/conf /data/nginx/log /data/nginx/html /data/nginx/ssl\n```\n\n3、将容器 `nginx.conf` 文件复制到宿主机\n\n```\ndocker cp mynginx:/etc/nginx/nginx.conf /data/nginx/conf/\n```\n\n4、将容器 `conf.d` 文件夹下内容复制到宿主机\n\n```\ndocker cp mynginx:/etc/nginx/conf.d /data/nginx/conf/conf.d\n```\n\n5、将容器中的 `html` 文件夹复制到宿主机\n\n```\ndocker cp mynginx:/usr/share/nginx/html /data/nginx/\n```\n\n6、强制删除正在运行的 `nginx`：`docker rm -f mynginx`\n\n7、重新启动运行 `nginx`\n\n```\ndocker run --name mynginx -p 80:80 -p 443:443 \\\n-v /data/nginx/html/:/usr/share/nginx/html \\\n-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /data/nginx/log:/var/log/nginx \\\n--privileged=true -e TZ=\"Asia/Shanghai\" -v /data/nginx/ssl/:/etc/nginx/ssl/:rw \\\n--restart=always -d nginx:latest\n\ndocker run --name my_nginx -p 80:80 \\\n-v /usr/local/docker/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\\n-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /usr/local/docker/nginx/html/:/usr/share/nginx/html/ \\\n-v /usr/local/docker/nginx/logs/:/var/log/nginx/ \\\n--privileged=true -d --restart=always nginx:latest\n\n\n# 停止服务\ndocker stop mynginx\n# 启动服务\ndocker start mynginx\n# 重启服务\ndocker restart mynginx\n# 强制删除并停止\ndocker rm -f mynginx\n```\n\n## nginx配置说明\n\n`nginx` 的负载均衡策略有4种：\n\n**轮询(默认)**\n\n最基本的配置方法，它是 `upstream` 的默认策略，每个请求会按时间顺序逐一分配到不同的后端服务器。\n\n参数有：\n\n| 参数         | 描述                                                         |\n| :----------- | :----------------------------------------------------------- |\n| fail_timeout | 与max_fails结合使用                                          |\n| max_fails    | 设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。 |\n| fail_time    | 服务器会被认为停机的时间长度,默认为10s。                     |\n| backup       | 标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。 |\n| down         | 标记服务器永久停机了。                                       |\n\n```\n##定义Nginx运行的用户和用户组。window下不指定\n#user  nobody;\n\n#nginx进程数,建议设置为等于CPU总核心数.\nworker_processes  1;\n\n#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]\n#error_log  /usr/local/nginx/log/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除,但是nginx分配请求并不均匀,所以建议与ulimit -n的值保持一致.\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents {\n     #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器 \nhttp {\n    include       mime.types; #文件扩展名与文件类型映射表\n    default_type  application/octet-stream; #默认文件类型\n\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n     \n    # 开启目录列表访问,合适下载服务器,默认关闭.\n    autoindex on; # 显示目录\n    autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB\n    autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间\n     \n    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.\n    tcp_nopush on; # 防止网络阻塞\n    tcp_nodelay on; # 防止网络阻塞\n     \n    keepalive_timeout 120; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接\n     \n    # FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n     \n    # gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #允许压缩的页面的最小字节数,页面字节数从header偷得content-length中获取.默认是0,不管页面多大都进行压缩.建议设置成大于1k的字节数,小于1k可能会越压越大\n    gzip_buffers 4 16k; #表示申请4个单位为16k的内存作为压缩结果流缓存,默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果\n    gzip_http_version 1.1; #压缩版本（默认1.1,目前大部分浏览器已经支持gzip解压.前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级.1压缩比最小,处理速度快.9压缩比最大,比较消耗cpu资源,处理速度最慢,但是因为压缩比最大,所以包最小,传输速度快\n    gzip_types text/plain application/x-javascript text/css application/xml;\n    #压缩类型,默认就已经包含text/html,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.\n    gzip_vary on;#选项可以让前端的缓存服务器缓存经过gzip压缩的页面.例如:用squid缓存经过nginx压缩的数据\n     \n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n   #####################################################################################################\n ##upstream的负载均衡,四种调度算法##\n    #调度算法1:轮询.每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动剔除,使用户访问不受影响\n    upstream webhost {\n        server localhost:8001 max_fails=3 fail_timeout=20s;\n        server localhost:8002;\n        server localhost:8003 backup;\n        server localhost:8003 down;\n        server localhost:8003 weight=2;\n    }\n    #调度算法2:weight(权重).可以根据机器配置定义权重.权重越高被分配到的几率越大\n    upstream webhost {\n        server localhost:8001 weight=2;\n        server localhost:8002 weight=3;\n    }\n    #调度算法3:ip_hash. 每个请求按访问IP的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在的session共享问题\n    upstream webhost {\n        ip_hash;\n        server localhost:8001;\n        server localhost:8002;\n    }\n    #调度算法4:url_hash(需安装第三方插件).此方法按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.Nginx本身是不支持url_hash的,如果需要使用这种调度算法,必须安装Nginx 的hash软件包\n    upstream webhost {\n        server localhost:8001;\n        server localhost:8002;\n        hash $request_uri;\n    }\n\n   # 如果要监听两个端口需要添加server内容\n   server {\n    \n        listen       8080;\n        # 域名可以有多个,用空格隔开\n        server_name  127.0.0.1;\n        server_name baidu.com;\n        # HTTP 自动跳转 HTTPS\n        # rewrite ^(.*) https://$server_name$1 permanent;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /usr/local/java/ry-v/qd;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n        \n        #代理头\n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   # 后端代理地址\n   proxy_pass http://101.133.170.222:8080/;\n   # 多个路径部署 proxy_pass http://wenhost/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n #虚拟主机的配置\n    server {\n    \n        listen       80;\n        # 域名可以有多个,用空格隔开\n        server_name baidu.com;\n        # HTTP 自动跳转 HTTPS\n        rewrite ^(.*) https://$server_name$1 permanent;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /prod-api/ {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # \n    HTTPS server\n    #\n    # 监听端口 HTTPS\n    server {\n        listen       443 ssl;\n        server_name  www.nginx.cn;\n        \n        #ssl_certificate ./ssl/[server_name].pem; # 指定证书的位置，Linux上可以设置相对路径，Windows上要设置绝对路径\n        #ssl_certificate_key ./ssl/[server_name].key; # 同上 \n        #ssl_trusted_certificate ./ssl/[server_name].cer;\n          \n        # 配置域名证书\n        ssl_certificate         ./ssl/fullchain.cer; \n        ssl_certificate_key     ./ssl/[server_name].key;\n        ssl_session_cache    shared:SSL:1m;\n\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n        \n        proxy_set_header    Host                  $host;\n        proxy_set_header    X-Real-IP             $remote_addr;\n        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;\n     proxy_set_header    X-Forwarded-Proto     $scheme;\n\n  location / {\n          proxy_connect_timeout 1;\n          proxy_pass http://www.nginx.cn;\n        }\n        \n        # 配置地址拦截转发，解决跨域验证问题\n        location /oauth/{\n            proxy_pass https://localhost:8080/oauth/;\n            proxy_set_header HOST $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n        \n        # JS和CSS缓存时间设置\n        location ~ .*\\.(js|css)?$ {\n            expires 1h;\n        }\n        # 日志格式设定\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n        # 定义本虚拟主机的访问日志\n        access_log /usr/local/nginx/log/access.log access;\n        \n        # 设定查看Nginx状态的地址.StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file conf/htpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生.\n        }\n        error_page 404 500 502 503 504 /50x.html;\n      }\n}\nnohup` 后台守护进程方式运行项目：`nohup java -jar project.jar >nohup.out 2>&1 &\n```\n\n## nginx常用命令\n\n```\n# 首先进入nginx目录\ncd /usr/local/nginx\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/usr/local/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n\n\n\n","source":"_posts/20220504Linux服务器nginx部署及用配常置详解.md","raw":"---\nabbrlink: 7e10b77c\ntitle: Linux服务器nginx部署及用配常置详解\ntags: nginx\ncategories: 后端\ndate: 2023-05-04 16:22:35\ncover:\n---\n## 安装 Nginx\n\n1、tar 压缩包安装，安装 `nginx` 需要先将官网下载的源码进行编译，编译依赖 `gcc` 环境，如果没有 `gcc` 环境，则需要安装：\n\n```\nyum install gcc-c++\n```\n\n2、 `linux` 上安装 `pcre` 库，`PCRE(Perl Compatible Regular Expressions)` 是一个 `Perl` 库，包括 `perl` 兼容的正则表达式库。`nginx` 的 `http` 模块使用 `pcre` 来解析正则表达式，所以需要在 `linux` 上安装 `pcre` 库，`pcre-devel` 是使用 `pcre` 开发的一个二次开发库。`nginx` 也需要此库。命令：\n\n```\nyum install -y pcre pcre-devel\n```\n\n3、`zlib` 安装，`zlib` 库提供了很多种压缩和解压缩的方式， `nginx` 使用 `zlib` 对 `http` 包的内容进行 `gzip` ，所以需要在 `Centos` 上安装 `zlib` 库\n\n```\nyum install -y zlib zlib-devel\n```\n\n4、 在 `linux` 安装 `openssl` 库，`OpenSSL` 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 `SSL` 协议，并提供丰富的应用程序供测试或其它目的使用。`nginx` 不仅支持 `http` 协议，还支持 `https`（即在 `ssl` 协议上传输 `http`），所以需要在 `Centos` 安装 `OpenSSL` 库。\n\n```\nyum install -y openssl openssl-devel\n```\n\n1~4 使用一条命令执行就是：\n\n```\nyum -y install gcc pcre-devel zlib-devel openssl openssl-devel\n```\n\n4、进入压缩包所在目录，使用以下命令进行解压\n\n```\ntar -zxvf nginx-1.6.2.tar.gz\n```\n\n5、使用命令：`cd nginx-1.6.2.tar.gz`，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，`Linux` 上使用命令。\n\n6、使用命令：`cd nginx-1.6.2`，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，`Linux` 上使用命令和效果图如下：\n\n```\n# 可以直接运行 ./configure  命令\n./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module\n```\n\n7、在上步的基础上编译并安装，`Linux` 上使用命令和效果图如下(部分截图)，如果不按以上步骤会有两个错误，重新执行一遍即可\n\n```\nmake && make install\n# 安装到指定目录\nmake && make PREFIX=/usr/local/nginx install\n```\n\n**将 nginx 加到开机自启**(根据自己需要添加即可)\n\n```\necho \"/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &\" >>/etc/rc.local\n```\n\n## 卸载nginx\n\n1、首先通过命令：`ps -ef|grep nginx`，查看 `nginx` 运行状态\n\n2、如果 `nginx` 处于运行中的状态，使用命令：`kill -9` 进程号，杀掉进程\n\n3、全局查找 `nginx` 相关的文件所处路径，使用以下命令进行查询\n\n```\nsudo find / -name nginx*\n```\n\n4、根据上一步查询出的 `nginx` 相关路径，就可以使用以下命令逐一删除\n\n```\n# nginx* 代表自该目录起所有的子目录\n# 该条命令会删除/usr/local/路径下nginxd的整个文件夹(该文件的子文件都会删除掉)\nrm -rf file /usr/local/nginx*\n\n# 清除依赖\nyum remove nginx\n```\n\n5、通过以上几步，基本可以完全卸载 `nginx` ，以便重新安装 `nginx`\n\n## nginx常用命令\n\n```\n# 首先进入nginx目录\ncd /usr/local/nginx\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/usr/local/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n## Docker安装部署 nginx\n\n`nginx` 文件挂载到虚拟机外部\n\n1、运行 `nginx` ，把相关配置文件复制宿主机\n\n```\ndocker run --name mynginx -p 80:80 -p 443:443 -d nginx:latest\n```\n\n2、创建挂在的文件夹\n\n```\nmkdir -p /data/nginx/conf /data/nginx/log /data/nginx/html /data/nginx/ssl\n```\n\n3、将容器 `nginx.conf` 文件复制到宿主机\n\n```\ndocker cp mynginx:/etc/nginx/nginx.conf /data/nginx/conf/\n```\n\n4、将容器 `conf.d` 文件夹下内容复制到宿主机\n\n```\ndocker cp mynginx:/etc/nginx/conf.d /data/nginx/conf/conf.d\n```\n\n5、将容器中的 `html` 文件夹复制到宿主机\n\n```\ndocker cp mynginx:/usr/share/nginx/html /data/nginx/\n```\n\n6、强制删除正在运行的 `nginx`：`docker rm -f mynginx`\n\n7、重新启动运行 `nginx`\n\n```\ndocker run --name mynginx -p 80:80 -p 443:443 \\\n-v /data/nginx/html/:/usr/share/nginx/html \\\n-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \\\n-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /data/nginx/log:/var/log/nginx \\\n--privileged=true -e TZ=\"Asia/Shanghai\" -v /data/nginx/ssl/:/etc/nginx/ssl/:rw \\\n--restart=always -d nginx:latest\n\ndocker run --name my_nginx -p 80:80 \\\n-v /usr/local/docker/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\\n-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\\n-v /usr/local/docker/nginx/html/:/usr/share/nginx/html/ \\\n-v /usr/local/docker/nginx/logs/:/var/log/nginx/ \\\n--privileged=true -d --restart=always nginx:latest\n\n\n# 停止服务\ndocker stop mynginx\n# 启动服务\ndocker start mynginx\n# 重启服务\ndocker restart mynginx\n# 强制删除并停止\ndocker rm -f mynginx\n```\n\n## nginx配置说明\n\n`nginx` 的负载均衡策略有4种：\n\n**轮询(默认)**\n\n最基本的配置方法，它是 `upstream` 的默认策略，每个请求会按时间顺序逐一分配到不同的后端服务器。\n\n参数有：\n\n| 参数         | 描述                                                         |\n| :----------- | :----------------------------------------------------------- |\n| fail_timeout | 与max_fails结合使用                                          |\n| max_fails    | 设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。 |\n| fail_time    | 服务器会被认为停机的时间长度,默认为10s。                     |\n| backup       | 标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。 |\n| down         | 标记服务器永久停机了。                                       |\n\n```\n##定义Nginx运行的用户和用户组。window下不指定\n#user  nobody;\n\n#nginx进程数,建议设置为等于CPU总核心数.\nworker_processes  1;\n\n#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]\n#error_log  /usr/local/nginx/log/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#进程文件\n#pid        logs/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除,但是nginx分配请求并不均匀,所以建议与ulimit -n的值保持一致.\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents {\n     #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器 \nhttp {\n    include       mime.types; #文件扩展名与文件类型映射表\n    default_type  application/octet-stream; #默认文件类型\n\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n     \n    # 开启目录列表访问,合适下载服务器,默认关闭.\n    autoindex on; # 显示目录\n    autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB\n    autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间\n     \n    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.\n    tcp_nopush on; # 防止网络阻塞\n    tcp_nodelay on; # 防止网络阻塞\n     \n    keepalive_timeout 120; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接\n     \n    # FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n     \n    # gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #允许压缩的页面的最小字节数,页面字节数从header偷得content-length中获取.默认是0,不管页面多大都进行压缩.建议设置成大于1k的字节数,小于1k可能会越压越大\n    gzip_buffers 4 16k; #表示申请4个单位为16k的内存作为压缩结果流缓存,默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果\n    gzip_http_version 1.1; #压缩版本（默认1.1,目前大部分浏览器已经支持gzip解压.前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级.1压缩比最小,处理速度快.9压缩比最大,比较消耗cpu资源,处理速度最慢,但是因为压缩比最大,所以包最小,传输速度快\n    gzip_types text/plain application/x-javascript text/css application/xml;\n    #压缩类型,默认就已经包含text/html,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.\n    gzip_vary on;#选项可以让前端的缓存服务器缓存经过gzip压缩的页面.例如:用squid缓存经过nginx压缩的数据\n     \n    #开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n   #####################################################################################################\n ##upstream的负载均衡,四种调度算法##\n    #调度算法1:轮询.每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动剔除,使用户访问不受影响\n    upstream webhost {\n        server localhost:8001 max_fails=3 fail_timeout=20s;\n        server localhost:8002;\n        server localhost:8003 backup;\n        server localhost:8003 down;\n        server localhost:8003 weight=2;\n    }\n    #调度算法2:weight(权重).可以根据机器配置定义权重.权重越高被分配到的几率越大\n    upstream webhost {\n        server localhost:8001 weight=2;\n        server localhost:8002 weight=3;\n    }\n    #调度算法3:ip_hash. 每个请求按访问IP的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在的session共享问题\n    upstream webhost {\n        ip_hash;\n        server localhost:8001;\n        server localhost:8002;\n    }\n    #调度算法4:url_hash(需安装第三方插件).此方法按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.Nginx本身是不支持url_hash的,如果需要使用这种调度算法,必须安装Nginx 的hash软件包\n    upstream webhost {\n        server localhost:8001;\n        server localhost:8002;\n        hash $request_uri;\n    }\n\n   # 如果要监听两个端口需要添加server内容\n   server {\n    \n        listen       8080;\n        # 域名可以有多个,用空格隔开\n        server_name  127.0.0.1;\n        server_name baidu.com;\n        # HTTP 自动跳转 HTTPS\n        # rewrite ^(.*) https://$server_name$1 permanent;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /usr/local/java/ry-v/qd;\n   try_files $uri $uri/ /index.html;\n            index  index.html index.htm;\n        }\n        \n        #代理头\n  location /prod-api/ {\n   proxy_set_header Host $http_host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header REMOTE-HOST $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   # 后端代理地址\n   proxy_pass http://101.133.170.222:8080/;\n   # 多个路径部署 proxy_pass http://wenhost/;\n  }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n\n #虚拟主机的配置\n    server {\n    \n        listen       80;\n        # 域名可以有多个,用空格隔开\n        server_name baidu.com;\n        # HTTP 自动跳转 HTTPS\n        rewrite ^(.*) https://$server_name$1 permanent;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location /prod-api/ {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # \n    HTTPS server\n    #\n    # 监听端口 HTTPS\n    server {\n        listen       443 ssl;\n        server_name  www.nginx.cn;\n        \n        #ssl_certificate ./ssl/[server_name].pem; # 指定证书的位置，Linux上可以设置相对路径，Windows上要设置绝对路径\n        #ssl_certificate_key ./ssl/[server_name].key; # 同上 \n        #ssl_trusted_certificate ./ssl/[server_name].cer;\n          \n        # 配置域名证书\n        ssl_certificate         ./ssl/fullchain.cer; \n        ssl_certificate_key     ./ssl/[server_name].key;\n        ssl_session_cache    shared:SSL:1m;\n\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;\n        ssl_prefer_server_ciphers on;\n        \n        proxy_set_header    Host                  $host;\n        proxy_set_header    X-Real-IP             $remote_addr;\n        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;\n     proxy_set_header    X-Forwarded-Proto     $scheme;\n\n  location / {\n          proxy_connect_timeout 1;\n          proxy_pass http://www.nginx.cn;\n        }\n        \n        # 配置地址拦截转发，解决跨域验证问题\n        location /oauth/{\n            proxy_pass https://localhost:8080/oauth/;\n            proxy_set_header HOST $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n        \n        # JS和CSS缓存时间设置\n        location ~ .*\\.(js|css)?$ {\n            expires 1h;\n        }\n        # 日志格式设定\n        log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n        '$status $body_bytes_sent \"$http_referer\" '\n        '\"$http_user_agent\" $http_x_forwarded_for';\n        # 定义本虚拟主机的访问日志\n        access_log /usr/local/nginx/log/access.log access;\n        \n        # 设定查看Nginx状态的地址.StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用\n        location /NginxStatus {\n            stub_status on;\n            access_log on;\n            auth_basic \"NginxStatus\";\n            auth_basic_user_file conf/htpasswd;\n            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生.\n        }\n        error_page 404 500 502 503 504 /50x.html;\n      }\n}\nnohup` 后台守护进程方式运行项目：`nohup java -jar project.jar >nohup.out 2>&1 &\n```\n\n## nginx常用命令\n\n```\n# 首先进入nginx目录\ncd /usr/local/nginx\n./nginx  # 启动\n./nginx -s stop  # 停止(暴力停止服务)\n./nginx -s quit  # 安全退出(优雅停止服务)\n./nginx -s reload  # 重新加载配置文件\n./nginx -h # 帮助命令\n./nginx -t # 检查配置文件\n/usr/local/nginx/conf/nginx.conf # nginx配置文件路径\nps aux|grep nginx  # 查看nginx进程\n```\n\n\n\n\n","slug":"20220504Linux服务器nginx部署及用配常置详解","published":1,"updated":"2023-05-12T11:38:48.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcy8002yw0uhhvcp9eh6","content":"<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><p>1、tar 压缩包安装，安装 <code>nginx</code> 需要先将官网下载的源码进行编译，编译依赖 <code>gcc</code> 环境，如果没有 <code>gcc</code> 环境，则需要安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>2、 <code>linux</code> 上安装 <code>pcre</code> 库，<code>PCRE(Perl Compatible Regular Expressions)</code> 是一个 <code>Perl</code> 库，包括 <code>perl</code> 兼容的正则表达式库。<code>nginx</code> 的 <code>http</code> 模块使用 <code>pcre</code> 来解析正则表达式，所以需要在 <code>linux</code> 上安装 <code>pcre</code> 库，<code>pcre-devel</code> 是使用 <code>pcre</code> 开发的一个二次开发库。<code>nginx</code> 也需要此库。命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p>3、<code>zlib</code> 安装，<code>zlib</code> 库提供了很多种压缩和解压缩的方式， <code>nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包的内容进行 <code>gzip</code> ，所以需要在 <code>Centos</code> 上安装 <code>zlib</code> 库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>4、 在 <code>linux</code> 安装 <code>openssl</code> 库，<code>OpenSSL</code> 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 <code>SSL</code> 协议，并提供丰富的应用程序供测试或其它目的使用。<code>nginx</code> 不仅支持 <code>http</code> 协议，还支持 <code>https</code>（即在 <code>ssl</code> 协议上传输 <code>http</code>），所以需要在 <code>Centos</code> 安装 <code>OpenSSL</code> 库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>1~4 使用一条命令执行就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>4、进入压缩包所在目录，使用以下命令进行解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>5、使用命令：<code>cd nginx-1.6.2.tar.gz</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令。</p>\n<p>6、使用命令：<code>cd nginx-1.6.2</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令和效果图如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可以直接运行 ./configure  命令</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure>\n\n<p>7、在上步的基础上编译并安装，<code>Linux</code> 上使用命令和效果图如下(部分截图)，如果不按以上步骤会有两个错误，重新执行一遍即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"># 安装到指定目录</span><br><span class=\"line\">make &amp;&amp; make PREFIX=/usr/local/nginx install</span><br></pre></td></tr></table></figure>\n\n<p><strong>将 nginx 加到开机自启</strong>(根据自己需要添加即可)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &amp;&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卸载nginx\"><a href=\"#卸载nginx\" class=\"headerlink\" title=\"卸载nginx\"></a>卸载nginx</h2><p>1、首先通过命令：<code>ps -ef|grep nginx</code>，查看 <code>nginx</code> 运行状态</p>\n<p>2、如果 <code>nginx</code> 处于运行中的状态，使用命令：<code>kill -9</code> 进程号，杀掉进程</p>\n<p>3、全局查找 <code>nginx</code> 相关的文件所处路径，使用以下命令进行查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find / -name nginx*</span><br></pre></td></tr></table></figure>\n\n<p>4、根据上一步查询出的 <code>nginx</code> 相关路径，就可以使用以下命令逐一删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx* 代表自该目录起所有的子目录</span><br><span class=\"line\"># 该条命令会删除/usr/local/路径下nginxd的整个文件夹(该文件的子文件都会删除掉)</span><br><span class=\"line\">rm -rf file /usr/local/nginx*</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除依赖</span><br><span class=\"line\">yum remove nginx</span><br></pre></td></tr></table></figure>\n\n<p>5、通过以上几步，基本可以完全卸载 <code>nginx</code> ，以便重新安装 <code>nginx</code></p>\n<h2 id=\"nginx常用命令\"><a href=\"#nginx常用命令\" class=\"headerlink\" title=\"nginx常用命令\"></a>nginx常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先进入nginx目录</span><br><span class=\"line\">cd /usr/local/nginx</span><br><span class=\"line\">./nginx  # 启动</span><br><span class=\"line\">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class=\"line\">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class=\"line\">./nginx -s reload  # 重新加载配置文件</span><br><span class=\"line\">./nginx -h # 帮助命令</span><br><span class=\"line\">./nginx -t # 检查配置文件</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class=\"line\">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker安装部署-nginx\"><a href=\"#Docker安装部署-nginx\" class=\"headerlink\" title=\"Docker安装部署 nginx\"></a>Docker安装部署 nginx</h2><p><code>nginx</code> 文件挂载到虚拟机外部</p>\n<p>1、运行 <code>nginx</code> ，把相关配置文件复制宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -p 80:80 -p 443:443 -d nginx:latest</span><br></pre></td></tr></table></figure>\n\n<p>2、创建挂在的文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/conf /data/nginx/log /data/nginx/html /data/nginx/ssl</span><br></pre></td></tr></table></figure>\n\n<p>3、将容器 <code>nginx.conf</code> 文件复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/etc/nginx/nginx.conf /data/nginx/conf/</span><br></pre></td></tr></table></figure>\n\n<p>4、将容器 <code>conf.d</code> 文件夹下内容复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/etc/nginx/conf.d /data/nginx/conf/conf.d</span><br></pre></td></tr></table></figure>\n\n<p>5、将容器中的 <code>html</code> 文件夹复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/usr/share/nginx/html /data/nginx/</span><br></pre></td></tr></table></figure>\n\n<p>6、强制删除正在运行的 <code>nginx</code>：<code>docker rm -f mynginx</code></p>\n<p>7、重新启动运行 <code>nginx</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -p 80:80 -p 443:443 \\</span><br><span class=\"line\">-v /data/nginx/html/:/usr/share/nginx/html \\</span><br><span class=\"line\">-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \\</span><br><span class=\"line\">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v /data/nginx/log:/var/log/nginx \\</span><br><span class=\"line\">--privileged=true -e TZ=&quot;Asia/Shanghai&quot; -v /data/nginx/ssl/:/etc/nginx/ssl/:rw \\</span><br><span class=\"line\">--restart=always -d nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name my_nginx -p 80:80 \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/html/:/usr/share/nginx/html/ \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/logs/:/var/log/nginx/ \\</span><br><span class=\"line\">--privileged=true -d --restart=always nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">docker stop mynginx</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">docker start mynginx</span><br><span class=\"line\"># 重启服务</span><br><span class=\"line\">docker restart mynginx</span><br><span class=\"line\"># 强制删除并停止</span><br><span class=\"line\">docker rm -f mynginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx配置说明\"><a href=\"#nginx配置说明\" class=\"headerlink\" title=\"nginx配置说明\"></a>nginx配置说明</h2><p><code>nginx</code> 的负载均衡策略有4种：</p>\n<p><strong>轮询(默认)</strong></p>\n<p>最基本的配置方法，它是 <code>upstream</code> 的默认策略，每个请求会按时间顺序逐一分配到不同的后端服务器。</p>\n<p>参数有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">fail_timeout</td>\n<td align=\"left\">与max_fails结合使用</td>\n</tr>\n<tr>\n<td align=\"left\">max_fails</td>\n<td align=\"left\">设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td>\n</tr>\n<tr>\n<td align=\"left\">fail_time</td>\n<td align=\"left\">服务器会被认为停机的时间长度,默认为10s。</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</td>\n</tr>\n<tr>\n<td align=\"left\">down</td>\n<td align=\"left\">标记服务器永久停机了。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##定义Nginx运行的用户和用户组。window下不指定</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数,建议设置为等于CPU总核心数.</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  /usr/local/nginx/log/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除,但是nginx分配请求并不均匀,所以建议与ulimit -n的值保持一致.</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">     #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器 </span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type  application/octet-stream; #默认文件类型</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">     </span><br><span class=\"line\">    # 开启目录列表访问,合适下载服务器,默认关闭.</span><br><span class=\"line\">    autoindex on; # 显示目录</span><br><span class=\"line\">    autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB</span><br><span class=\"line\">    autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间</span><br><span class=\"line\">     </span><br><span class=\"line\">    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.</span><br><span class=\"line\">    tcp_nopush on; # 防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; # 防止网络阻塞</span><br><span class=\"line\">     </span><br><span class=\"line\">    keepalive_timeout 120; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接</span><br><span class=\"line\">     </span><br><span class=\"line\">    # FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\">     </span><br><span class=\"line\">    # gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #允许压缩的页面的最小字节数,页面字节数从header偷得content-length中获取.默认是0,不管页面多大都进行压缩.建议设置成大于1k的字节数,小于1k可能会越压越大</span><br><span class=\"line\">    gzip_buffers 4 16k; #表示申请4个单位为16k的内存作为压缩结果流缓存,默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果</span><br><span class=\"line\">    gzip_http_version 1.1; #压缩版本（默认1.1,目前大部分浏览器已经支持gzip解压.前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级.1压缩比最小,处理速度快.9压缩比最大,比较消耗cpu资源,处理速度最慢,但是因为压缩比最大,所以包最小,传输速度快</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #压缩类型,默认就已经包含text/html,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.</span><br><span class=\"line\">    gzip_vary on;#选项可以让前端的缓存服务器缓存经过gzip压缩的页面.例如:用squid缓存经过nginx压缩的数据</span><br><span class=\"line\">     </span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">   #####################################################################################################</span><br><span class=\"line\"> ##upstream的负载均衡,四种调度算法##</span><br><span class=\"line\">    #调度算法1:轮询.每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动剔除,使用户访问不受影响</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001 max_fails=3 fail_timeout=20s;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">        server localhost:8003 backup;</span><br><span class=\"line\">        server localhost:8003 down;</span><br><span class=\"line\">        server localhost:8003 weight=2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法2:weight(权重).可以根据机器配置定义权重.权重越高被分配到的几率越大</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001 weight=2;</span><br><span class=\"line\">        server localhost:8002 weight=3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法3:ip_hash. 每个请求按访问IP的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在的session共享问题</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">        server localhost:8001;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法4:url_hash(需安装第三方插件).此方法按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.Nginx本身是不支持url_hash的,如果需要使用这种调度算法,必须安装Nginx 的hash软件包</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">        hash $request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   # 如果要监听两个端口需要添加server内容</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        listen       8080;</span><br><span class=\"line\">        # 域名可以有多个,用空格隔开</span><br><span class=\"line\">        server_name  127.0.0.1;</span><br><span class=\"line\">        server_name baidu.com;</span><br><span class=\"line\">        # HTTP 自动跳转 HTTPS</span><br><span class=\"line\">        # rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /usr/local/java/ry-v/qd;</span><br><span class=\"line\">   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #代理头</span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host $http_host;</span><br><span class=\"line\">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   # 后端代理地址</span><br><span class=\"line\">   proxy_pass http://101.133.170.222:8080/;</span><br><span class=\"line\">   # 多个路径部署 proxy_pass http://wenhost/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        # 域名可以有多个,用空格隔开</span><br><span class=\"line\">        server_name baidu.com;</span><br><span class=\"line\">        # HTTP 自动跳转 HTTPS</span><br><span class=\"line\">        rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /prod-api/ &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # </span><br><span class=\"line\">    HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 监听端口 HTTPS</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  www.nginx.cn;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #ssl_certificate ./ssl/[server_name].pem; # 指定证书的位置，Linux上可以设置相对路径，Windows上要设置绝对路径</span><br><span class=\"line\">        #ssl_certificate_key ./ssl/[server_name].key; # 同上 </span><br><span class=\"line\">        #ssl_trusted_certificate ./ssl/[server_name].cer;</span><br><span class=\"line\">          </span><br><span class=\"line\">        # 配置域名证书</span><br><span class=\"line\">        ssl_certificate         ./ssl/fullchain.cer; </span><br><span class=\"line\">        ssl_certificate_key     ./ssl/[server_name].key;</span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        proxy_set_header    Host                  $host;</span><br><span class=\"line\">        proxy_set_header    X-Real-IP             $remote_addr;</span><br><span class=\"line\">        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;</span><br><span class=\"line\">     proxy_set_header    X-Forwarded-Proto     $scheme;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">          proxy_connect_timeout 1;</span><br><span class=\"line\">          proxy_pass http://www.nginx.cn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置地址拦截转发，解决跨域验证问题</span><br><span class=\"line\">        location /oauth/&#123;</span><br><span class=\"line\">            proxy_pass https://localhost:8080/oauth/;</span><br><span class=\"line\">            proxy_set_header HOST $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*\\.(js|css)?$ &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 日志格式设定</span><br><span class=\"line\">        log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">        &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">        # 定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log /usr/local/nginx/log/access.log access;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 设定查看Nginx状态的地址.StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生.</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 404 500 502 503 504 /50x.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nohup` 后台守护进程方式运行项目：`nohup java -jar project.jar &gt;nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx常用命令-1\"><a href=\"#nginx常用命令-1\" class=\"headerlink\" title=\"nginx常用命令\"></a>nginx常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先进入nginx目录</span><br><span class=\"line\">cd /usr/local/nginx</span><br><span class=\"line\">./nginx  # 启动</span><br><span class=\"line\">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class=\"line\">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class=\"line\">./nginx -s reload  # 重新加载配置文件</span><br><span class=\"line\">./nginx -h # 帮助命令</span><br><span class=\"line\">./nginx -t # 检查配置文件</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class=\"line\">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h2><p>1、tar 压缩包安装，安装 <code>nginx</code> 需要先将官网下载的源码进行编译，编译依赖 <code>gcc</code> 环境，如果没有 <code>gcc</code> 环境，则需要安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc-c++</span><br></pre></td></tr></table></figure>\n\n<p>2、 <code>linux</code> 上安装 <code>pcre</code> 库，<code>PCRE(Perl Compatible Regular Expressions)</code> 是一个 <code>Perl</code> 库，包括 <code>perl</code> 兼容的正则表达式库。<code>nginx</code> 的 <code>http</code> 模块使用 <code>pcre</code> 来解析正则表达式，所以需要在 <code>linux</code> 上安装 <code>pcre</code> 库，<code>pcre-devel</code> 是使用 <code>pcre</code> 开发的一个二次开发库。<code>nginx</code> 也需要此库。命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<p>3、<code>zlib</code> 安装，<code>zlib</code> 库提供了很多种压缩和解压缩的方式， <code>nginx</code> 使用 <code>zlib</code> 对 <code>http</code> 包的内容进行 <code>gzip</code> ，所以需要在 <code>Centos</code> 上安装 <code>zlib</code> 库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>\n\n<p>4、 在 <code>linux</code> 安装 <code>openssl</code> 库，<code>OpenSSL</code> 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 <code>SSL</code> 协议，并提供丰富的应用程序供测试或其它目的使用。<code>nginx</code> 不仅支持 <code>http</code> 协议，还支持 <code>https</code>（即在 <code>ssl</code> 协议上传输 <code>http</code>），所以需要在 <code>Centos</code> 安装 <code>OpenSSL</code> 库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>1~4 使用一条命令执行就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<p>4、进入压缩包所在目录，使用以下命令进行解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.6.2.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>5、使用命令：<code>cd nginx-1.6.2.tar.gz</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令。</p>\n<p>6、使用命令：<code>cd nginx-1.6.2</code>，进入解压缩后文件夹，配置编译参数命令，并添加ssl模块(默认没有)，<code>Linux</code> 上使用命令和效果图如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 可以直接运行 ./configure  命令</span><br><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_ssl_module --with-http_stub_status_module</span><br></pre></td></tr></table></figure>\n\n<p>7、在上步的基础上编译并安装，<code>Linux</code> 上使用命令和效果图如下(部分截图)，如果不按以上步骤会有两个错误，重新执行一遍即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"># 安装到指定目录</span><br><span class=\"line\">make &amp;&amp; make PREFIX=/usr/local/nginx install</span><br></pre></td></tr></table></figure>\n\n<p><strong>将 nginx 加到开机自启</strong>(根据自己需要添加即可)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf &amp;&quot; &gt;&gt;/etc/rc.local</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卸载nginx\"><a href=\"#卸载nginx\" class=\"headerlink\" title=\"卸载nginx\"></a>卸载nginx</h2><p>1、首先通过命令：<code>ps -ef|grep nginx</code>，查看 <code>nginx</code> 运行状态</p>\n<p>2、如果 <code>nginx</code> 处于运行中的状态，使用命令：<code>kill -9</code> 进程号，杀掉进程</p>\n<p>3、全局查找 <code>nginx</code> 相关的文件所处路径，使用以下命令进行查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo find / -name nginx*</span><br></pre></td></tr></table></figure>\n\n<p>4、根据上一步查询出的 <code>nginx</code> 相关路径，就可以使用以下命令逐一删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx* 代表自该目录起所有的子目录</span><br><span class=\"line\"># 该条命令会删除/usr/local/路径下nginxd的整个文件夹(该文件的子文件都会删除掉)</span><br><span class=\"line\">rm -rf file /usr/local/nginx*</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除依赖</span><br><span class=\"line\">yum remove nginx</span><br></pre></td></tr></table></figure>\n\n<p>5、通过以上几步，基本可以完全卸载 <code>nginx</code> ，以便重新安装 <code>nginx</code></p>\n<h2 id=\"nginx常用命令\"><a href=\"#nginx常用命令\" class=\"headerlink\" title=\"nginx常用命令\"></a>nginx常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先进入nginx目录</span><br><span class=\"line\">cd /usr/local/nginx</span><br><span class=\"line\">./nginx  # 启动</span><br><span class=\"line\">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class=\"line\">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class=\"line\">./nginx -s reload  # 重新加载配置文件</span><br><span class=\"line\">./nginx -h # 帮助命令</span><br><span class=\"line\">./nginx -t # 检查配置文件</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class=\"line\">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Docker安装部署-nginx\"><a href=\"#Docker安装部署-nginx\" class=\"headerlink\" title=\"Docker安装部署 nginx\"></a>Docker安装部署 nginx</h2><p><code>nginx</code> 文件挂载到虚拟机外部</p>\n<p>1、运行 <code>nginx</code> ，把相关配置文件复制宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -p 80:80 -p 443:443 -d nginx:latest</span><br></pre></td></tr></table></figure>\n\n<p>2、创建挂在的文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nginx/conf /data/nginx/log /data/nginx/html /data/nginx/ssl</span><br></pre></td></tr></table></figure>\n\n<p>3、将容器 <code>nginx.conf</code> 文件复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/etc/nginx/nginx.conf /data/nginx/conf/</span><br></pre></td></tr></table></figure>\n\n<p>4、将容器 <code>conf.d</code> 文件夹下内容复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/etc/nginx/conf.d /data/nginx/conf/conf.d</span><br></pre></td></tr></table></figure>\n\n<p>5、将容器中的 <code>html</code> 文件夹复制到宿主机</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp mynginx:/usr/share/nginx/html /data/nginx/</span><br></pre></td></tr></table></figure>\n\n<p>6、强制删除正在运行的 <code>nginx</code>：<code>docker rm -f mynginx</code></p>\n<p>7、重新启动运行 <code>nginx</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name mynginx -p 80:80 -p 443:443 \\</span><br><span class=\"line\">-v /data/nginx/html/:/usr/share/nginx/html \\</span><br><span class=\"line\">-v /data/nginx/conf/conf.d:/etc/nginx/conf.d \\</span><br><span class=\"line\">-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v /data/nginx/log:/var/log/nginx \\</span><br><span class=\"line\">--privileged=true -e TZ=&quot;Asia/Shanghai&quot; -v /data/nginx/ssl/:/etc/nginx/ssl/:rw \\</span><br><span class=\"line\">--restart=always -d nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name my_nginx -p 80:80 \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/conf/conf.d/default.conf:/etc/nginx/conf.d/default.conf \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/html/:/usr/share/nginx/html/ \\</span><br><span class=\"line\">-v /usr/local/docker/nginx/logs/:/var/log/nginx/ \\</span><br><span class=\"line\">--privileged=true -d --restart=always nginx:latest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 停止服务</span><br><span class=\"line\">docker stop mynginx</span><br><span class=\"line\"># 启动服务</span><br><span class=\"line\">docker start mynginx</span><br><span class=\"line\"># 重启服务</span><br><span class=\"line\">docker restart mynginx</span><br><span class=\"line\"># 强制删除并停止</span><br><span class=\"line\">docker rm -f mynginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx配置说明\"><a href=\"#nginx配置说明\" class=\"headerlink\" title=\"nginx配置说明\"></a>nginx配置说明</h2><p><code>nginx</code> 的负载均衡策略有4种：</p>\n<p><strong>轮询(默认)</strong></p>\n<p>最基本的配置方法，它是 <code>upstream</code> 的默认策略，每个请求会按时间顺序逐一分配到不同的后端服务器。</p>\n<p>参数有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">fail_timeout</td>\n<td align=\"left\">与max_fails结合使用</td>\n</tr>\n<tr>\n<td align=\"left\">max_fails</td>\n<td align=\"left\">设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了。</td>\n</tr>\n<tr>\n<td align=\"left\">fail_time</td>\n<td align=\"left\">服务器会被认为停机的时间长度,默认为10s。</td>\n</tr>\n<tr>\n<td align=\"left\">backup</td>\n<td align=\"left\">标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。</td>\n</tr>\n<tr>\n<td align=\"left\">down</td>\n<td align=\"left\">标记服务器永久停机了。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">##定义Nginx运行的用户和用户组。window下不指定</span><br><span class=\"line\">#user  nobody;</span><br><span class=\"line\"></span><br><span class=\"line\">#nginx进程数,建议设置为等于CPU总核心数.</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型,[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">#error_log  /usr/local/nginx/log/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">#pid        logs/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#一个nginx进程打开的最多文件描述符数目,理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除,但是nginx分配请求并不均匀,所以建议与ulimit -n的值保持一致.</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">     #参考事件模型,use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型,如果跑在FreeBSD上面,就用kqueue模型.</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器 </span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type  application/octet-stream; #默认文件类型</span><br><span class=\"line\"></span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">     </span><br><span class=\"line\">    # 开启目录列表访问,合适下载服务器,默认关闭.</span><br><span class=\"line\">    autoindex on; # 显示目录</span><br><span class=\"line\">    autoindex_exact_size on; # 显示文件大小 默认为on,显示出文件的确切大小,单位是bytes 改为off后,显示出文件的大概大小,单位是kB或者MB或者GB</span><br><span class=\"line\">    autoindex_localtime on; # 显示文件时间 默认为off,显示的文件时间为GMT时间 改为on后,显示的文件时间为文件的服务器时间</span><br><span class=\"line\">     </span><br><span class=\"line\">    sendfile on; # 开启高效文件传输模式,sendfile指令指定nginx是否调用sendfile函数来输出文件,对于普通应用设为 on,如果用来进行下载等应用磁盘IO重负载应用,可设置为off,以平衡磁盘与网络I/O处理速度,降低系统的负载.注意：如果图片显示不正常把这个改成off.</span><br><span class=\"line\">    tcp_nopush on; # 防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; # 防止网络阻塞</span><br><span class=\"line\">     </span><br><span class=\"line\">    keepalive_timeout 120; # (单位s)设置客户端连接保持活动的超时时间,在超过这个时间后服务器会关闭该链接</span><br><span class=\"line\">     </span><br><span class=\"line\">    # FastCGI相关参数是为了改善网站的性能：减少资源占用,提高访问速度.下面参数看字面意思都能理解.</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\">     </span><br><span class=\"line\">    # gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #允许压缩的页面的最小字节数,页面字节数从header偷得content-length中获取.默认是0,不管页面多大都进行压缩.建议设置成大于1k的字节数,小于1k可能会越压越大</span><br><span class=\"line\">    gzip_buffers 4 16k; #表示申请4个单位为16k的内存作为压缩结果流缓存,默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果</span><br><span class=\"line\">    gzip_http_version 1.1; #压缩版本（默认1.1,目前大部分浏览器已经支持gzip解压.前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级.1压缩比最小,处理速度快.9压缩比最大,比较消耗cpu资源,处理速度最慢,但是因为压缩比最大,所以包最小,传输速度快</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">    #压缩类型,默认就已经包含text/html,所以下面就不用再写了,写上去也不会有问题,但是会有一个warn.</span><br><span class=\"line\">    gzip_vary on;#选项可以让前端的缓存服务器缓存经过gzip压缩的页面.例如:用squid缓存经过nginx压缩的数据</span><br><span class=\"line\">     </span><br><span class=\"line\">    #开启限制IP连接数的时候需要使用</span><br><span class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class=\"line\"></span><br><span class=\"line\">   #####################################################################################################</span><br><span class=\"line\"> ##upstream的负载均衡,四种调度算法##</span><br><span class=\"line\">    #调度算法1:轮询.每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动剔除,使用户访问不受影响</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001 max_fails=3 fail_timeout=20s;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">        server localhost:8003 backup;</span><br><span class=\"line\">        server localhost:8003 down;</span><br><span class=\"line\">        server localhost:8003 weight=2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法2:weight(权重).可以根据机器配置定义权重.权重越高被分配到的几率越大</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001 weight=2;</span><br><span class=\"line\">        server localhost:8002 weight=3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法3:ip_hash. 每个请求按访问IP的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在的session共享问题</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        ip_hash;</span><br><span class=\"line\">        server localhost:8001;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #调度算法4:url_hash(需安装第三方插件).此方法按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.Nginx本身是不支持url_hash的,如果需要使用这种调度算法,必须安装Nginx 的hash软件包</span><br><span class=\"line\">    upstream webhost &#123;</span><br><span class=\"line\">        server localhost:8001;</span><br><span class=\"line\">        server localhost:8002;</span><br><span class=\"line\">        hash $request_uri;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   # 如果要监听两个端口需要添加server内容</span><br><span class=\"line\">   server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        listen       8080;</span><br><span class=\"line\">        # 域名可以有多个,用空格隔开</span><br><span class=\"line\">        server_name  127.0.0.1;</span><br><span class=\"line\">        server_name baidu.com;</span><br><span class=\"line\">        # HTTP 自动跳转 HTTPS</span><br><span class=\"line\">        # rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   /usr/local/java/ry-v/qd;</span><br><span class=\"line\">   try_files $uri $uri/ /index.html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #代理头</span><br><span class=\"line\">  location /prod-api/ &#123;</span><br><span class=\"line\">   proxy_set_header Host $http_host;</span><br><span class=\"line\">   proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">   proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">   # 后端代理地址</span><br><span class=\"line\">   proxy_pass http://101.133.170.222:8080/;</span><br><span class=\"line\">   # 多个路径部署 proxy_pass http://wenhost/;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> #虚拟主机的配置</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        # 域名可以有多个,用空格隔开</span><br><span class=\"line\">        server_name baidu.com;</span><br><span class=\"line\">        # HTTP 自动跳转 HTTPS</span><br><span class=\"line\">        rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class=\"line\"></span><br><span class=\"line\">        #charset koi8-r;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /prod-api/ &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #error_page  404              /404.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        # redirect server error pages to the static page /50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    root           html;</span><br><span class=\"line\">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        #    fastcgi_index  index.php;</span><br><span class=\"line\">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class=\"line\">        #    include        fastcgi_params;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class=\"line\">    #</span><br><span class=\"line\">    #server &#123;</span><br><span class=\"line\">    #    listen       8000;</span><br><span class=\"line\">    #    listen       somename:8080;</span><br><span class=\"line\">    #    server_name  somename  alias  another.alias;</span><br><span class=\"line\"></span><br><span class=\"line\">    #    location / &#123;</span><br><span class=\"line\">    #        root   html;</span><br><span class=\"line\">    #        index  index.html index.htm;</span><br><span class=\"line\">    #    &#125;</span><br><span class=\"line\">    #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    # </span><br><span class=\"line\">    HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 监听端口 HTTPS</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  www.nginx.cn;</span><br><span class=\"line\">        </span><br><span class=\"line\">        #ssl_certificate ./ssl/[server_name].pem; # 指定证书的位置，Linux上可以设置相对路径，Windows上要设置绝对路径</span><br><span class=\"line\">        #ssl_certificate_key ./ssl/[server_name].key; # 同上 </span><br><span class=\"line\">        #ssl_trusted_certificate ./ssl/[server_name].cer;</span><br><span class=\"line\">          </span><br><span class=\"line\">        # 配置域名证书</span><br><span class=\"line\">        ssl_certificate         ./ssl/fullchain.cer; </span><br><span class=\"line\">        ssl_certificate_key     ./ssl/[server_name].key;</span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssl_session_timeout 5m;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 SSLv2 SSLv3;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        </span><br><span class=\"line\">        proxy_set_header    Host                  $host;</span><br><span class=\"line\">        proxy_set_header    X-Real-IP             $remote_addr;</span><br><span class=\"line\">        proxy_set_header    X-Forwarded-For       $proxy_add_x_forwarded_for;</span><br><span class=\"line\">     proxy_set_header    X-Forwarded-Proto     $scheme;</span><br><span class=\"line\"></span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">          proxy_connect_timeout 1;</span><br><span class=\"line\">          proxy_pass http://www.nginx.cn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 配置地址拦截转发，解决跨域验证问题</span><br><span class=\"line\">        location /oauth/&#123;</span><br><span class=\"line\">            proxy_pass https://localhost:8080/oauth/;</span><br><span class=\"line\">            proxy_set_header HOST $host;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # JS和CSS缓存时间设置</span><br><span class=\"line\">        location ~ .*\\.(js|css)?$ &#123;</span><br><span class=\"line\">            expires 1h;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        # 日志格式设定</span><br><span class=\"line\">        log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">        &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">        &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">        # 定义本虚拟主机的访问日志</span><br><span class=\"line\">        access_log /usr/local/nginx/log/access.log access;</span><br><span class=\"line\">        </span><br><span class=\"line\">        # 设定查看Nginx状态的地址.StubStatus模块能够获取Nginx自上次启动以来的工作状态，此模块非核心模块，需要在Nginx编译安装时手工指定才能使用</span><br><span class=\"line\">        location /NginxStatus &#123;</span><br><span class=\"line\">            stub_status on;</span><br><span class=\"line\">            access_log on;</span><br><span class=\"line\">            auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">            auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生.</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 404 500 502 503 504 /50x.html;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">nohup` 后台守护进程方式运行项目：`nohup java -jar project.jar &gt;nohup.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx常用命令-1\"><a href=\"#nginx常用命令-1\" class=\"headerlink\" title=\"nginx常用命令\"></a>nginx常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 首先进入nginx目录</span><br><span class=\"line\">cd /usr/local/nginx</span><br><span class=\"line\">./nginx  # 启动</span><br><span class=\"line\">./nginx -s stop  # 停止(暴力停止服务)</span><br><span class=\"line\">./nginx -s quit  # 安全退出(优雅停止服务)</span><br><span class=\"line\">./nginx -s reload  # 重新加载配置文件</span><br><span class=\"line\">./nginx -h # 帮助命令</span><br><span class=\"line\">./nginx -t # 检查配置文件</span><br><span class=\"line\">/usr/local/nginx/conf/nginx.conf # nginx配置文件路径</span><br><span class=\"line\">ps aux|grep nginx  # 查看nginx进程</span><br></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"生成验证码的两种方式（开箱即用）","abbrlink":"2c1c94fc","date":"2023-05-09T08:22:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"## 通用公共配置\n\n生成验证码的两种方式，SpringBoot项目，下面是完整代码，直接就可以用\n\n### 公共依赖\n\n```xml\n<!-- redis 缓存 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n<!-- pool 对象池，springboot2.x以后用得是lettuce,添加连接池依赖 -->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n\n<!-- 方法二需要用到的jar包 -->\n<dependency>\n    <groupId>com.github.penggle</groupId>\n    <artifactId>kaptcha</artifactId>\n    <version>2.3.2</version>\n</dependency>\n```\n\n### 配置 `application.yml` 文件\n\n```yaml\nspring:\n  # redis 配置\n  redis:\n    # 地址\n    host: localhost\n    # 端口，默认为6379\n    port: 6379\n    # 数据库索引\n    database: 0\n    # 密码\n    password:\n    # 连接超时时间\n    timeout: 10s\n    lettuce:\n      pool:\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池中的最大空闲连接\n        max-idle: 8\n        # 连接池的最大数据库连接数\n        max-active: 8\n        # #连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n```\n\n### 公共常量\n\n```java\n/**\n * 公共常量\n */\npublic class ConstantCode {\n\n    /**\n     * 系统缓存常量\n     */\n    public static final String KAPTCHA_KEY = \"ss:kaptcha\";\n    public static final Long REDIS_EXP_TIME = 60 * 60L;\n    public static final Long KAPTCHA_EXP_TIME = 60 * 3L;\n\n    /**\n     * 验证码宽高常量\n     */\n    public static final Integer WIDTH = 200;\n    public static final Integer HEIGHT = 55;\n\n    /**\n     * 图片后缀名称\n     */\n    public static final String IMG_JPG = \"jpg\";\n    public static final String IMG_PNG = \"png\";\n    public static final String IMG_JPEG = \"jpeg\";\n\n}\n```\n\n### Redis 序列化配置\n\n```java\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@Configuration\npublic class RedisConfig {\n    \n    @Bean\n    @SuppressWarnings(\"all\")\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        // 为了自己开发方便，一般直接使用 <String, Object>\n        RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();\n        template.setConnectionFactory(factory);\n\n        // Json序列化配置\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // String 的序列化\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n\n        // key采用String的序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n        // value序列化方式采用jackson\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的value序列化方式采用jackson\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n}\n```\n\n### Redis 工具类\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.Collection;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Redis工具类\n */\n@Component\n@SuppressWarnings(\"all\")\npublic class RedisUtils {\n\n    /**\n     * 日志对象\n     */\n    private static Logger logger = LoggerFactory.getLogger(RedisUtils.class);\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 缓存基本的对象，Integer、String、实体类等\n     *\n     * @param key      缓存的键值\n     * @param value    缓存的值\n     * @param timeout  时间\n     * @param timeUnit 时间颗粒度\n     */\n    public <T> void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);\n    }\n\n    /**\n     * 获得缓存的基本对象。\n     *\n     * @param key 缓存键值\n     * @return 缓存键值对应的数据\n     */\n    public <T> T getCacheObject(final String key) {\n        ValueOperations<String, T> operation = redisTemplate.opsForValue();\n        return operation.get(key);\n    }\n\n    /**\n     * 获得缓存的基本对象列表\n     *\n     * @param pattern 字符串前缀\n     * @return 对象列表\n     */\n    public Collection<String> keys(final String pattern) {\n        return redisTemplate.keys(pattern);\n    }\n\n    /**\n     * 删除集合对象\n     *\n     * @param collection 多个对象\n     * @return\n     */\n    public long deleteObject(final Collection collection) {\n        return redisTemplate.delete(collection);\n    }\n\n    /**\n     * 指定缓存失效时间\n     *\n     * @param key  键\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean expire(String key, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils expire(String key,long time) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 根据key 获取过期时间\n     *\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }\n\n    /**\n     * 判断key是否存在\n     *\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public boolean hasKey(String key) {\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            logger.error(\"RedisUtils hasKey(String key) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 删除缓存\n     *\n     * @param key 可以传一个值 或多个\n     */\n    public void del(String... key) {\n        if (key != null && key.length > 0) {\n            if (key.length == 1) {\n                redisTemplate.delete(key[0]);\n            } else {\n                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            }\n        }\n    }\n\n    //============================String=============================\n\n    /**\n     * 普通缓存获取\n     *\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n\n    /**\n     * 普通缓存放入\n     *\n     * @param key   键\n     * @param value 值\n     * @return true成功 false失败\n     */\n    public boolean set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils set(String key,Object value) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 普通缓存放入并设置时间\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n    public boolean set(String key, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            } else {\n                set(key, value);\n            }\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils set(String key,Object value,long time) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n}\n```\n\n### 通用返回结果封装\n\n```java\nimport org.springframework.http.HttpStatus;\nimport org.springframework.util.StringUtils;\nimport java.util.HashMap;\n\n/**\n * 操作消息提醒\n */\npublic class Result extends HashMap<String, Object> {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 状态码\n     */\n    public static final String CODE_TAG = \"code\";\n\n    /**\n     * 返回内容\n     */\n    public static final String MSG_TAG = \"msg\";\n\n    /**\n     * 数据对象\n     */\n    public static final String DATA_TAG = \"data\";\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。\n     */\n    public Result() {\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     */\n    public Result(int code, String msg) {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     * @param data 数据对象\n     */\n    public Result(int code, String msg, Object data) {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n        if (!StringUtils.isEmpty(data)) {\n            super.put(DATA_TAG, data);\n        }\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @return 成功消息\n     */\n    public static Result success() {\n        return Result.success(\"操作成功\");\n    }\n\n    /**\n     * 返回成功数据\n     *\n     * @return 成功消息\n     */\n    public static Result success(Object data) {\n        return Result.success(\"操作成功\", data);\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @param msg 返回内容\n     * @return 成功消息\n     */\n    public static Result success(String msg) {\n        return Result.success(msg, null);\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @param msg  返回内容\n     * @param data 数据对象\n     * @return 成功消息\n     */\n    public static Result success(String msg, Object data) {\n        return new Result(HttpStatus.OK.value(), msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @return\n     */\n    public static Result error() {\n        return Result.error(\"操作失败\");\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param msg 返回内容\n     * @return 警告消息\n     */\n    public static Result error(String msg) {\n        return Result.error(msg, null);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param msg  返回内容\n     * @param data 数据对象\n     * @return 警告消息\n     */\n    public static Result error(String msg, Object data) {\n        return new Result(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     * @return 警告消息\n     */\n    public static Result error(int code, String msg) {\n        return new Result(code, msg, null);\n    }\n\n    /**\n     * 方便链式调用\n     *\n     * @param key   键\n     * @param value 值\n     * @return 数据对象\n     */\n    @Override\n    public Result put(String key, Object value) {\n        super.put(key, value);\n        return this;\n    }\n}\n```\n\n## 方法一：Graphics2D 画图实现\n\n使用 jdk 画图 Graphics2D 生成验证码\n\n### 1、验证码工具类\n\n```java\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.util.Random;\n\n/**\n * 验证码工具类\n */\npublic class VerifyCodeUtils {\n\n    /**\n     * 传入BufferedImage对象，并将生成好的验证码保存到BufferedImage中\n     */\n    public static String drawRandomText(BufferedImage bufferedImage, int width, int height) {\n        Graphics2D graphics = (Graphics2D) bufferedImage.getGraphics();\n        // 验证码背景色\n        graphics.setColor(new Color(255, 255, 255));\n        // 填充线条背景\n        graphics.fillRect(0, 0, width, height);\n        graphics.setFont(new Font(\"宋体,楷体,微软雅黑\", Font.BOLD, 35));\n        // 数字和字母的组合\n        String baseNumLetter = \"ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        StringBuilder builder = new StringBuilder();\n        // 旋转原点的 x 坐标\n        int x = 40;\n        String ch;\n        Random random = new Random();\n        for (int i = 0; i < 4; i++) {\n            graphics.setColor(getRandomColor());\n            //设置字体旋转角度,角度小于30度\n            int degree = random.nextInt() % 30;\n            int dot = random.nextInt(baseNumLetter.length());\n            ch = baseNumLetter.charAt(dot) + \"\";\n            builder.append(ch);\n            //正向旋转\n            graphics.rotate(degree * Math.PI / 180, x, 45);\n            graphics.drawString(ch, x, 45);\n            //反向旋转\n            graphics.rotate(-degree * Math.PI / 180, x, 45);\n            // 字母间距记录\n            x += 35;\n        }\n        // 画干扰线\n        for (int i = 0; i < 6; i++) {\n            // 设置随机颜色\n            graphics.setColor(getRandomColor());\n            // 随机画线\n            graphics.drawLine(random.nextInt(width), random.nextInt(height), random.nextInt(width), random.nextInt(height));\n        }\n        // 添加噪点\n        for (int i = 0; i < 30; i++) {\n            int x1 = random.nextInt(width);\n            int y1 = random.nextInt(height);\n            graphics.setColor(getRandomColor());\n            graphics.fillRect(x1, y1, 2, 2);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 随机取色\n     */\n    private static Color getRandomColor() {\n        Random ran = new Random();\n        return new Color(ran.nextInt(256), ran.nextInt(256), ran.nextInt(256));\n    }\n}\n```\n\n### 2、Controller 控制层\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.FastByteArrayOutputStream;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Base64;\nimport java.util.UUID;\n\n@RestController\npublic class VerificationController {\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    /**\n     * 验证码生成工具，返回图片信息\n     * 适合学习练手使用，redis 呢能存在一个\n     * @param response\n     * @throws IOException\n     */\n    @GetMapping(\"/getImageCode\")\n    public void getImageCode(HttpServletResponse response) throws IOException {\n        // 禁止缓存\n        response.setDateHeader(\"Expires\", 0);\n        response.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\");\n        response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n        response.setHeader(\"Pragma\", \"no-cache\");\n        // 设置响应格式为png图片\n        response.setContentType(\"image/png\");\n        // 生成图片验证码\n        BufferedImage image = new BufferedImage(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);\n        String randomText = VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);\n        // 存入redis\n        redisUtils.set(ConstantCode.KAPTCHA_KEY, randomText, ConstantCode.KAPTCHA_EXP_TIME);\n        ServletOutputStream out = response.getOutputStream();\n        ImageIO.write(image, ConstantCode.IMG_JPG, out);\n        out.flush();\n        out.close();\n    }\n\n    /**\n     * 验证码 Base64\n     * 可生成多个\n     * @return\n     */\n    @GetMapping(\"/getCaptchaInfo\")\n    public Result getCaptchaInfo() {\n        Result success = Result.success();\n        // 生成图片验证码\n        BufferedImage image = new BufferedImage(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        // 验证码key\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        String randomText = VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);\n        // 存入redis\n        redisUtils.set(verifyKey, randomText, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        success.put(\"uuid\", uuid);\n        success.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return success;\n    }\n}\n```\n\n## 方法二：kaptcha 依赖实现\n\n### 1、验证码配置\n\n```java\nimport com.google.code.kaptcha.impl.DefaultKaptcha;\nimport com.google.code.kaptcha.util.Config;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport java.util.Properties;\nimport static com.google.code.kaptcha.Constants.*;\n\n/**\n * 验证码配置\n */\n@Configuration\npublic class CaptchaConfig {\n    @Bean(name = \"captchaProducer\")\n    public DefaultKaptcha getKaptchaBean() {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, \"yes\");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, \"black\");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, \"160\");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, \"60\");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, \"38\");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, \"kaptchaCode\");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, \"4\");\n        // 验证码文本字体样式 默认为new Font(\"Arial\", 1, fontSize), new Font(\"Courier\", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, \"Arial,Courier\");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, \"com.google.code.kaptcha.impl.ShadowGimpy\");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n\n    @Bean(name = \"captchaProducerMath\")\n    public DefaultKaptcha getKaptchaBeanMath() {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, \"yes\");\n        // 边框颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_BORDER_COLOR, \"105,179,90\");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, \"blue\");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, \"160\");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, \"60\");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, \"35\");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, \"kaptchaCodeMath\");\n        // 验证码文本生成器 注意：KaptchaTextCreator的路径\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, \"com.test.demo.KaptchaTextCreator\");\n        // 验证码文本字符间距 默认为2\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, \"3\");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, \"6\");\n        // 验证码文本字体样式 默认为new Font(\"Arial\", 1, fontSize), new Font(\"Courier\", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, \"Arial,Courier\");\n        // 验证码噪点颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_NOISE_COLOR, \"white\");\n        // 干扰实现类\n        properties.setProperty(KAPTCHA_NOISE_IMPL, \"com.google.code.kaptcha.impl.NoNoise\");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, \"com.google.code.kaptcha.impl.ShadowGimpy\");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n}\n```\n\n### 2、验证码文本生成器\n\n```java\nimport com.google.code.kaptcha.text.impl.DefaultTextCreator;\nimport java.util.Random;\n\n/**\n * 验证码文本生成器\n */\npublic class KaptchaTextCreator extends DefaultTextCreator {\n    private static final String[] CNUMBERS = \"0,1,2,3,4,5,6,7,8,9,10\".split(\",\");\n\n    @Override\n    public String getText() {\n        Integer result = 0;\n        Random random = new Random();\n        int x = random.nextInt(10);\n        int y = random.nextInt(10);\n        StringBuilder suChinese = new StringBuilder();\n        int randomoperands = (int) Math.round(Math.random() * 2);\n        if (randomoperands == 0) {\n            result = x * y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append(\"*\");\n            suChinese.append(CNUMBERS[y]);\n        } else if (randomoperands == 1) {\n            if (!(x == 0) && y % x == 0) {\n                result = y / x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append(\"/\");\n                suChinese.append(CNUMBERS[x]);\n            } else {\n                result = x + y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append(\"+\");\n                suChinese.append(CNUMBERS[y]);\n            }\n        } else if (randomoperands == 2) {\n            if (x >= y) {\n                result = x - y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append(\"-\");\n                suChinese.append(CNUMBERS[y]);\n            } else {\n                result = y - x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append(\"-\");\n                suChinese.append(CNUMBERS[x]);\n            }\n        } else {\n            result = x + y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append(\"+\");\n            suChinese.append(CNUMBERS[y]);\n        }\n        suChinese.append(\"=?@\" + result);\n        return suChinese.toString();\n    }\n}\n```\n\n### 3、测试正码生成\n\n```java\nimport com.google.code.kaptcha.Producer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.FastByteArrayOutputStream;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport javax.annotation.Resource;\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Base64;\nimport java.util.UUID;\n\n/**\n * 验证码操作处理\n */\n@RestController\npublic class CaptchaController {\n    @Resource(name = \"captchaProducer\")\n    private Producer captchaProducer;\n\n    @Resource(name = \"captchaProducerMath\")\n    private Producer captchaProducerMath;\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    /**\n     * 文本验证码\n     *\n     * @return\n     */\n    @GetMapping(\"/captchaCharImage\")\n    public Result getCharCode() {\n        Result ajax = Result.success();\n        // 生成验证码\n        String capText = captchaProducerMath.createText();\n        String capStr = capText.substring(0, capText.lastIndexOf(\"@\"));\n        String code = capText.substring(capText.lastIndexOf(\"@\") + 1);\n        BufferedImage image = captchaProducerMath.createImage(capStr);\n        // 保存验证码信息\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        redisUtils.set(verifyKey, code, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        ajax.put(\"uuid\", uuid);\n        ajax.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return ajax;\n    }\n\n    /**\n     * 生成验证码\n     */\n    @GetMapping(\"/captchaMathImage\")\n    public Result getMathCode() {\n        Result ajax = Result.success();\n        // 生成验证码\n        String capText = captchaProducer.createText();\n        BufferedImage image = captchaProducerMath.createImage(capText);\n\n        // 保存验证码信息\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        redisUtils.set(verifyKey, capText, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        ajax.put(\"uuid\", uuid);\n        ajax.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return ajax;\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/20220509生成验证码的两种方式.md","raw":"---\ntitle: 生成验证码的两种方式（开箱即用）\ntags: SpringBoot\ncategories: 后端\nabbrlink: 2c1c94fc\ndate: 2023-05-09 16:22:35\ncover:\n---\n## 通用公共配置\n\n生成验证码的两种方式，SpringBoot项目，下面是完整代码，直接就可以用\n\n### 公共依赖\n\n```xml\n<!-- redis 缓存 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n\n<!-- pool 对象池，springboot2.x以后用得是lettuce,添加连接池依赖 -->\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n</dependency>\n\n<!-- 方法二需要用到的jar包 -->\n<dependency>\n    <groupId>com.github.penggle</groupId>\n    <artifactId>kaptcha</artifactId>\n    <version>2.3.2</version>\n</dependency>\n```\n\n### 配置 `application.yml` 文件\n\n```yaml\nspring:\n  # redis 配置\n  redis:\n    # 地址\n    host: localhost\n    # 端口，默认为6379\n    port: 6379\n    # 数据库索引\n    database: 0\n    # 密码\n    password:\n    # 连接超时时间\n    timeout: 10s\n    lettuce:\n      pool:\n        # 连接池中的最小空闲连接\n        min-idle: 0\n        # 连接池中的最大空闲连接\n        max-idle: 8\n        # 连接池的最大数据库连接数\n        max-active: 8\n        # #连接池最大阻塞等待时间（使用负值表示没有限制）\n        max-wait: -1ms\n```\n\n### 公共常量\n\n```java\n/**\n * 公共常量\n */\npublic class ConstantCode {\n\n    /**\n     * 系统缓存常量\n     */\n    public static final String KAPTCHA_KEY = \"ss:kaptcha\";\n    public static final Long REDIS_EXP_TIME = 60 * 60L;\n    public static final Long KAPTCHA_EXP_TIME = 60 * 3L;\n\n    /**\n     * 验证码宽高常量\n     */\n    public static final Integer WIDTH = 200;\n    public static final Integer HEIGHT = 55;\n\n    /**\n     * 图片后缀名称\n     */\n    public static final String IMG_JPG = \"jpg\";\n    public static final String IMG_PNG = \"png\";\n    public static final String IMG_JPEG = \"jpeg\";\n\n}\n```\n\n### Redis 序列化配置\n\n```java\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@Configuration\npublic class RedisConfig {\n    \n    @Bean\n    @SuppressWarnings(\"all\")\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        // 为了自己开发方便，一般直接使用 <String, Object>\n        RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();\n        template.setConnectionFactory(factory);\n\n        // Json序列化配置\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // String 的序列化\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n\n        // key采用String的序列化方式\n        template.setKeySerializer(stringRedisSerializer);\n        // hash的key也采用String的序列化方式\n        template.setHashKeySerializer(stringRedisSerializer);\n        // value序列化方式采用jackson\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        // hash的value序列化方式采用jackson\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n\n        return template;\n    }\n}\n```\n\n### Redis 工具类\n\n```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.Collection;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Redis工具类\n */\n@Component\n@SuppressWarnings(\"all\")\npublic class RedisUtils {\n\n    /**\n     * 日志对象\n     */\n    private static Logger logger = LoggerFactory.getLogger(RedisUtils.class);\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    /**\n     * 缓存基本的对象，Integer、String、实体类等\n     *\n     * @param key      缓存的键值\n     * @param value    缓存的值\n     * @param timeout  时间\n     * @param timeUnit 时间颗粒度\n     */\n    public <T> void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);\n    }\n\n    /**\n     * 获得缓存的基本对象。\n     *\n     * @param key 缓存键值\n     * @return 缓存键值对应的数据\n     */\n    public <T> T getCacheObject(final String key) {\n        ValueOperations<String, T> operation = redisTemplate.opsForValue();\n        return operation.get(key);\n    }\n\n    /**\n     * 获得缓存的基本对象列表\n     *\n     * @param pattern 字符串前缀\n     * @return 对象列表\n     */\n    public Collection<String> keys(final String pattern) {\n        return redisTemplate.keys(pattern);\n    }\n\n    /**\n     * 删除集合对象\n     *\n     * @param collection 多个对象\n     * @return\n     */\n    public long deleteObject(final Collection collection) {\n        return redisTemplate.delete(collection);\n    }\n\n    /**\n     * 指定缓存失效时间\n     *\n     * @param key  键\n     * @param time 时间(秒)\n     * @return\n     */\n    public boolean expire(String key, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.expire(key, time, TimeUnit.SECONDS);\n            }\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils expire(String key,long time) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 根据key 获取过期时间\n     *\n     * @param key 键 不能为null\n     * @return 时间(秒) 返回0代表为永久有效\n     */\n    public long getExpire(String key) {\n        return redisTemplate.getExpire(key, TimeUnit.SECONDS);\n    }\n\n    /**\n     * 判断key是否存在\n     *\n     * @param key 键\n     * @return true 存在 false不存在\n     */\n    public boolean hasKey(String key) {\n        try {\n            return redisTemplate.hasKey(key);\n        } catch (Exception e) {\n            logger.error(\"RedisUtils hasKey(String key) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 删除缓存\n     *\n     * @param key 可以传一个值 或多个\n     */\n    public void del(String... key) {\n        if (key != null && key.length > 0) {\n            if (key.length == 1) {\n                redisTemplate.delete(key[0]);\n            } else {\n                redisTemplate.delete(CollectionUtils.arrayToList(key));\n            }\n        }\n    }\n\n    //============================String=============================\n\n    /**\n     * 普通缓存获取\n     *\n     * @param key 键\n     * @return 值\n     */\n    public Object get(String key) {\n        return key == null ? null : redisTemplate.opsForValue().get(key);\n    }\n\n    /**\n     * 普通缓存放入\n     *\n     * @param key   键\n     * @param value 值\n     * @return true成功 false失败\n     */\n    public boolean set(String key, Object value) {\n        try {\n            redisTemplate.opsForValue().set(key, value);\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils set(String key,Object value) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * 普通缓存放入并设置时间\n     *\n     * @param key   键\n     * @param value 值\n     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期\n     * @return true成功 false 失败\n     */\n    public boolean set(String key, Object value, long time) {\n        try {\n            if (time > 0) {\n                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);\n            } else {\n                set(key, value);\n            }\n            return true;\n        } catch (Exception e) {\n            logger.error(\"RedisUtils set(String key,Object value,long time) failure.\" + e.getMessage());\n            return false;\n        }\n    }\n}\n```\n\n### 通用返回结果封装\n\n```java\nimport org.springframework.http.HttpStatus;\nimport org.springframework.util.StringUtils;\nimport java.util.HashMap;\n\n/**\n * 操作消息提醒\n */\npublic class Result extends HashMap<String, Object> {\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * 状态码\n     */\n    public static final String CODE_TAG = \"code\";\n\n    /**\n     * 返回内容\n     */\n    public static final String MSG_TAG = \"msg\";\n\n    /**\n     * 数据对象\n     */\n    public static final String DATA_TAG = \"data\";\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。\n     */\n    public Result() {\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     */\n    public Result(int code, String msg) {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n    }\n\n    /**\n     * 初始化一个新创建的 AjaxResult 对象\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     * @param data 数据对象\n     */\n    public Result(int code, String msg, Object data) {\n        super.put(CODE_TAG, code);\n        super.put(MSG_TAG, msg);\n        if (!StringUtils.isEmpty(data)) {\n            super.put(DATA_TAG, data);\n        }\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @return 成功消息\n     */\n    public static Result success() {\n        return Result.success(\"操作成功\");\n    }\n\n    /**\n     * 返回成功数据\n     *\n     * @return 成功消息\n     */\n    public static Result success(Object data) {\n        return Result.success(\"操作成功\", data);\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @param msg 返回内容\n     * @return 成功消息\n     */\n    public static Result success(String msg) {\n        return Result.success(msg, null);\n    }\n\n    /**\n     * 返回成功消息\n     *\n     * @param msg  返回内容\n     * @param data 数据对象\n     * @return 成功消息\n     */\n    public static Result success(String msg, Object data) {\n        return new Result(HttpStatus.OK.value(), msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @return\n     */\n    public static Result error() {\n        return Result.error(\"操作失败\");\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param msg 返回内容\n     * @return 警告消息\n     */\n    public static Result error(String msg) {\n        return Result.error(msg, null);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param msg  返回内容\n     * @param data 数据对象\n     * @return 警告消息\n     */\n    public static Result error(String msg, Object data) {\n        return new Result(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg, data);\n    }\n\n    /**\n     * 返回错误消息\n     *\n     * @param code 状态码\n     * @param msg  返回内容\n     * @return 警告消息\n     */\n    public static Result error(int code, String msg) {\n        return new Result(code, msg, null);\n    }\n\n    /**\n     * 方便链式调用\n     *\n     * @param key   键\n     * @param value 值\n     * @return 数据对象\n     */\n    @Override\n    public Result put(String key, Object value) {\n        super.put(key, value);\n        return this;\n    }\n}\n```\n\n## 方法一：Graphics2D 画图实现\n\n使用 jdk 画图 Graphics2D 生成验证码\n\n### 1、验证码工具类\n\n```java\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.util.Random;\n\n/**\n * 验证码工具类\n */\npublic class VerifyCodeUtils {\n\n    /**\n     * 传入BufferedImage对象，并将生成好的验证码保存到BufferedImage中\n     */\n    public static String drawRandomText(BufferedImage bufferedImage, int width, int height) {\n        Graphics2D graphics = (Graphics2D) bufferedImage.getGraphics();\n        // 验证码背景色\n        graphics.setColor(new Color(255, 255, 255));\n        // 填充线条背景\n        graphics.fillRect(0, 0, width, height);\n        graphics.setFont(new Font(\"宋体,楷体,微软雅黑\", Font.BOLD, 35));\n        // 数字和字母的组合\n        String baseNumLetter = \"ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n        StringBuilder builder = new StringBuilder();\n        // 旋转原点的 x 坐标\n        int x = 40;\n        String ch;\n        Random random = new Random();\n        for (int i = 0; i < 4; i++) {\n            graphics.setColor(getRandomColor());\n            //设置字体旋转角度,角度小于30度\n            int degree = random.nextInt() % 30;\n            int dot = random.nextInt(baseNumLetter.length());\n            ch = baseNumLetter.charAt(dot) + \"\";\n            builder.append(ch);\n            //正向旋转\n            graphics.rotate(degree * Math.PI / 180, x, 45);\n            graphics.drawString(ch, x, 45);\n            //反向旋转\n            graphics.rotate(-degree * Math.PI / 180, x, 45);\n            // 字母间距记录\n            x += 35;\n        }\n        // 画干扰线\n        for (int i = 0; i < 6; i++) {\n            // 设置随机颜色\n            graphics.setColor(getRandomColor());\n            // 随机画线\n            graphics.drawLine(random.nextInt(width), random.nextInt(height), random.nextInt(width), random.nextInt(height));\n        }\n        // 添加噪点\n        for (int i = 0; i < 30; i++) {\n            int x1 = random.nextInt(width);\n            int y1 = random.nextInt(height);\n            graphics.setColor(getRandomColor());\n            graphics.fillRect(x1, y1, 2, 2);\n        }\n        return builder.toString();\n    }\n\n    /**\n     * 随机取色\n     */\n    private static Color getRandomColor() {\n        Random ran = new Random();\n        return new Color(ran.nextInt(256), ran.nextInt(256), ran.nextInt(256));\n    }\n}\n```\n\n### 2、Controller 控制层\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.FastByteArrayOutputStream;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Base64;\nimport java.util.UUID;\n\n@RestController\npublic class VerificationController {\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    /**\n     * 验证码生成工具，返回图片信息\n     * 适合学习练手使用，redis 呢能存在一个\n     * @param response\n     * @throws IOException\n     */\n    @GetMapping(\"/getImageCode\")\n    public void getImageCode(HttpServletResponse response) throws IOException {\n        // 禁止缓存\n        response.setDateHeader(\"Expires\", 0);\n        response.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate\");\n        response.addHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n        response.setHeader(\"Pragma\", \"no-cache\");\n        // 设置响应格式为png图片\n        response.setContentType(\"image/png\");\n        // 生成图片验证码\n        BufferedImage image = new BufferedImage(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);\n        String randomText = VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);\n        // 存入redis\n        redisUtils.set(ConstantCode.KAPTCHA_KEY, randomText, ConstantCode.KAPTCHA_EXP_TIME);\n        ServletOutputStream out = response.getOutputStream();\n        ImageIO.write(image, ConstantCode.IMG_JPG, out);\n        out.flush();\n        out.close();\n    }\n\n    /**\n     * 验证码 Base64\n     * 可生成多个\n     * @return\n     */\n    @GetMapping(\"/getCaptchaInfo\")\n    public Result getCaptchaInfo() {\n        Result success = Result.success();\n        // 生成图片验证码\n        BufferedImage image = new BufferedImage(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        // 验证码key\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        String randomText = VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);\n        // 存入redis\n        redisUtils.set(verifyKey, randomText, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        success.put(\"uuid\", uuid);\n        success.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return success;\n    }\n}\n```\n\n## 方法二：kaptcha 依赖实现\n\n### 1、验证码配置\n\n```java\nimport com.google.code.kaptcha.impl.DefaultKaptcha;\nimport com.google.code.kaptcha.util.Config;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport java.util.Properties;\nimport static com.google.code.kaptcha.Constants.*;\n\n/**\n * 验证码配置\n */\n@Configuration\npublic class CaptchaConfig {\n    @Bean(name = \"captchaProducer\")\n    public DefaultKaptcha getKaptchaBean() {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, \"yes\");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, \"black\");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, \"160\");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, \"60\");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, \"38\");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, \"kaptchaCode\");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, \"4\");\n        // 验证码文本字体样式 默认为new Font(\"Arial\", 1, fontSize), new Font(\"Courier\", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, \"Arial,Courier\");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, \"com.google.code.kaptcha.impl.ShadowGimpy\");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n\n    @Bean(name = \"captchaProducerMath\")\n    public DefaultKaptcha getKaptchaBeanMath() {\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        Properties properties = new Properties();\n        // 是否有边框 默认为true 我们可以自己设置yes，no\n        properties.setProperty(KAPTCHA_BORDER, \"yes\");\n        // 边框颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_BORDER_COLOR, \"105,179,90\");\n        // 验证码文本字符颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, \"blue\");\n        // 验证码图片宽度 默认为200\n        properties.setProperty(KAPTCHA_IMAGE_WIDTH, \"160\");\n        // 验证码图片高度 默认为50\n        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, \"60\");\n        // 验证码文本字符大小 默认为40\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, \"35\");\n        // KAPTCHA_SESSION_KEY\n        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, \"kaptchaCodeMath\");\n        // 验证码文本生成器 注意：KaptchaTextCreator的路径\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, \"com.test.demo.KaptchaTextCreator\");\n        // 验证码文本字符间距 默认为2\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, \"3\");\n        // 验证码文本字符长度 默认为5\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, \"6\");\n        // 验证码文本字体样式 默认为new Font(\"Arial\", 1, fontSize), new Font(\"Courier\", 1, fontSize)\n        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, \"Arial,Courier\");\n        // 验证码噪点颜色 默认为Color.BLACK\n        properties.setProperty(KAPTCHA_NOISE_COLOR, \"white\");\n        // 干扰实现类\n        properties.setProperty(KAPTCHA_NOISE_IMPL, \"com.google.code.kaptcha.impl.NoNoise\");\n        // 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy\n        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, \"com.google.code.kaptcha.impl.ShadowGimpy\");\n        Config config = new Config(properties);\n        defaultKaptcha.setConfig(config);\n        return defaultKaptcha;\n    }\n}\n```\n\n### 2、验证码文本生成器\n\n```java\nimport com.google.code.kaptcha.text.impl.DefaultTextCreator;\nimport java.util.Random;\n\n/**\n * 验证码文本生成器\n */\npublic class KaptchaTextCreator extends DefaultTextCreator {\n    private static final String[] CNUMBERS = \"0,1,2,3,4,5,6,7,8,9,10\".split(\",\");\n\n    @Override\n    public String getText() {\n        Integer result = 0;\n        Random random = new Random();\n        int x = random.nextInt(10);\n        int y = random.nextInt(10);\n        StringBuilder suChinese = new StringBuilder();\n        int randomoperands = (int) Math.round(Math.random() * 2);\n        if (randomoperands == 0) {\n            result = x * y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append(\"*\");\n            suChinese.append(CNUMBERS[y]);\n        } else if (randomoperands == 1) {\n            if (!(x == 0) && y % x == 0) {\n                result = y / x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append(\"/\");\n                suChinese.append(CNUMBERS[x]);\n            } else {\n                result = x + y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append(\"+\");\n                suChinese.append(CNUMBERS[y]);\n            }\n        } else if (randomoperands == 2) {\n            if (x >= y) {\n                result = x - y;\n                suChinese.append(CNUMBERS[x]);\n                suChinese.append(\"-\");\n                suChinese.append(CNUMBERS[y]);\n            } else {\n                result = y - x;\n                suChinese.append(CNUMBERS[y]);\n                suChinese.append(\"-\");\n                suChinese.append(CNUMBERS[x]);\n            }\n        } else {\n            result = x + y;\n            suChinese.append(CNUMBERS[x]);\n            suChinese.append(\"+\");\n            suChinese.append(CNUMBERS[y]);\n        }\n        suChinese.append(\"=?@\" + result);\n        return suChinese.toString();\n    }\n}\n```\n\n### 3、测试正码生成\n\n```java\nimport com.google.code.kaptcha.Producer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.FastByteArrayOutputStream;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport javax.annotation.Resource;\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.Base64;\nimport java.util.UUID;\n\n/**\n * 验证码操作处理\n */\n@RestController\npublic class CaptchaController {\n    @Resource(name = \"captchaProducer\")\n    private Producer captchaProducer;\n\n    @Resource(name = \"captchaProducerMath\")\n    private Producer captchaProducerMath;\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    /**\n     * 文本验证码\n     *\n     * @return\n     */\n    @GetMapping(\"/captchaCharImage\")\n    public Result getCharCode() {\n        Result ajax = Result.success();\n        // 生成验证码\n        String capText = captchaProducerMath.createText();\n        String capStr = capText.substring(0, capText.lastIndexOf(\"@\"));\n        String code = capText.substring(capText.lastIndexOf(\"@\") + 1);\n        BufferedImage image = captchaProducerMath.createImage(capStr);\n        // 保存验证码信息\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        redisUtils.set(verifyKey, code, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        ajax.put(\"uuid\", uuid);\n        ajax.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return ajax;\n    }\n\n    /**\n     * 生成验证码\n     */\n    @GetMapping(\"/captchaMathImage\")\n    public Result getMathCode() {\n        Result ajax = Result.success();\n        // 生成验证码\n        String capText = captchaProducer.createText();\n        BufferedImage image = captchaProducerMath.createImage(capText);\n\n        // 保存验证码信息\n        String uuid = UUID.randomUUID().toString().replace(\"-\", \"\");\n        String verifyKey = ConstantCode.KAPTCHA_KEY + uuid;\n        redisUtils.set(verifyKey, capText, ConstantCode.KAPTCHA_EXP_TIME);\n        // 转换流信息写出\n        FastByteArrayOutputStream os = new FastByteArrayOutputStream();\n        try {\n            ImageIO.write(image, \"jpg\", os);\n        } catch (IOException e) {\n            return Result.error(e.getMessage());\n        }\n        ajax.put(\"uuid\", uuid);\n        ajax.put(\"img\", Base64.getEncoder().encodeToString(os.toByteArray()));\n        return ajax;\n    }\n}\n```\n\n\n\n\n\n\n","slug":"20220509生成验证码的两种方式","published":1,"updated":"2023-05-12T11:18:04.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcy9002zw0uh7aid7zib","content":"<h2 id=\"通用公共配置\"><a href=\"#通用公共配置\" class=\"headerlink\" title=\"通用公共配置\"></a>通用公共配置</h2><p>生成验证码的两种方式，SpringBoot项目，下面是完整代码，直接就可以用</p>\n<h3 id=\"公共依赖\"><a href=\"#公共依赖\" class=\"headerlink\" title=\"公共依赖\"></a>公共依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis 缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- pool 对象池，springboot2.x以后用得是lettuce,添加连接池依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-pool2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二需要用到的jar包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.penggle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kaptcha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-application-yml-文件\"><a href=\"#配置-application-yml-文件\" class=\"headerlink\" title=\"配置 application.yml 文件\"></a>配置 <code>application.yml</code> 文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"comment\"># redis 配置</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"comment\"># 地址</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"comment\"># 端口，默认为6379</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据库索引</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 密码</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接超时时间</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池的最大数据库连接数</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"string\">-1ms</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共常量\"><a href=\"#公共常量\" class=\"headerlink\" title=\"公共常量\"></a>公共常量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 公共常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstantCode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 系统缓存常量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KAPTCHA_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ss:kaptcha&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">REDIS_EXP_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">60L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">KAPTCHA_EXP_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">3L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码宽高常量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">WIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">HEIGHT</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片后缀名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_JPG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jpg&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_PNG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;png&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_JPEG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jpeg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-序列化配置\"><a href=\"#Redis-序列化配置\" class=\"headerlink\" title=\"Redis 序列化配置\"></a>Redis 序列化配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Json序列化配置</span></span><br><span class=\"line\">        <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// String 的序列化</span></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-工具类\"><a href=\"#Redis-工具类\" class=\"headerlink\" title=\"Redis 工具类\"></a>Redis 工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 日志对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(RedisUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key      缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value    缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout  时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit 时间颗粒度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value, <span class=\"keyword\">final</span> Integer timeout, <span class=\"keyword\">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> &#123;</span><br><span class=\"line\">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operation.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern 字符串前缀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title function_\">keys</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collection 多个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection collection)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(collection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(String key, <span class=\"type\">long</span> time)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils expire(String key,long time) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key 获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getExpire</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断key是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils hasKey(String key) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 可以传一个值 或多个</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(String... key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"literal\">null</span> &amp;&amp; key.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                redisTemplate.delete(key[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//============================String=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils set(String key,Object value) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value, <span class=\"type\">long</span> time)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set(key, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils set(String key,Object value,long time) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用返回结果封装\"><a href=\"#通用返回结果封装\" class=\"headerlink\" title=\"通用返回结果封装\"></a>通用返回结果封装</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 操作消息提醒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HashMap</span>&lt;String, Object&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CODE_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;code&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MSG_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;msg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATA_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(CODE_TAG, code);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(MSG_TAG, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(CODE_TAG, code);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(MSG_TAG, msg);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(data)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.put(DATA_TAG, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(<span class=\"string\">&quot;操作成功&quot;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(HttpStatus.OK.value(), msg, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;操作失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(code, msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方便链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法一：Graphics2D-画图实现\"><a href=\"#方法一：Graphics2D-画图实现\" class=\"headerlink\" title=\"方法一：Graphics2D 画图实现\"></a>方法一：Graphics2D 画图实现</h2><p>使用 jdk 画图 Graphics2D 生成验证码</p>\n<h3 id=\"1、验证码工具类\"><a href=\"#1、验证码工具类\" class=\"headerlink\" title=\"1、验证码工具类\"></a>1、验证码工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VerifyCodeUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 传入BufferedImage对象，并将生成好的验证码保存到BufferedImage中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">drawRandomText</span><span class=\"params\">(BufferedImage bufferedImage, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Graphics2D</span> <span class=\"variable\">graphics</span> <span class=\"operator\">=</span> (Graphics2D) bufferedImage.getGraphics();</span><br><span class=\"line\">        <span class=\"comment\">// 验证码背景色</span></span><br><span class=\"line\">        graphics.setColor(<span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 填充线条背景</span></span><br><span class=\"line\">        graphics.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">        graphics.setFont(<span class=\"keyword\">new</span> <span class=\"title class_\">Font</span>(<span class=\"string\">&quot;宋体,楷体,微软雅黑&quot;</span>, Font.BOLD, <span class=\"number\">35</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 数字和字母的组合</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">baseNumLetter</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 旋转原点的 x 坐标</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        String ch;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            <span class=\"comment\">//设置字体旋转角度,角度小于30度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">degree</span> <span class=\"operator\">=</span> random.nextInt() % <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">dot</span> <span class=\"operator\">=</span> random.nextInt(baseNumLetter.length());</span><br><span class=\"line\">            ch = baseNumLetter.charAt(dot) + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            builder.append(ch);</span><br><span class=\"line\">            <span class=\"comment\">//正向旋转</span></span><br><span class=\"line\">            graphics.rotate(degree * Math.PI / <span class=\"number\">180</span>, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            graphics.drawString(ch, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            <span class=\"comment\">//反向旋转</span></span><br><span class=\"line\">            graphics.rotate(-degree * Math.PI / <span class=\"number\">180</span>, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 字母间距记录</span></span><br><span class=\"line\">            x += <span class=\"number\">35</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 画干扰线</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置随机颜色</span></span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            <span class=\"comment\">// 随机画线</span></span><br><span class=\"line\">            graphics.drawLine(random.nextInt(width), random.nextInt(height), random.nextInt(width), random.nextInt(height));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加噪点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> random.nextInt(width);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> random.nextInt(height);</span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            graphics.fillRect(x1, y1, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机取色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Color <span class=\"title function_\">getRandomColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">ran</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(ran.nextInt(<span class=\"number\">256</span>), ran.nextInt(<span class=\"number\">256</span>), ran.nextInt(<span class=\"number\">256</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Controller-控制层\"><a href=\"#2、Controller-控制层\" class=\"headerlink\" title=\"2、Controller 控制层\"></a>2、Controller 控制层</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VerificationController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisUtils redisUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码生成工具，返回图片信息</span></span><br><span class=\"line\"><span class=\"comment\">     * 适合学习练手使用，redis 呢能存在一个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/getImageCode&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getImageCode</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 禁止缓存</span></span><br><span class=\"line\">        response.setDateHeader(<span class=\"string\">&quot;Expires&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Cache-Control&quot;</span>, <span class=\"string\">&quot;no-store, no-cache, must-revalidate&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Cache-Control&quot;</span>, <span class=\"string\">&quot;post-check=0, pre-check=0&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Pragma&quot;</span>, <span class=\"string\">&quot;no-cache&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置响应格式为png图片</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;image/png&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成图片验证码</span></span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">randomText</span> <span class=\"operator\">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class=\"line\">        <span class=\"comment\">// 存入redis</span></span><br><span class=\"line\">        redisUtils.set(ConstantCode.KAPTCHA_KEY, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        ImageIO.write(image, ConstantCode.IMG_JPG, out);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码 Base64</span></span><br><span class=\"line\"><span class=\"comment\">     * 可生成多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/getCaptchaInfo&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getCaptchaInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成图片验证码</span></span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码key</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">randomText</span> <span class=\"operator\">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class=\"line\">        <span class=\"comment\">// 存入redis</span></span><br><span class=\"line\">        redisUtils.set(verifyKey, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        success.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        success.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二：kaptcha-依赖实现\"><a href=\"#方法二：kaptcha-依赖实现\" class=\"headerlink\" title=\"方法二：kaptcha 依赖实现\"></a>方法二：kaptcha 依赖实现</h2><h3 id=\"1、验证码配置\"><a href=\"#1、验证码配置\" class=\"headerlink\" title=\"1、验证码配置\"></a>1、验证码配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.util.Config;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.google.code.kaptcha.Constants.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CaptchaConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultKaptcha <span class=\"title function_\">getKaptchaBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultKaptcha</span> <span class=\"variable\">defaultKaptcha</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKaptcha</span>();</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片宽度 默认为200</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class=\"string\">&quot;160&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片高度 默认为50</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class=\"string\">&quot;60&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符大小 默认为40</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class=\"string\">&quot;38&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// KAPTCHA_SESSION_KEY</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class=\"string\">&quot;kaptchaCode&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符长度 默认为5</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class=\"string\">&quot;Arial,Courier&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>(properties);</span><br><span class=\"line\">        defaultKaptcha.setConfig(config);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> defaultKaptcha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;captchaProducerMath&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultKaptcha <span class=\"title function_\">getKaptchaBeanMath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultKaptcha</span> <span class=\"variable\">defaultKaptcha</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKaptcha</span>();</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 边框颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER_COLOR, <span class=\"string\">&quot;105,179,90&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片宽度 默认为200</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class=\"string\">&quot;160&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片高度 默认为50</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class=\"string\">&quot;60&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符大小 默认为40</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class=\"string\">&quot;35&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// KAPTCHA_SESSION_KEY</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class=\"string\">&quot;kaptchaCodeMath&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本生成器 注意：KaptchaTextCreator的路径</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, <span class=\"string\">&quot;com.test.demo.KaptchaTextCreator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符间距 默认为2</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符长度 默认为5</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class=\"string\">&quot;Arial,Courier&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码噪点颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_NOISE_COLOR, <span class=\"string\">&quot;white&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 干扰实现类</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_NOISE_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>(properties);</span><br><span class=\"line\">        defaultKaptcha.setConfig(config);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> defaultKaptcha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、验证码文本生成器\"><a href=\"#2、验证码文本生成器\" class=\"headerlink\" title=\"2、验证码文本生成器\"></a>2、验证码文本生成器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.text.impl.DefaultTextCreator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码文本生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KaptchaTextCreator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DefaultTextCreator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CNUMBERS = <span class=\"string\">&quot;0,1,2,3,4,5,6,7,8,9,10&quot;</span>.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getText</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">suChinese</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">randomoperands</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.round(Math.random() * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = x * y;</span><br><span class=\"line\">            suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            suChinese.append(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(x == <span class=\"number\">0</span>) &amp;&amp; y % x == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                result = y / x;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = x + y;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= y) &#123;</span><br><span class=\"line\">                result = x - y;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = y - x;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = x + y;</span><br><span class=\"line\">            suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            suChinese.append(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">            suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        suChinese.append(<span class=\"string\">&quot;=?@&quot;</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suChinese.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、测试正码生成\"><a href=\"#3、测试正码生成\" class=\"headerlink\" title=\"3、测试正码生成\"></a>3、测试正码生成</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.Producer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码操作处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CaptchaController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Producer captchaProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;captchaProducerMath&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Producer captchaProducerMath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisUtils redisUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文本验证码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/captchaCharImage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getCharCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">ajax</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成验证码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capText</span> <span class=\"operator\">=</span> captchaProducerMath.createText();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capStr</span> <span class=\"operator\">=</span> capText.substring(<span class=\"number\">0</span>, capText.lastIndexOf(<span class=\"string\">&quot;@&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">code</span> <span class=\"operator\">=</span> capText.substring(capText.lastIndexOf(<span class=\"string\">&quot;@&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> captchaProducerMath.createImage(capStr);</span><br><span class=\"line\">        <span class=\"comment\">// 保存验证码信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        redisUtils.set(verifyKey, code, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ajax;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成验证码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/captchaMathImage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getMathCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">ajax</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成验证码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capText</span> <span class=\"operator\">=</span> captchaProducer.createText();</span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> captchaProducerMath.createImage(capText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存验证码信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        redisUtils.set(verifyKey, capText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ajax;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h2 id=\"通用公共配置\"><a href=\"#通用公共配置\" class=\"headerlink\" title=\"通用公共配置\"></a>通用公共配置</h2><p>生成验证码的两种方式，SpringBoot项目，下面是完整代码，直接就可以用</p>\n<h3 id=\"公共依赖\"><a href=\"#公共依赖\" class=\"headerlink\" title=\"公共依赖\"></a>公共依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- redis 缓存 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- pool 对象池，springboot2.x以后用得是lettuce,添加连接池依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-pool2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 方法二需要用到的jar包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.penggle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>kaptcha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-application-yml-文件\"><a href=\"#配置-application-yml-文件\" class=\"headerlink\" title=\"配置 application.yml 文件\"></a>配置 <code>application.yml</code> 文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"comment\"># redis 配置</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"comment\"># 地址</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"comment\"># 端口，默认为6379</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据库索引</span></span><br><span class=\"line\">    <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># 密码</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">    <span class=\"comment\"># 连接超时时间</span></span><br><span class=\"line\">    <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最小空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池中的最大空闲连接</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接池的最大数据库连接数</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"comment\"># #连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class=\"line\">        <span class=\"attr\">max-wait:</span> <span class=\"string\">-1ms</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"公共常量\"><a href=\"#公共常量\" class=\"headerlink\" title=\"公共常量\"></a>公共常量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 公共常量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConstantCode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 系统缓存常量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KAPTCHA_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ss:kaptcha&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">REDIS_EXP_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">60L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Long</span> <span class=\"variable\">KAPTCHA_EXP_TIME</span> <span class=\"operator\">=</span> <span class=\"number\">60</span> * <span class=\"number\">3L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码宽高常量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">WIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">HEIGHT</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片后缀名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_JPG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jpg&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_PNG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;png&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">IMG_JPEG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jpeg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-序列化配置\"><a href=\"#Redis-序列化配置\" class=\"headerlink\" title=\"Redis 序列化配置\"></a>Redis 序列化配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class=\"line\">        template.setConnectionFactory(factory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Json序列化配置</span></span><br><span class=\"line\">        <span class=\"type\">Jackson2JsonRedisSerializer</span> <span class=\"variable\">jackson2JsonRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class=\"line\">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\">        <span class=\"comment\">// String 的序列化</span></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// key采用String的序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的key也采用String的序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">// hash的value序列化方式采用jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Redis-工具类\"><a href=\"#Redis-工具类\" class=\"headerlink\" title=\"Redis 工具类\"></a>Redis 工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.CollectionUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 日志对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(RedisUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key      缓存的键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value    缓存的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeout  时间</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit 时间颗粒度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">setCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key, <span class=\"keyword\">final</span> T value, <span class=\"keyword\">final</span> Integer timeout, <span class=\"keyword\">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 缓存键值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 缓存键值对应的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getCacheObject</span><span class=\"params\">(<span class=\"keyword\">final</span> String key)</span> &#123;</span><br><span class=\"line\">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> operation.get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得缓存的基本对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pattern 字符串前缀</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 对象列表</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Collection&lt;String&gt; <span class=\"title function_\">keys</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.keys(pattern);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除集合对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> collection 多个对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">deleteObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Collection collection)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.delete(collection);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 指定缓存失效时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key  键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time 时间(秒)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">expire</span><span class=\"params\">(String key, <span class=\"type\">long</span> time)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils expire(String key,long time) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据key 获取过期时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键 不能为null</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getExpire</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断key是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true 存在 false不存在</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasKey</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redisTemplate.hasKey(key);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils hasKey(String key) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除缓存</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 可以传一个值 或多个</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(String... key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key != <span class=\"literal\">null</span> &amp;&amp; key.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                redisTemplate.delete(key[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//============================String=============================</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存获取</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            redisTemplate.opsForValue().set(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils set(String key,Object value) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 普通缓存放入并设置时间</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true成功 false 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">set</span><span class=\"params\">(String key, Object value, <span class=\"type\">long</span> time)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (time &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set(key, value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            logger.error(<span class=\"string\">&quot;RedisUtils set(String key,Object value,long time) failure.&quot;</span> + e.getMessage());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通用返回结果封装\"><a href=\"#通用返回结果封装\" class=\"headerlink\" title=\"通用返回结果封装\"></a>通用返回结果封装</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.http.HttpStatus;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 操作消息提醒</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Result</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HashMap</span>&lt;String, Object&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">CODE_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;code&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MSG_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;msg&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATA_TAG</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;data&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象，使其表示一个空消息。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(CODE_TAG, code);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(MSG_TAG, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化一个新创建的 AjaxResult 对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Result</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(CODE_TAG, code);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(MSG_TAG, msg);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(data)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.put(DATA_TAG, data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(<span class=\"string\">&quot;操作成功&quot;</span>, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.success(msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 成功消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">success</span><span class=\"params\">(String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(HttpStatus.OK.value(), msg, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(<span class=\"string\">&quot;操作失败&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg 返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.error(msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(String msg, Object data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回错误消息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> msg  返回内容</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 警告消息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Result <span class=\"title function_\">error</span><span class=\"params\">(<span class=\"type\">int</span> code, String msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>(code, msg, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方便链式调用</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key   键</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 数据对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">put</span><span class=\"params\">(String key, Object value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.put(key, value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法一：Graphics2D-画图实现\"><a href=\"#方法一：Graphics2D-画图实现\" class=\"headerlink\" title=\"方法一：Graphics2D 画图实现\"></a>方法一：Graphics2D 画图实现</h2><p>使用 jdk 画图 Graphics2D 生成验证码</p>\n<h3 id=\"1、验证码工具类\"><a href=\"#1、验证码工具类\" class=\"headerlink\" title=\"1、验证码工具类\"></a>1、验证码工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VerifyCodeUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 传入BufferedImage对象，并将生成好的验证码保存到BufferedImage中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">drawRandomText</span><span class=\"params\">(BufferedImage bufferedImage, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Graphics2D</span> <span class=\"variable\">graphics</span> <span class=\"operator\">=</span> (Graphics2D) bufferedImage.getGraphics();</span><br><span class=\"line\">        <span class=\"comment\">// 验证码背景色</span></span><br><span class=\"line\">        graphics.setColor(<span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 填充线条背景</span></span><br><span class=\"line\">        graphics.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">        graphics.setFont(<span class=\"keyword\">new</span> <span class=\"title class_\">Font</span>(<span class=\"string\">&quot;宋体,楷体,微软雅黑&quot;</span>, Font.BOLD, <span class=\"number\">35</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 数字和字母的组合</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">baseNumLetter</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 旋转原点的 x 坐标</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">40</span>;</span><br><span class=\"line\">        String ch;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            <span class=\"comment\">//设置字体旋转角度,角度小于30度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">degree</span> <span class=\"operator\">=</span> random.nextInt() % <span class=\"number\">30</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">dot</span> <span class=\"operator\">=</span> random.nextInt(baseNumLetter.length());</span><br><span class=\"line\">            ch = baseNumLetter.charAt(dot) + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            builder.append(ch);</span><br><span class=\"line\">            <span class=\"comment\">//正向旋转</span></span><br><span class=\"line\">            graphics.rotate(degree * Math.PI / <span class=\"number\">180</span>, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            graphics.drawString(ch, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            <span class=\"comment\">//反向旋转</span></span><br><span class=\"line\">            graphics.rotate(-degree * Math.PI / <span class=\"number\">180</span>, x, <span class=\"number\">45</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 字母间距记录</span></span><br><span class=\"line\">            x += <span class=\"number\">35</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 画干扰线</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置随机颜色</span></span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            <span class=\"comment\">// 随机画线</span></span><br><span class=\"line\">            graphics.drawLine(random.nextInt(width), random.nextInt(height), random.nextInt(width), random.nextInt(height));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 添加噪点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> random.nextInt(width);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">y1</span> <span class=\"operator\">=</span> random.nextInt(height);</span><br><span class=\"line\">            graphics.setColor(getRandomColor());</span><br><span class=\"line\">            graphics.fillRect(x1, y1, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 随机取色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Color <span class=\"title function_\">getRandomColor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">ran</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Color</span>(ran.nextInt(<span class=\"number\">256</span>), ran.nextInt(<span class=\"number\">256</span>), ran.nextInt(<span class=\"number\">256</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、Controller-控制层\"><a href=\"#2、Controller-控制层\" class=\"headerlink\" title=\"2、Controller 控制层\"></a>2、Controller 控制层</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VerificationController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisUtils redisUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码生成工具，返回图片信息</span></span><br><span class=\"line\"><span class=\"comment\">     * 适合学习练手使用，redis 呢能存在一个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/getImageCode&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getImageCode</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 禁止缓存</span></span><br><span class=\"line\">        response.setDateHeader(<span class=\"string\">&quot;Expires&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Cache-Control&quot;</span>, <span class=\"string\">&quot;no-store, no-cache, must-revalidate&quot;</span>);</span><br><span class=\"line\">        response.addHeader(<span class=\"string\">&quot;Cache-Control&quot;</span>, <span class=\"string\">&quot;post-check=0, pre-check=0&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Pragma&quot;</span>, <span class=\"string\">&quot;no-cache&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置响应格式为png图片</span></span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;image/png&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 生成图片验证码</span></span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">randomText</span> <span class=\"operator\">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class=\"line\">        <span class=\"comment\">// 存入redis</span></span><br><span class=\"line\">        redisUtils.set(ConstantCode.KAPTCHA_KEY, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\">        ImageIO.write(image, ConstantCode.IMG_JPG, out);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 验证码 Base64</span></span><br><span class=\"line\"><span class=\"comment\">     * 可生成多个</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/getCaptchaInfo&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getCaptchaInfo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成图片验证码</span></span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedImage</span>(ConstantCode.WIDTH, ConstantCode.HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码key</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">randomText</span> <span class=\"operator\">=</span> VerifyCodeUtils.drawRandomText(image, ConstantCode.WIDTH, ConstantCode.HEIGHT);</span><br><span class=\"line\">        <span class=\"comment\">// 存入redis</span></span><br><span class=\"line\">        redisUtils.set(verifyKey, randomText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        success.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        success.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法二：kaptcha-依赖实现\"><a href=\"#方法二：kaptcha-依赖实现\" class=\"headerlink\" title=\"方法二：kaptcha 依赖实现\"></a>方法二：kaptcha 依赖实现</h2><h3 id=\"1、验证码配置\"><a href=\"#1、验证码配置\" class=\"headerlink\" title=\"1、验证码配置\"></a>1、验证码配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.util.Config;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> com.google.code.kaptcha.Constants.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CaptchaConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultKaptcha <span class=\"title function_\">getKaptchaBean</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultKaptcha</span> <span class=\"variable\">defaultKaptcha</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKaptcha</span>();</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片宽度 默认为200</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class=\"string\">&quot;160&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片高度 默认为50</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class=\"string\">&quot;60&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符大小 默认为40</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class=\"string\">&quot;38&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// KAPTCHA_SESSION_KEY</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class=\"string\">&quot;kaptchaCode&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符长度 默认为5</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class=\"string\">&quot;4&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class=\"string\">&quot;Arial,Courier&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>(properties);</span><br><span class=\"line\">        defaultKaptcha.setConfig(config);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> defaultKaptcha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(name = &quot;captchaProducerMath&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultKaptcha <span class=\"title function_\">getKaptchaBeanMath</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultKaptcha</span> <span class=\"variable\">defaultKaptcha</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultKaptcha</span>();</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER, <span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 边框颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_BORDER_COLOR, <span class=\"string\">&quot;105,179,90&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_COLOR, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片宽度 默认为200</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_WIDTH, <span class=\"string\">&quot;160&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片高度 默认为50</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_IMAGE_HEIGHT, <span class=\"string\">&quot;60&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符大小 默认为40</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_SIZE, <span class=\"string\">&quot;35&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// KAPTCHA_SESSION_KEY</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_SESSION_CONFIG_KEY, <span class=\"string\">&quot;kaptchaCodeMath&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本生成器 注意：KaptchaTextCreator的路径</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_IMPL, <span class=\"string\">&quot;com.test.demo.KaptchaTextCreator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符间距 默认为2</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_SPACE, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字符长度 默认为5</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_CHAR_LENGTH, <span class=\"string\">&quot;6&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_TEXTPRODUCER_FONT_NAMES, <span class=\"string\">&quot;Arial,Courier&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 验证码噪点颜色 默认为Color.BLACK</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_NOISE_COLOR, <span class=\"string\">&quot;white&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 干扰实现类</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_NOISE_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 图片样式 水纹com.google.code.kaptcha.impl.WaterRipple 鱼眼com.google.code.kaptcha.impl.FishEyeGimpy 阴影com.google.code.kaptcha.impl.ShadowGimpy</span></span><br><span class=\"line\">        properties.setProperty(KAPTCHA_OBSCURIFICATOR_IMPL, <span class=\"string\">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Config</span>(properties);</span><br><span class=\"line\">        defaultKaptcha.setConfig(config);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> defaultKaptcha;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、验证码文本生成器\"><a href=\"#2、验证码文本生成器\" class=\"headerlink\" title=\"2、验证码文本生成器\"></a>2、验证码文本生成器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.text.impl.DefaultTextCreator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码文本生成器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KaptchaTextCreator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DefaultTextCreator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CNUMBERS = <span class=\"string\">&quot;0,1,2,3,4,5,6,7,8,9,10&quot;</span>.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getText</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> random.nextInt(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">suChinese</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">randomoperands</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) Math.round(Math.random() * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result = x * y;</span><br><span class=\"line\">            suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            suChinese.append(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(x == <span class=\"number\">0</span>) &amp;&amp; y % x == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                result = y / x;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = x + y;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (randomoperands == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= y) &#123;</span><br><span class=\"line\">                result = x - y;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result = y - x;</span><br><span class=\"line\">                suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">                suChinese.append(<span class=\"string\">&quot;-&quot;</span>);</span><br><span class=\"line\">                suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result = x + y;</span><br><span class=\"line\">            suChinese.append(CNUMBERS[x]);</span><br><span class=\"line\">            suChinese.append(<span class=\"string\">&quot;+&quot;</span>);</span><br><span class=\"line\">            suChinese.append(CNUMBERS[y]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        suChinese.append(<span class=\"string\">&quot;=?@&quot;</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> suChinese.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、测试正码生成\"><a href=\"#3、测试正码生成\" class=\"headerlink\" title=\"3、测试正码生成\"></a>3、测试正码生成</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.google.code.kaptcha.Producer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.FastByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 验证码操作处理</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CaptchaController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Producer captchaProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource(name = &quot;captchaProducerMath&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Producer captchaProducerMath;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RedisUtils redisUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 文本验证码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/captchaCharImage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getCharCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">ajax</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成验证码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capText</span> <span class=\"operator\">=</span> captchaProducerMath.createText();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capStr</span> <span class=\"operator\">=</span> capText.substring(<span class=\"number\">0</span>, capText.lastIndexOf(<span class=\"string\">&quot;@&quot;</span>));</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">code</span> <span class=\"operator\">=</span> capText.substring(capText.lastIndexOf(<span class=\"string\">&quot;@&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> captchaProducerMath.createImage(capStr);</span><br><span class=\"line\">        <span class=\"comment\">// 保存验证码信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        redisUtils.set(verifyKey, code, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ajax;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成验证码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/captchaMathImage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">getMathCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Result</span> <span class=\"variable\">ajax</span> <span class=\"operator\">=</span> Result.success();</span><br><span class=\"line\">        <span class=\"comment\">// 生成验证码</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">capText</span> <span class=\"operator\">=</span> captchaProducer.createText();</span><br><span class=\"line\">        <span class=\"type\">BufferedImage</span> <span class=\"variable\">image</span> <span class=\"operator\">=</span> captchaProducerMath.createImage(capText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 保存验证码信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">verifyKey</span> <span class=\"operator\">=</span> ConstantCode.KAPTCHA_KEY + uuid;</span><br><span class=\"line\">        redisUtils.set(verifyKey, capText, ConstantCode.KAPTCHA_EXP_TIME);</span><br><span class=\"line\">        <span class=\"comment\">// 转换流信息写出</span></span><br><span class=\"line\">        <span class=\"type\">FastByteArrayOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FastByteArrayOutputStream</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ImageIO.write(image, <span class=\"string\">&quot;jpg&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Result.error(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;uuid&quot;</span>, uuid);</span><br><span class=\"line\">        ajax.put(<span class=\"string\">&quot;img&quot;</span>, Base64.getEncoder().encodeToString(os.toByteArray()));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ajax;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"Linux命令最全总结","abbrlink":"5b03ebe5","date":"2023-05-13T12:01:35.000Z","cover":"https://img.shijinying.top/img/cover/default_cover2.jpg","_content":"### 一、文件和命令\n\n#### 1、cd 命令\n\n（它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径）\n\n- cd /home\t\t进入 '/ home' 目录\n- cd ..                返回上一级目录\n- cd ../..             返回上两级目录\n- cd /                 返回跟目录\n- cd -                 返回上次所在的目录\n\n- `mkdir` <目录名>  创建目录\n- `mkdir dir1 dir2`   同时创建两个目录\n- `mkdir -p  /tmp/dir1/dir2`   递归创建目录树\n- `rm -f file1`  删除'file1'⽂件\n- `rmdir dir1`  删除'dir1'⽬录\n- `rm -rf dir1`  删除'dir1'⽬录和其内容\n- `rm -rf dir1 dir2`  同时删除两个⽬录及其内容\n\n#### 2、pwd 命令\n\n`pwd` 显示工作路径\n\n#### 3、ls 命令\n\n- ls 查看目录中的文件\n- ls -l 显示文件和目录的详细资料\n- ls -a 列出全部文件，包含隐藏文件\n- ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）\n- ls -lSr  查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）\n- tree  查看⽂件和⽬录的树形结构 （如果没有需要先安装 yum install tree）\n- ls -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来\n- ls -al /proc/pid/exe   通过pid查询程序正在运行的路径\n\n#### 4、cp 命令\n\n（用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下）\n\n- -a   将文件的特性一起复制\n- -p   连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份\n- -i   若目标文件已经存在时，在覆盖时会先询问操作的进行\n- -r   递归持续复制，用于目录的复制行为\n- -u   目标文件与源文件有差异时才会复制\n- `cp dir/* .`  复制某目录下的所有文件至当前目录\n- `cp -a dir1 dir2` 复制目录\n- `cp -a /temp/dir1 .`   复制一个目录至当前目录\n- `ln -s file1 link1`  创建指向⽂件/⽬录的软链接\n- `ln file1 lnk1`  创建指向⽂件/⽬录的物理链接\n- `touch -t 0712250000 file1` 修改一个文件或目录的时间戳 - (YYMMDDhhmm)\n\n#### 5、mv 命令\n\n- -f   force强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n- -i   若目标文件已经存在，就会询问是否覆盖\n- -u   若目标文件已经存在，且比目标文件新，才会更新\n- `mv old_dir new_dir`  重命名/移动⽬录\n\n#### 6、rm 命令\n\n- -f ：就是force的意思，忽略不存在的文件，不会出现警告消息\n- -i ：互动模式，在删除前会询问用户是否操作\n- -r ：递归删除，最常用于目录删除，它是一个非常危险的参数\n\n### 二、查看文件内容\n\n#### 7、cat 命令\n\n（用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用）\n\n- `cat file1` 从第一个字节开始正向查看文件的内容\n- `cat -n file1` 标示文件的行数\n- `cat xxx.txt`   awk 'NR%2==1'\n- `tac file1` 从最后一行开始反向查看一个文件的内容\n- `more file1` 查看一个长文件的内容\n- `less file1`  类似 more 命令，但允许方向操作\n- `head -n 2 file1` 查看一个文件的前两行\n- `tail -f /log/msg`  实时查看添加到⽂件中的内容\n- `tail -n 2 file1` 查看一个文件的最后两行\n- `tail -n +1000 file1` 从1000行开始显示，显示1000行以后的\n- `cat filename | head -n 3000 | tail -n +1000` 显示1000行到3000行\n- `cat filename | tail -n +3000 | head -n 1000` 从第3000行开始，显示1000(即显示3000~3999行)\n- `grep ss hello.txt`  在⽂件hello.txt中查找关键词 ss \n- `grep ^s hello.txt `  在⽂件hello.txt中查找以 s 开头的内容\n- `grep [0-9] hello.txt`  选择hello.txt⽂件中所有包含数字的⾏\n- `sed 's/ss/mm/g' hello.txt`  将hello.txt⽂件中的 ss 替换成 mm\n- `sed '/^$/d' hello.txt `  从hello.txt⽂件中删除所有空⽩⾏\n- `sed '/ *#/d; /^$/d' hello.txt `  从hello.txt⽂件中删除所有注释和空⽩⾏\n- `sed -e '1d' hello.txt`   从⽂件hello.txt 中排除第⼀⾏\n- `sed -n '/s1/p' hello.txt `  查看只包含关键词\"s1\"的⾏\n- `sed -e 's/ *$//' hello.txt`  删除每⼀⾏最后的空⽩字符\n- `sed -e 's/s1//g' hello.txt`  从⽂档中只删除词汇s1并保留剩余全部\n- `sed -n '1,5p;5q' hello.txt`  查看从第⼀⾏到第5⾏内容\n- `sed -n '5p;5q' hello.txt`  查看第5⾏\n- `paste file1 file2`  合并两个⽂件或两栏的内容\n- `paste -d '+' file1 file2 `  合并两个⽂件或两栏的内容，中间⽤\"+\"区分\n- `sort file1 file2`  排序两个⽂件的内容\n- `sort file1 file2`   uniq\n- `sort file1 file2`   uniq -u\n- `sort file1 file2`   uniq -d\n- `comm -1 file1 file2 `  ⽐较两个⽂件的内容(去除'file1'所含内容)\n- `comm -2 file1 file2`  ⽐较两个⽂件的内容(去除'file2'所含内容)\n- `comm -3 file1 file2`  ⽐较两个⽂件的内容(去除两⽂件共有部分)\n\n### 三、文件搜索\n\n#### 8、find 命令\n\n- `find / -name file` 从根目录开始搜索文件/目录\n- `find / -user user1`  搜索用户 user1 的文件/目录\n- `find /dir -name *.bin`  在目录/dir 中搜索带有 .bin 后缀的文件\n- `find / -name file1` 从 '/' 开始进入根文件系统搜索文件和目录（完整文件或文件名）\n- `find / -user user1` 搜索属于用户 'user1' 的文件和目录\n- `find /usr/bin -type f -atime +100` 搜索在过去100天内未被使用过的执行文件\n- `find /usr/bin -type f -mtime -10` 搜索在10天内被创建或者修改过的文件\n- `find . -regex '.*\\(net\\|comm\\).*'`  '-regex' 选项匹配整个路径名，出当前目录树中所有文件名中任意位置包含字符串 net 或 comm 的文件\n- `locate *.mp4`  寻找 .mp4结尾的文件\n- whereis <关键词> 显示某⼆进制⽂件/可执⾏⽂件的路径\n- `whereis halt` 显示一个二进制文件、源码或man的位置\n- which <关键词>   查找系统⽬录下某的⼆进制⽂件\n- `which halt` 显示一个二进制文件或可执行文件的完整路径\n\n### 四、文件的权限 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\n\n#### 9、chmod 命令\n\n- `ls -lh` 显示当前目录所有文件的权限\n- `chmod 777` 文件名  修改文件权限（最高权限）\n- `chmod ugo+rwx dir` 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r，4 ）、写(w，2)和执行(x，1)的权限\n- `chmod go-rwx dir1` 删除群组(g)与其他人(o)对目录的读写执行权限\n- chmod **u**+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限\n- chmod **u**-s /bin/file1 禁用一个二进制文件的 SUID位\n- `chmod g+s /home/public` 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的\n- `chmod g-s /home/public` 禁用一个目录的 SGID 位\n- chmod **o**+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件\n- chmod **o**-t /home/public 禁用一个目录的 STIKY 位\n- chmod +**x** 文件路径 为所有者、所属组和其他用户添加执行的权限\n- chmod -**x** 文件路径 为所有者、所属组和其他用户删除执行的权限\n- chmod **u**+**x** 文件路径 为所有者添加执行的权限\n- chmod g+**x** 文件路径 为所属组添加执行的权限\n- `chmod o+x` 文件路径 为其他用户添加执行的权限\n- `chmod ug+x` 文件路径 为所有者、所属组添加执行的权限\n- `chmod =wx` 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限\n- `chmod ug=wx` 文件路径 为所有者、所属组添加写、执行的权限，取消读权限\n\n#### 10、chown 命令\n\n（改变文件的所有者）\n\n- `chown user1 file1` 改变一个文件的所有人属性\n- `chown -R user1 dir1` 改变一个目录的所有人属性并同时改变改目录下所有文件的属性\n- `chown user1:group1 file1` 改变一个文件的所有人和群组属性\n\n#### 11、chgrp 命令\n\n（改变文件所属用户组）\n\n- `chgrp group1 file1` 改变文件的群组\n\n### 五、文本处理\n\n#### 12、grep 命令\n\n（分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等）\n\n- `grep Aug /var/log/messages` 在文件 '/var/log/messages'中查找关键词\"Aug\"\n- `grep ^Aug /var/log/messages` 在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇\n- `grep [0-9] /var/log/messages` 选择 '/var/log/messages' 文件中所有包含数字的行\n- `grep Aug -R /var/log/*` 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"\n- `sed 's/stringa1/stringa2/g' example.txt` 将example.txt文件中的 \"string1\" 替换成 \"string2\"\n- `sed '/^$/d' example.txt` 从example.txt文件中删除所有空白行\n\n#### 13、paste 命令\n\n- `paste file1 file2` 合并两个文件或两栏的内容（查看两文件合并后的内容）\n- `paste -d '+' file1 file2` 合并两个文件或两栏的内容，中间用\"+\"区分\n\n#### 14、sort 命令\n\n- `sort file1 file2` 排序两个文件的内容\n- `sort file1 file2 | uniq` 取出两个文件的并集(重复的行只保留一份)\n- `sort file1 file2 | uniq -u` 删除交集，留下其他的行\n- `sort file1 file2 | uniq -d` 取出两个文件的交集(只留下同时存在于两个文件中的文件)\n\n#### 15、comm 命令\n\n- `comm -1 file1 file2` 比较两个文件的内容只删除 'file1' 所包含的内容\n- `comm -2 file1 file2` 比较两个文件的内容只删除 'file2' 所包含的内容\n- `comm -3 file1 file2` 比较两个文件的内容只删除两个文件共有的部\n\n### 六、打包和压缩文件\n\n#### 16、tar 命令\n\n==对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压）推荐==（重新整理）\n\n- -c ：新建打包文件\n- -t ：查看打包文件的内容含有哪些文件名\n- -x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中\n- -j ：通过bzip2的支持进行压缩/解压缩\n- -z ：通过gzip的支持进行压缩/解压缩\n- -v ：在压缩/解压缩过程中，将正在处理的文件名显示出来\n- -f filename ：filename为要处理的文件\n- -C dir ：指定压缩/解压缩的目录dir\n- 压缩：`tar -jcv -f filename.tar.bz2` 要被处理的文件或目录名称\n- 查询：`tar -jtv -f filename.tar.bz2`\n- 解压：`tar -jxv -f filename.tar.bz2 -C` 欲解压缩的目录\n- `bunzip2 file1.bz2` 解压一个叫做 'file1.bz2'的文件\n- `bzip2 file1` 压缩一个叫做 'file1' 的文件\n- `gunzip file1.gz` 解压一个叫做 'file1.gz'的文件\n- `gzip file1` 压缩一个叫做 'file1'的文件\n- `gzip -9 file1` 最大程度压缩\n- `rar a file1.rar test_file` 创建一个叫做 'file1.rar' 的包\n- `rar a file1.rar file1 file2 dir1` 同时压缩 'file1', 'file2' 以及目录 'dir1'\n- `rar x file1.rar` 解压rar包\n- `zip file1.zip file1` 创建一个zip格式的压缩包\n- `unzip file1.zip` 解压一个zip格式压缩包\n- `zip -r file1.zip file1 file2 dir1` 将几个文件和目录同时压缩成一个zip格式的压缩包\n\n### 七、进程相关的命令\n\n#### 17、ps 命令\n\n用于将某个时间点的进程运行情况选取下来并输出，process之意\n\n- -A ：所有的进程均显示出来\n- -a ：不与terminal有关的所有进程\n- -u ：有效用户的相关进程\n- -x ：一般与a参数一起使用，可列出较完整的信息\n- -l ：较长，较详细地将PID的信息列出\n\n```bash\nps -ef # 显示所有进程的详细信息。\nps aux # 查看系统所有的进程数据\nps ax # 查看不与terminal有关的所有进程\nps -lA # 查看系统所有的进程数据\nps axjf # 查看连同一部分进程树状态\nnetstat -lntp # 查看各个节点及进程\n```\n\n#### 18、kill 命令\n\n- kill -9 pid  （-9表示强制关闭）\n- kill -9 程序的名字\n- kill - \n- pkill 程序的名字\n\n#### 19、Vim 下复制粘贴等操作\n\n- x,X : 在一行中，x为向后删除一个字符（相当于del键），X为向前删除一个字符（相当于backspace键）\n- dd : 删除光标所在的那一整行\n- ndd : n 为数字。从光标开始，删除向下n列\n- yy : 复制光标所在的那一行\n- nyy : n为数字。复制光标所在的向下n行\n- p,P : p 为将已复制的数据粘贴到光标的下一行，P则为贴在光标的上一行\n- u : 复原前一个操作\n- CTRL + r : 重做上一个操作\n- 小数点 '.'：重复前一个动作\n- :set number :在每一行设置行标号\n- :n1,n2 m n3 移动n1-n2行(包括n1,n2)到n3行之下\n- :n1,n2 co n3 复制n1-n2行(包括n1,n2)到n3行之下\n\n- :n1,n2 d 删除n1-n2行(包括n1,n2)行\n\n### 系统常用命令\n\n#### 关机、注销、重启\n\n```bash\n查看进程端口号：netstat -tunlp|grep 端口号 \nss -tnl  查看正在已使用的端口\nshutdown -h now 关闭系统(1) 即刻关机\nshutdown -h 10 10分钟后关机\nshutdown -h 11:00  11:00 关机\nshutdown -h +10 预定时间关机（10分钟后关机）\nshutdown -c  取消指定时间关机\nshutdown -f now 重启\nshutdown -r 10  10分钟后重启\nshutdown -r 11:00   定时重启\nreboot 重启\ninit 6 重启\ninit 0 即刻关机\ntelinit 0 关机\npoweroff   立刻关机\nhalt 关机\nsync  buff数据同步到磁盘\nlogout 退出登录Shell\ntime 测算一个命令（即程序）的执行时间\n```\n\n### 系统信息和性能查看\n\n```bash\n# 查看系统的详细信息\nlsb_release -a\n# 查看内核/OS/CPU信息\nuname -a \n# 查看内核版本\nuname -r\n# 查看处理器架构\nuname -m\n# 查看处理器架构\narch\n# 查看主机名称\nhostname\n# 显示当前登录系统的用户\nwho\n# 显示登陆时的用户名\nwho am i\n# 显示当前用户名\nwhoami\n# 查看 linux 版本信息\ncat /proc/version\n# 查看 CPU 信息\ncat /proc/cpuinfo\n# 查看中断\ncat /proc/interrupts\n# 查看系统负载\ncat /proc/loadavg\n# 查看系统运行时间、用户数、负载\nuptime\n# 查看系统的环境便令\nenv\n# 查看系统PCI设备信息\nlspci -tv\n# 查看已加载的系统模块\nlsmod\n# 查看内存总量\ngrep MemTotal /proc/meminfo\n# 查看空闲内存量\ngrep MemFree /proc/meminfo\n# 查看内存用量和交换区用量\nfree -m\n# 显示系统时间\ndate\n# 显示2021日历表\ncal 2021\n# 动态显示cpu/内存/进程情况\ntop\n# 每1秒采一次系统状态，采20次\nvmstat 1 20 \n# 查看io读写/cpu使用情况\niostat\n# 查看 cpu 使用情况（1秒1次，共10次）\nsar -u 1 10\n# 查询磁盘性能\nsar -d 1 10\n\n# 找出占用内存资源最多的前 10 个进程\nps -auxf | sort -nr -k 4 | head -10\n# 找出占用 CPU 资源最多的前 10 个进程\nps -auxf | sort -nr -k 3 | head -10\n```\n\n### 磁盘和分区\n\n```bash\n# 查看所属有磁盘分区\nfdisk -l\n# 查看所有交换分区\nswapon -s\n# 查看磁盘使用情况及挂载点\ndf -h\n# 查看磁盘使用情况及挂载点\ndf -hl\n# 查看指定某个目录大小\ndu -sh /dir\n# 从高到底依次显示文件和目录大小\ndu -sk * | sort -rn\n# 查看内存\nfree -h\n# 查看CPUs\ncat /proc/cpuinfo\n\n\n# 挂在hda2盘\nmount /dev/hda2 /mnt/hda2\n# 指定⽂件系统类型挂载（如ntfs）\nmount -t ntfs /dev/sdc1 /mnt/usbhd1\n# 挂载iso⽂件\nmount -o loop xxx.iso /mnt/cdrom\n# 挂载usb盘/闪存设备\nmount /dev/sda1 /mnt/usbdisk\n# 通过设备名卸载\numount -v /dev/sda1\n# 通过挂载点卸载\numount -v /mnt/mymnt\n# 强制卸载(慎⽤)\nfuser -km /mnt/hda1\n```\n\n### 用户和用户组\n\n```bash\n# 创建用户\nuseradd ss\n# 查看所用系统用户\ncut -d: -f1 /etc/passwd\n# 删除用户\nuserdel -r ss\n# 创建用户组\ngroupadd group_name\n# 查看系统所有组\ncut -d: -f1 /etc/group\n# 删除用户组\ngroupdel group_name\n# 修改用户的组\nusermod -g group_name user_name\n# 将用户添加到组\nusermod -aG group_name user_name\n# 修改用户 ss 的登录 Shell、主目录及用户组\nusermod -s /bin/ksh -d /home/codepig –g dev ss\n# 查看 ss 用户所在的组\ngroups ss\n# 切换到另一个用户环境\nsu user_name\n# 修改口令\npasswd\n# 修改用户密码\npasswd ss\n# 查看用户活动\nw\n# 查看指定用户 ss 的信息\nid ss\n# 查看用户登录日志\nlast\n# 查看当前用户的计划任务\ncrontab -l\n```\n\n### 网络和进程管理\n\n```bash\n# 查看网络接口属性\nifconfig\n# 查看某网卡的配置\nifconfig eth0\n# 查看路由表\nroute -n\n# 查看所有监听端⼝\nnetstat -lntp\n# 查看已经建立连接的TCP连接\nnetstat -antp\n# 查看TCP/UDP的状态信息\nnetstat -lutp\n# 启⽤eth0⽹络设备\nifup eth0\n# 禁⽤eth0⽹络设备\nifdown eth0\n# 查看iptables规则\niptables -L\n# 配置ip地址\nifconfig eth0 192.168.1.1 netmask 255.255.255.0\n# 以dhcp模式启⽤eth0\ndhclient eth0\n# 配置默认⽹关\nroute add -net 0/0 gw Gateway_IP\n# 配置静态路由到达⽹络'192.168.0.0/16'\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1\n# 删除静态路由\nroute del 0/0 gw Gateway_IP\n# 查看主机名\nhostname\n# 解析主机名\nhost 主机名  例如：host www.baidu.com\n# 查询DNS记录，查看域名解析是否正常\nnslookup 主机名  例如：nslookup wwww.baidu.com\n# 查看所有进程\nps -ef\n# 过滤出你需要的进程\nps -ef|grep redis\n# kill指定名称的进程\nkill -s name\n# kill指定pid的进程\nkill -s pid\n```","source":"_posts/20230513Linux常用命令大总结.md","raw":"---\ntitle: Linux命令最全总结\ntags: linux\ncategories: server\nabbrlink: 5b03ebe5\ndate: 2023-05-13 20:01:35\ncover:\n---\n### 一、文件和命令\n\n#### 1、cd 命令\n\n（它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径）\n\n- cd /home\t\t进入 '/ home' 目录\n- cd ..                返回上一级目录\n- cd ../..             返回上两级目录\n- cd /                 返回跟目录\n- cd -                 返回上次所在的目录\n\n- `mkdir` <目录名>  创建目录\n- `mkdir dir1 dir2`   同时创建两个目录\n- `mkdir -p  /tmp/dir1/dir2`   递归创建目录树\n- `rm -f file1`  删除'file1'⽂件\n- `rmdir dir1`  删除'dir1'⽬录\n- `rm -rf dir1`  删除'dir1'⽬录和其内容\n- `rm -rf dir1 dir2`  同时删除两个⽬录及其内容\n\n#### 2、pwd 命令\n\n`pwd` 显示工作路径\n\n#### 3、ls 命令\n\n- ls 查看目录中的文件\n- ls -l 显示文件和目录的详细资料\n- ls -a 列出全部文件，包含隐藏文件\n- ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）\n- ls -lSr  查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）\n- tree  查看⽂件和⽬录的树形结构 （如果没有需要先安装 yum install tree）\n- ls -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来\n- ls -al /proc/pid/exe   通过pid查询程序正在运行的路径\n\n#### 4、cp 命令\n\n（用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下）\n\n- -a   将文件的特性一起复制\n- -p   连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份\n- -i   若目标文件已经存在时，在覆盖时会先询问操作的进行\n- -r   递归持续复制，用于目录的复制行为\n- -u   目标文件与源文件有差异时才会复制\n- `cp dir/* .`  复制某目录下的所有文件至当前目录\n- `cp -a dir1 dir2` 复制目录\n- `cp -a /temp/dir1 .`   复制一个目录至当前目录\n- `ln -s file1 link1`  创建指向⽂件/⽬录的软链接\n- `ln file1 lnk1`  创建指向⽂件/⽬录的物理链接\n- `touch -t 0712250000 file1` 修改一个文件或目录的时间戳 - (YYMMDDhhmm)\n\n#### 5、mv 命令\n\n- -f   force强制的意思，如果目标文件已经存在，不会询问而直接覆盖\n- -i   若目标文件已经存在，就会询问是否覆盖\n- -u   若目标文件已经存在，且比目标文件新，才会更新\n- `mv old_dir new_dir`  重命名/移动⽬录\n\n#### 6、rm 命令\n\n- -f ：就是force的意思，忽略不存在的文件，不会出现警告消息\n- -i ：互动模式，在删除前会询问用户是否操作\n- -r ：递归删除，最常用于目录删除，它是一个非常危险的参数\n\n### 二、查看文件内容\n\n#### 7、cat 命令\n\n（用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用）\n\n- `cat file1` 从第一个字节开始正向查看文件的内容\n- `cat -n file1` 标示文件的行数\n- `cat xxx.txt`   awk 'NR%2==1'\n- `tac file1` 从最后一行开始反向查看一个文件的内容\n- `more file1` 查看一个长文件的内容\n- `less file1`  类似 more 命令，但允许方向操作\n- `head -n 2 file1` 查看一个文件的前两行\n- `tail -f /log/msg`  实时查看添加到⽂件中的内容\n- `tail -n 2 file1` 查看一个文件的最后两行\n- `tail -n +1000 file1` 从1000行开始显示，显示1000行以后的\n- `cat filename | head -n 3000 | tail -n +1000` 显示1000行到3000行\n- `cat filename | tail -n +3000 | head -n 1000` 从第3000行开始，显示1000(即显示3000~3999行)\n- `grep ss hello.txt`  在⽂件hello.txt中查找关键词 ss \n- `grep ^s hello.txt `  在⽂件hello.txt中查找以 s 开头的内容\n- `grep [0-9] hello.txt`  选择hello.txt⽂件中所有包含数字的⾏\n- `sed 's/ss/mm/g' hello.txt`  将hello.txt⽂件中的 ss 替换成 mm\n- `sed '/^$/d' hello.txt `  从hello.txt⽂件中删除所有空⽩⾏\n- `sed '/ *#/d; /^$/d' hello.txt `  从hello.txt⽂件中删除所有注释和空⽩⾏\n- `sed -e '1d' hello.txt`   从⽂件hello.txt 中排除第⼀⾏\n- `sed -n '/s1/p' hello.txt `  查看只包含关键词\"s1\"的⾏\n- `sed -e 's/ *$//' hello.txt`  删除每⼀⾏最后的空⽩字符\n- `sed -e 's/s1//g' hello.txt`  从⽂档中只删除词汇s1并保留剩余全部\n- `sed -n '1,5p;5q' hello.txt`  查看从第⼀⾏到第5⾏内容\n- `sed -n '5p;5q' hello.txt`  查看第5⾏\n- `paste file1 file2`  合并两个⽂件或两栏的内容\n- `paste -d '+' file1 file2 `  合并两个⽂件或两栏的内容，中间⽤\"+\"区分\n- `sort file1 file2`  排序两个⽂件的内容\n- `sort file1 file2`   uniq\n- `sort file1 file2`   uniq -u\n- `sort file1 file2`   uniq -d\n- `comm -1 file1 file2 `  ⽐较两个⽂件的内容(去除'file1'所含内容)\n- `comm -2 file1 file2`  ⽐较两个⽂件的内容(去除'file2'所含内容)\n- `comm -3 file1 file2`  ⽐较两个⽂件的内容(去除两⽂件共有部分)\n\n### 三、文件搜索\n\n#### 8、find 命令\n\n- `find / -name file` 从根目录开始搜索文件/目录\n- `find / -user user1`  搜索用户 user1 的文件/目录\n- `find /dir -name *.bin`  在目录/dir 中搜索带有 .bin 后缀的文件\n- `find / -name file1` 从 '/' 开始进入根文件系统搜索文件和目录（完整文件或文件名）\n- `find / -user user1` 搜索属于用户 'user1' 的文件和目录\n- `find /usr/bin -type f -atime +100` 搜索在过去100天内未被使用过的执行文件\n- `find /usr/bin -type f -mtime -10` 搜索在10天内被创建或者修改过的文件\n- `find . -regex '.*\\(net\\|comm\\).*'`  '-regex' 选项匹配整个路径名，出当前目录树中所有文件名中任意位置包含字符串 net 或 comm 的文件\n- `locate *.mp4`  寻找 .mp4结尾的文件\n- whereis <关键词> 显示某⼆进制⽂件/可执⾏⽂件的路径\n- `whereis halt` 显示一个二进制文件、源码或man的位置\n- which <关键词>   查找系统⽬录下某的⼆进制⽂件\n- `which halt` 显示一个二进制文件或可执行文件的完整路径\n\n### 四、文件的权限 - 使用 \"+\" 设置权限，使用 \"-\" 用于取消\n\n#### 9、chmod 命令\n\n- `ls -lh` 显示当前目录所有文件的权限\n- `chmod 777` 文件名  修改文件权限（最高权限）\n- `chmod ugo+rwx dir` 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r，4 ）、写(w，2)和执行(x，1)的权限\n- `chmod go-rwx dir1` 删除群组(g)与其他人(o)对目录的读写执行权限\n- chmod **u**+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限\n- chmod **u**-s /bin/file1 禁用一个二进制文件的 SUID位\n- `chmod g+s /home/public` 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的\n- `chmod g-s /home/public` 禁用一个目录的 SGID 位\n- chmod **o**+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件\n- chmod **o**-t /home/public 禁用一个目录的 STIKY 位\n- chmod +**x** 文件路径 为所有者、所属组和其他用户添加执行的权限\n- chmod -**x** 文件路径 为所有者、所属组和其他用户删除执行的权限\n- chmod **u**+**x** 文件路径 为所有者添加执行的权限\n- chmod g+**x** 文件路径 为所属组添加执行的权限\n- `chmod o+x` 文件路径 为其他用户添加执行的权限\n- `chmod ug+x` 文件路径 为所有者、所属组添加执行的权限\n- `chmod =wx` 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限\n- `chmod ug=wx` 文件路径 为所有者、所属组添加写、执行的权限，取消读权限\n\n#### 10、chown 命令\n\n（改变文件的所有者）\n\n- `chown user1 file1` 改变一个文件的所有人属性\n- `chown -R user1 dir1` 改变一个目录的所有人属性并同时改变改目录下所有文件的属性\n- `chown user1:group1 file1` 改变一个文件的所有人和群组属性\n\n#### 11、chgrp 命令\n\n（改变文件所属用户组）\n\n- `chgrp group1 file1` 改变文件的群组\n\n### 五、文本处理\n\n#### 12、grep 命令\n\n（分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等）\n\n- `grep Aug /var/log/messages` 在文件 '/var/log/messages'中查找关键词\"Aug\"\n- `grep ^Aug /var/log/messages` 在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇\n- `grep [0-9] /var/log/messages` 选择 '/var/log/messages' 文件中所有包含数字的行\n- `grep Aug -R /var/log/*` 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"\n- `sed 's/stringa1/stringa2/g' example.txt` 将example.txt文件中的 \"string1\" 替换成 \"string2\"\n- `sed '/^$/d' example.txt` 从example.txt文件中删除所有空白行\n\n#### 13、paste 命令\n\n- `paste file1 file2` 合并两个文件或两栏的内容（查看两文件合并后的内容）\n- `paste -d '+' file1 file2` 合并两个文件或两栏的内容，中间用\"+\"区分\n\n#### 14、sort 命令\n\n- `sort file1 file2` 排序两个文件的内容\n- `sort file1 file2 | uniq` 取出两个文件的并集(重复的行只保留一份)\n- `sort file1 file2 | uniq -u` 删除交集，留下其他的行\n- `sort file1 file2 | uniq -d` 取出两个文件的交集(只留下同时存在于两个文件中的文件)\n\n#### 15、comm 命令\n\n- `comm -1 file1 file2` 比较两个文件的内容只删除 'file1' 所包含的内容\n- `comm -2 file1 file2` 比较两个文件的内容只删除 'file2' 所包含的内容\n- `comm -3 file1 file2` 比较两个文件的内容只删除两个文件共有的部\n\n### 六、打包和压缩文件\n\n#### 16、tar 命令\n\n==对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压）推荐==（重新整理）\n\n- -c ：新建打包文件\n- -t ：查看打包文件的内容含有哪些文件名\n- -x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中\n- -j ：通过bzip2的支持进行压缩/解压缩\n- -z ：通过gzip的支持进行压缩/解压缩\n- -v ：在压缩/解压缩过程中，将正在处理的文件名显示出来\n- -f filename ：filename为要处理的文件\n- -C dir ：指定压缩/解压缩的目录dir\n- 压缩：`tar -jcv -f filename.tar.bz2` 要被处理的文件或目录名称\n- 查询：`tar -jtv -f filename.tar.bz2`\n- 解压：`tar -jxv -f filename.tar.bz2 -C` 欲解压缩的目录\n- `bunzip2 file1.bz2` 解压一个叫做 'file1.bz2'的文件\n- `bzip2 file1` 压缩一个叫做 'file1' 的文件\n- `gunzip file1.gz` 解压一个叫做 'file1.gz'的文件\n- `gzip file1` 压缩一个叫做 'file1'的文件\n- `gzip -9 file1` 最大程度压缩\n- `rar a file1.rar test_file` 创建一个叫做 'file1.rar' 的包\n- `rar a file1.rar file1 file2 dir1` 同时压缩 'file1', 'file2' 以及目录 'dir1'\n- `rar x file1.rar` 解压rar包\n- `zip file1.zip file1` 创建一个zip格式的压缩包\n- `unzip file1.zip` 解压一个zip格式压缩包\n- `zip -r file1.zip file1 file2 dir1` 将几个文件和目录同时压缩成一个zip格式的压缩包\n\n### 七、进程相关的命令\n\n#### 17、ps 命令\n\n用于将某个时间点的进程运行情况选取下来并输出，process之意\n\n- -A ：所有的进程均显示出来\n- -a ：不与terminal有关的所有进程\n- -u ：有效用户的相关进程\n- -x ：一般与a参数一起使用，可列出较完整的信息\n- -l ：较长，较详细地将PID的信息列出\n\n```bash\nps -ef # 显示所有进程的详细信息。\nps aux # 查看系统所有的进程数据\nps ax # 查看不与terminal有关的所有进程\nps -lA # 查看系统所有的进程数据\nps axjf # 查看连同一部分进程树状态\nnetstat -lntp # 查看各个节点及进程\n```\n\n#### 18、kill 命令\n\n- kill -9 pid  （-9表示强制关闭）\n- kill -9 程序的名字\n- kill - \n- pkill 程序的名字\n\n#### 19、Vim 下复制粘贴等操作\n\n- x,X : 在一行中，x为向后删除一个字符（相当于del键），X为向前删除一个字符（相当于backspace键）\n- dd : 删除光标所在的那一整行\n- ndd : n 为数字。从光标开始，删除向下n列\n- yy : 复制光标所在的那一行\n- nyy : n为数字。复制光标所在的向下n行\n- p,P : p 为将已复制的数据粘贴到光标的下一行，P则为贴在光标的上一行\n- u : 复原前一个操作\n- CTRL + r : 重做上一个操作\n- 小数点 '.'：重复前一个动作\n- :set number :在每一行设置行标号\n- :n1,n2 m n3 移动n1-n2行(包括n1,n2)到n3行之下\n- :n1,n2 co n3 复制n1-n2行(包括n1,n2)到n3行之下\n\n- :n1,n2 d 删除n1-n2行(包括n1,n2)行\n\n### 系统常用命令\n\n#### 关机、注销、重启\n\n```bash\n查看进程端口号：netstat -tunlp|grep 端口号 \nss -tnl  查看正在已使用的端口\nshutdown -h now 关闭系统(1) 即刻关机\nshutdown -h 10 10分钟后关机\nshutdown -h 11:00  11:00 关机\nshutdown -h +10 预定时间关机（10分钟后关机）\nshutdown -c  取消指定时间关机\nshutdown -f now 重启\nshutdown -r 10  10分钟后重启\nshutdown -r 11:00   定时重启\nreboot 重启\ninit 6 重启\ninit 0 即刻关机\ntelinit 0 关机\npoweroff   立刻关机\nhalt 关机\nsync  buff数据同步到磁盘\nlogout 退出登录Shell\ntime 测算一个命令（即程序）的执行时间\n```\n\n### 系统信息和性能查看\n\n```bash\n# 查看系统的详细信息\nlsb_release -a\n# 查看内核/OS/CPU信息\nuname -a \n# 查看内核版本\nuname -r\n# 查看处理器架构\nuname -m\n# 查看处理器架构\narch\n# 查看主机名称\nhostname\n# 显示当前登录系统的用户\nwho\n# 显示登陆时的用户名\nwho am i\n# 显示当前用户名\nwhoami\n# 查看 linux 版本信息\ncat /proc/version\n# 查看 CPU 信息\ncat /proc/cpuinfo\n# 查看中断\ncat /proc/interrupts\n# 查看系统负载\ncat /proc/loadavg\n# 查看系统运行时间、用户数、负载\nuptime\n# 查看系统的环境便令\nenv\n# 查看系统PCI设备信息\nlspci -tv\n# 查看已加载的系统模块\nlsmod\n# 查看内存总量\ngrep MemTotal /proc/meminfo\n# 查看空闲内存量\ngrep MemFree /proc/meminfo\n# 查看内存用量和交换区用量\nfree -m\n# 显示系统时间\ndate\n# 显示2021日历表\ncal 2021\n# 动态显示cpu/内存/进程情况\ntop\n# 每1秒采一次系统状态，采20次\nvmstat 1 20 \n# 查看io读写/cpu使用情况\niostat\n# 查看 cpu 使用情况（1秒1次，共10次）\nsar -u 1 10\n# 查询磁盘性能\nsar -d 1 10\n\n# 找出占用内存资源最多的前 10 个进程\nps -auxf | sort -nr -k 4 | head -10\n# 找出占用 CPU 资源最多的前 10 个进程\nps -auxf | sort -nr -k 3 | head -10\n```\n\n### 磁盘和分区\n\n```bash\n# 查看所属有磁盘分区\nfdisk -l\n# 查看所有交换分区\nswapon -s\n# 查看磁盘使用情况及挂载点\ndf -h\n# 查看磁盘使用情况及挂载点\ndf -hl\n# 查看指定某个目录大小\ndu -sh /dir\n# 从高到底依次显示文件和目录大小\ndu -sk * | sort -rn\n# 查看内存\nfree -h\n# 查看CPUs\ncat /proc/cpuinfo\n\n\n# 挂在hda2盘\nmount /dev/hda2 /mnt/hda2\n# 指定⽂件系统类型挂载（如ntfs）\nmount -t ntfs /dev/sdc1 /mnt/usbhd1\n# 挂载iso⽂件\nmount -o loop xxx.iso /mnt/cdrom\n# 挂载usb盘/闪存设备\nmount /dev/sda1 /mnt/usbdisk\n# 通过设备名卸载\numount -v /dev/sda1\n# 通过挂载点卸载\numount -v /mnt/mymnt\n# 强制卸载(慎⽤)\nfuser -km /mnt/hda1\n```\n\n### 用户和用户组\n\n```bash\n# 创建用户\nuseradd ss\n# 查看所用系统用户\ncut -d: -f1 /etc/passwd\n# 删除用户\nuserdel -r ss\n# 创建用户组\ngroupadd group_name\n# 查看系统所有组\ncut -d: -f1 /etc/group\n# 删除用户组\ngroupdel group_name\n# 修改用户的组\nusermod -g group_name user_name\n# 将用户添加到组\nusermod -aG group_name user_name\n# 修改用户 ss 的登录 Shell、主目录及用户组\nusermod -s /bin/ksh -d /home/codepig –g dev ss\n# 查看 ss 用户所在的组\ngroups ss\n# 切换到另一个用户环境\nsu user_name\n# 修改口令\npasswd\n# 修改用户密码\npasswd ss\n# 查看用户活动\nw\n# 查看指定用户 ss 的信息\nid ss\n# 查看用户登录日志\nlast\n# 查看当前用户的计划任务\ncrontab -l\n```\n\n### 网络和进程管理\n\n```bash\n# 查看网络接口属性\nifconfig\n# 查看某网卡的配置\nifconfig eth0\n# 查看路由表\nroute -n\n# 查看所有监听端⼝\nnetstat -lntp\n# 查看已经建立连接的TCP连接\nnetstat -antp\n# 查看TCP/UDP的状态信息\nnetstat -lutp\n# 启⽤eth0⽹络设备\nifup eth0\n# 禁⽤eth0⽹络设备\nifdown eth0\n# 查看iptables规则\niptables -L\n# 配置ip地址\nifconfig eth0 192.168.1.1 netmask 255.255.255.0\n# 以dhcp模式启⽤eth0\ndhclient eth0\n# 配置默认⽹关\nroute add -net 0/0 gw Gateway_IP\n# 配置静态路由到达⽹络'192.168.0.0/16'\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1\n# 删除静态路由\nroute del 0/0 gw Gateway_IP\n# 查看主机名\nhostname\n# 解析主机名\nhost 主机名  例如：host www.baidu.com\n# 查询DNS记录，查看域名解析是否正常\nnslookup 主机名  例如：nslookup wwww.baidu.com\n# 查看所有进程\nps -ef\n# 过滤出你需要的进程\nps -ef|grep redis\n# kill指定名称的进程\nkill -s name\n# kill指定pid的进程\nkill -s pid\n```","slug":"20230513Linux常用命令大总结","published":1,"updated":"2023-05-13T12:05:27.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhq7pcy90031w0uh9b8z1oxx","content":"<h3 id=\"一、文件和命令\"><a href=\"#一、文件和命令\" class=\"headerlink\" title=\"一、文件和命令\"></a>一、文件和命令</h3><h4 id=\"1、cd-命令\"><a href=\"#1、cd-命令\" class=\"headerlink\" title=\"1、cd 命令\"></a>1、cd 命令</h4><p>（它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径）</p>\n<ul>\n<li><p>cd &#x2F;home\t\t进入 ‘&#x2F; home’ 目录</p>\n</li>\n<li><p>cd ..                返回上一级目录</p>\n</li>\n<li><p>cd ..&#x2F;..             返回上两级目录</p>\n</li>\n<li><p>cd &#x2F;                 返回跟目录</p>\n</li>\n<li><p>cd -                 返回上次所在的目录</p>\n</li>\n<li><p><code>mkdir</code> &lt;目录名&gt;  创建目录</p>\n</li>\n<li><p><code>mkdir dir1 dir2</code>   同时创建两个目录</p>\n</li>\n<li><p><code>mkdir -p  /tmp/dir1/dir2</code>   递归创建目录树</p>\n</li>\n<li><p><code>rm -f file1</code>  删除’file1’⽂件</p>\n</li>\n<li><p><code>rmdir dir1</code>  删除’dir1’⽬录</p>\n</li>\n<li><p><code>rm -rf dir1</code>  删除’dir1’⽬录和其内容</p>\n</li>\n<li><p><code>rm -rf dir1 dir2</code>  同时删除两个⽬录及其内容</p>\n</li>\n</ul>\n<h4 id=\"2、pwd-命令\"><a href=\"#2、pwd-命令\" class=\"headerlink\" title=\"2、pwd 命令\"></a>2、pwd 命令</h4><p><code>pwd</code> 显示工作路径</p>\n<h4 id=\"3、ls-命令\"><a href=\"#3、ls-命令\" class=\"headerlink\" title=\"3、ls 命令\"></a>3、ls 命令</h4><ul>\n<li>ls 查看目录中的文件</li>\n<li>ls -l 显示文件和目录的详细资料</li>\n<li>ls -a 列出全部文件，包含隐藏文件</li>\n<li>ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</li>\n<li>ls -lSr  查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</li>\n<li>tree  查看⽂件和⽬录的树形结构 （如果没有需要先安装 yum install tree）</li>\n<li>ls -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</li>\n<li>ls -al &#x2F;proc&#x2F;pid&#x2F;exe   通过pid查询程序正在运行的路径</li>\n</ul>\n<h4 id=\"4、cp-命令\"><a href=\"#4、cp-命令\" class=\"headerlink\" title=\"4、cp 命令\"></a>4、cp 命令</h4><p>（用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下）</p>\n<ul>\n<li>-a   将文件的特性一起复制</li>\n<li>-p   连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</li>\n<li>-i   若目标文件已经存在时，在覆盖时会先询问操作的进行</li>\n<li>-r   递归持续复制，用于目录的复制行为</li>\n<li>-u   目标文件与源文件有差异时才会复制</li>\n<li><code>cp dir/* .</code>  复制某目录下的所有文件至当前目录</li>\n<li><code>cp -a dir1 dir2</code> 复制目录</li>\n<li><code>cp -a /temp/dir1 .</code>   复制一个目录至当前目录</li>\n<li><code>ln -s file1 link1</code>  创建指向⽂件&#x2F;⽬录的软链接</li>\n<li><code>ln file1 lnk1</code>  创建指向⽂件&#x2F;⽬录的物理链接</li>\n<li><code>touch -t 0712250000 file1</code> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</li>\n</ul>\n<h4 id=\"5、mv-命令\"><a href=\"#5、mv-命令\" class=\"headerlink\" title=\"5、mv 命令\"></a>5、mv 命令</h4><ul>\n<li>-f   force强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li>\n<li>-i   若目标文件已经存在，就会询问是否覆盖</li>\n<li>-u   若目标文件已经存在，且比目标文件新，才会更新</li>\n<li><code>mv old_dir new_dir</code>  重命名&#x2F;移动⽬录</li>\n</ul>\n<h4 id=\"6、rm-命令\"><a href=\"#6、rm-命令\" class=\"headerlink\" title=\"6、rm 命令\"></a>6、rm 命令</h4><ul>\n<li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息</li>\n<li>-i ：互动模式，在删除前会询问用户是否操作</li>\n<li>-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</li>\n</ul>\n<h3 id=\"二、查看文件内容\"><a href=\"#二、查看文件内容\" class=\"headerlink\" title=\"二、查看文件内容\"></a>二、查看文件内容</h3><h4 id=\"7、cat-命令\"><a href=\"#7、cat-命令\" class=\"headerlink\" title=\"7、cat 命令\"></a>7、cat 命令</h4><p>（用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用）</p>\n<ul>\n<li><code>cat file1</code> 从第一个字节开始正向查看文件的内容</li>\n<li><code>cat -n file1</code> 标示文件的行数</li>\n<li><code>cat xxx.txt</code>   awk ‘NR%2&#x3D;&#x3D;1’</li>\n<li><code>tac file1</code> 从最后一行开始反向查看一个文件的内容</li>\n<li><code>more file1</code> 查看一个长文件的内容</li>\n<li><code>less file1</code>  类似 more 命令，但允许方向操作</li>\n<li><code>head -n 2 file1</code> 查看一个文件的前两行</li>\n<li><code>tail -f /log/msg</code>  实时查看添加到⽂件中的内容</li>\n<li><code>tail -n 2 file1</code> 查看一个文件的最后两行</li>\n<li><code>tail -n +1000 file1</code> 从1000行开始显示，显示1000行以后的</li>\n<li><code>cat filename | head -n 3000 | tail -n +1000</code> 显示1000行到3000行</li>\n<li><code>cat filename | tail -n +3000 | head -n 1000</code> 从第3000行开始，显示1000(即显示3000~3999行)</li>\n<li><code>grep ss hello.txt</code>  在⽂件hello.txt中查找关键词 ss </li>\n<li><code>grep ^s hello.txt </code>  在⽂件hello.txt中查找以 s 开头的内容</li>\n<li><code>grep [0-9] hello.txt</code>  选择hello.txt⽂件中所有包含数字的⾏</li>\n<li><code>sed &#39;s/ss/mm/g&#39; hello.txt</code>  将hello.txt⽂件中的 ss 替换成 mm</li>\n<li><code>sed &#39;/^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有空⽩⾏</li>\n<li><code>sed &#39;/ *#/d; /^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有注释和空⽩⾏</li>\n<li><code>sed -e &#39;1d&#39; hello.txt</code>   从⽂件hello.txt 中排除第⼀⾏</li>\n<li><code>sed -n &#39;/s1/p&#39; hello.txt </code>  查看只包含关键词”s1”的⾏</li>\n<li><code>sed -e &#39;s/ *$//&#39; hello.txt</code>  删除每⼀⾏最后的空⽩字符</li>\n<li><code>sed -e &#39;s/s1//g&#39; hello.txt</code>  从⽂档中只删除词汇s1并保留剩余全部</li>\n<li><code>sed -n &#39;1,5p;5q&#39; hello.txt</code>  查看从第⼀⾏到第5⾏内容</li>\n<li><code>sed -n &#39;5p;5q&#39; hello.txt</code>  查看第5⾏</li>\n<li><code>paste file1 file2</code>  合并两个⽂件或两栏的内容</li>\n<li><code>paste -d &#39;+&#39; file1 file2 </code>  合并两个⽂件或两栏的内容，中间⽤”+”区分</li>\n<li><code>sort file1 file2</code>  排序两个⽂件的内容</li>\n<li><code>sort file1 file2</code>   uniq</li>\n<li><code>sort file1 file2</code>   uniq -u</li>\n<li><code>sort file1 file2</code>   uniq -d</li>\n<li><code>comm -1 file1 file2 </code>  ⽐较两个⽂件的内容(去除’file1’所含内容)</li>\n<li><code>comm -2 file1 file2</code>  ⽐较两个⽂件的内容(去除’file2’所含内容)</li>\n<li><code>comm -3 file1 file2</code>  ⽐较两个⽂件的内容(去除两⽂件共有部分)</li>\n</ul>\n<h3 id=\"三、文件搜索\"><a href=\"#三、文件搜索\" class=\"headerlink\" title=\"三、文件搜索\"></a>三、文件搜索</h3><h4 id=\"8、find-命令\"><a href=\"#8、find-命令\" class=\"headerlink\" title=\"8、find 命令\"></a>8、find 命令</h4><ul>\n<li><code>find / -name file</code> 从根目录开始搜索文件&#x2F;目录</li>\n<li><code>find / -user user1</code>  搜索用户 user1 的文件&#x2F;目录</li>\n<li><code>find /dir -name *.bin</code>  在目录&#x2F;dir 中搜索带有 .bin 后缀的文件</li>\n<li><code>find / -name file1</code> 从 ‘&#x2F;‘ 开始进入根文件系统搜索文件和目录（完整文件或文件名）</li>\n<li><code>find / -user user1</code> 搜索属于用户 ‘user1’ 的文件和目录</li>\n<li><code>find /usr/bin -type f -atime +100</code> 搜索在过去100天内未被使用过的执行文件</li>\n<li><code>find /usr/bin -type f -mtime -10</code> 搜索在10天内被创建或者修改过的文件</li>\n<li><code>find . -regex &#39;.*\\(net\\|comm\\).*&#39;</code>  ‘-regex’ 选项匹配整个路径名，出当前目录树中所有文件名中任意位置包含字符串 net 或 comm 的文件</li>\n<li><code>locate *.mp4</code>  寻找 .mp4结尾的文件</li>\n<li>whereis &lt;关键词&gt; 显示某⼆进制⽂件&#x2F;可执⾏⽂件的路径</li>\n<li><code>whereis halt</code> 显示一个二进制文件、源码或man的位置</li>\n<li>which &lt;关键词&gt;   查找系统⽬录下某的⼆进制⽂件</li>\n<li><code>which halt</code> 显示一个二进制文件或可执行文件的完整路径</li>\n</ul>\n<h3 id=\"四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><h4 id=\"9、chmod-命令\"><a href=\"#9、chmod-命令\" class=\"headerlink\" title=\"9、chmod 命令\"></a>9、chmod 命令</h4><ul>\n<li><code>ls -lh</code> 显示当前目录所有文件的权限</li>\n<li><code>chmod 777</code> 文件名  修改文件权限（最高权限）</li>\n<li><code>chmod ugo+rwx dir</code> 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r，4 ）、写(w，2)和执行(x，1)的权限</li>\n<li><code>chmod go-rwx dir1</code> 删除群组(g)与其他人(o)对目录的读写执行权限</li>\n<li>chmod <strong>u</strong>+s &#x2F;bin&#x2F;file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</li>\n<li>chmod <strong>u</strong>-s &#x2F;bin&#x2F;file1 禁用一个二进制文件的 SUID位</li>\n<li><code>chmod g+s /home/public</code> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</li>\n<li><code>chmod g-s /home/public</code> 禁用一个目录的 SGID 位</li>\n<li>chmod <strong>o</strong>+t &#x2F;home&#x2F;public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</li>\n<li>chmod <strong>o</strong>-t &#x2F;home&#x2F;public 禁用一个目录的 STIKY 位</li>\n<li>chmod +<strong>x</strong> 文件路径 为所有者、所属组和其他用户添加执行的权限</li>\n<li>chmod -<strong>x</strong> 文件路径 为所有者、所属组和其他用户删除执行的权限</li>\n<li>chmod <strong>u</strong>+<strong>x</strong> 文件路径 为所有者添加执行的权限</li>\n<li>chmod g+<strong>x</strong> 文件路径 为所属组添加执行的权限</li>\n<li><code>chmod o+x</code> 文件路径 为其他用户添加执行的权限</li>\n<li><code>chmod ug+x</code> 文件路径 为所有者、所属组添加执行的权限</li>\n<li><code>chmod =wx</code> 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</li>\n<li><code>chmod ug=wx</code> 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</li>\n</ul>\n<h4 id=\"10、chown-命令\"><a href=\"#10、chown-命令\" class=\"headerlink\" title=\"10、chown 命令\"></a>10、chown 命令</h4><p>（改变文件的所有者）</p>\n<ul>\n<li><code>chown user1 file1</code> 改变一个文件的所有人属性</li>\n<li><code>chown -R user1 dir1</code> 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</li>\n<li><code>chown user1:group1 file1</code> 改变一个文件的所有人和群组属性</li>\n</ul>\n<h4 id=\"11、chgrp-命令\"><a href=\"#11、chgrp-命令\" class=\"headerlink\" title=\"11、chgrp 命令\"></a>11、chgrp 命令</h4><p>（改变文件所属用户组）</p>\n<ul>\n<li><code>chgrp group1 file1</code> 改变文件的群组</li>\n</ul>\n<h3 id=\"五、文本处理\"><a href=\"#五、文本处理\" class=\"headerlink\" title=\"五、文本处理\"></a>五、文本处理</h3><h4 id=\"12、grep-命令\"><a href=\"#12、grep-命令\" class=\"headerlink\" title=\"12、grep 命令\"></a>12、grep 命令</h4><p>（分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等）</p>\n<ul>\n<li><code>grep Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找关键词”Aug”</li>\n<li><code>grep ^Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找以”Aug”开始的词汇</li>\n<li><code>grep [0-9] /var/log/messages</code> 选择 ‘&#x2F;var&#x2F;log&#x2F;messages’ 文件中所有包含数字的行</li>\n<li><code>grep Aug -R /var/log/*</code> 在目录 ‘&#x2F;var&#x2F;log’ 及随后的目录中搜索字符串”Aug”</li>\n<li><code>sed &#39;s/stringa1/stringa2/g&#39; example.txt</code> 将example.txt文件中的 “string1” 替换成 “string2”</li>\n<li><code>sed &#39;/^$/d&#39; example.txt</code> 从example.txt文件中删除所有空白行</li>\n</ul>\n<h4 id=\"13、paste-命令\"><a href=\"#13、paste-命令\" class=\"headerlink\" title=\"13、paste 命令\"></a>13、paste 命令</h4><ul>\n<li><code>paste file1 file2</code> 合并两个文件或两栏的内容（查看两文件合并后的内容）</li>\n<li><code>paste -d &#39;+&#39; file1 file2</code> 合并两个文件或两栏的内容，中间用”+”区分</li>\n</ul>\n<h4 id=\"14、sort-命令\"><a href=\"#14、sort-命令\" class=\"headerlink\" title=\"14、sort 命令\"></a>14、sort 命令</h4><ul>\n<li><code>sort file1 file2</code> 排序两个文件的内容</li>\n<li><code>sort file1 file2 | uniq</code> 取出两个文件的并集(重复的行只保留一份)</li>\n<li><code>sort file1 file2 | uniq -u</code> 删除交集，留下其他的行</li>\n<li><code>sort file1 file2 | uniq -d</code> 取出两个文件的交集(只留下同时存在于两个文件中的文件)</li>\n</ul>\n<h4 id=\"15、comm-命令\"><a href=\"#15、comm-命令\" class=\"headerlink\" title=\"15、comm 命令\"></a>15、comm 命令</h4><ul>\n<li><code>comm -1 file1 file2</code> 比较两个文件的内容只删除 ‘file1’ 所包含的内容</li>\n<li><code>comm -2 file1 file2</code> 比较两个文件的内容只删除 ‘file2’ 所包含的内容</li>\n<li><code>comm -3 file1 file2</code> 比较两个文件的内容只删除两个文件共有的部</li>\n</ul>\n<h3 id=\"六、打包和压缩文件\"><a href=\"#六、打包和压缩文件\" class=\"headerlink\" title=\"六、打包和压缩文件\"></a>六、打包和压缩文件</h3><h4 id=\"16、tar-命令\"><a href=\"#16、tar-命令\" class=\"headerlink\" title=\"16、tar 命令\"></a>16、tar 命令</h4><p>&#x3D;&#x3D;对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压）推荐&#x3D;&#x3D;（重新整理）</p>\n<ul>\n<li>-c ：新建打包文件</li>\n<li>-t ：查看打包文件的内容含有哪些文件名</li>\n<li>-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中</li>\n<li>-j ：通过bzip2的支持进行压缩&#x2F;解压缩</li>\n<li>-z ：通过gzip的支持进行压缩&#x2F;解压缩</li>\n<li>-v ：在压缩&#x2F;解压缩过程中，将正在处理的文件名显示出来</li>\n<li>-f filename ：filename为要处理的文件</li>\n<li>-C dir ：指定压缩&#x2F;解压缩的目录dir</li>\n<li>压缩：<code>tar -jcv -f filename.tar.bz2</code> 要被处理的文件或目录名称</li>\n<li>查询：<code>tar -jtv -f filename.tar.bz2</code></li>\n<li>解压：<code>tar -jxv -f filename.tar.bz2 -C</code> 欲解压缩的目录</li>\n<li><code>bunzip2 file1.bz2</code> 解压一个叫做 ‘file1.bz2’的文件</li>\n<li><code>bzip2 file1</code> 压缩一个叫做 ‘file1’ 的文件</li>\n<li><code>gunzip file1.gz</code> 解压一个叫做 ‘file1.gz’的文件</li>\n<li><code>gzip file1</code> 压缩一个叫做 ‘file1’的文件</li>\n<li><code>gzip -9 file1</code> 最大程度压缩</li>\n<li><code>rar a file1.rar test_file</code> 创建一个叫做 ‘file1.rar’ 的包</li>\n<li><code>rar a file1.rar file1 file2 dir1</code> 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</li>\n<li><code>rar x file1.rar</code> 解压rar包</li>\n<li><code>zip file1.zip file1</code> 创建一个zip格式的压缩包</li>\n<li><code>unzip file1.zip</code> 解压一个zip格式压缩包</li>\n<li><code>zip -r file1.zip file1 file2 dir1</code> 将几个文件和目录同时压缩成一个zip格式的压缩包</li>\n</ul>\n<h3 id=\"七、进程相关的命令\"><a href=\"#七、进程相关的命令\" class=\"headerlink\" title=\"七、进程相关的命令\"></a>七、进程相关的命令</h3><h4 id=\"17、ps-命令\"><a href=\"#17、ps-命令\" class=\"headerlink\" title=\"17、ps 命令\"></a>17、ps 命令</h4><p>用于将某个时间点的进程运行情况选取下来并输出，process之意</p>\n<ul>\n<li>-A ：所有的进程均显示出来</li>\n<li>-a ：不与terminal有关的所有进程</li>\n<li>-u ：有效用户的相关进程</li>\n<li>-x ：一般与a参数一起使用，可列出较完整的信息</li>\n<li>-l ：较长，较详细地将PID的信息列出</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef <span class=\"comment\"># 显示所有进程的详细信息。</span></span><br><span class=\"line\">ps aux <span class=\"comment\"># 查看系统所有的进程数据</span></span><br><span class=\"line\">ps ax <span class=\"comment\"># 查看不与terminal有关的所有进程</span></span><br><span class=\"line\">ps -lA <span class=\"comment\"># 查看系统所有的进程数据</span></span><br><span class=\"line\">ps axjf <span class=\"comment\"># 查看连同一部分进程树状态</span></span><br><span class=\"line\">netstat -lntp <span class=\"comment\"># 查看各个节点及进程</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18、kill-命令\"><a href=\"#18、kill-命令\" class=\"headerlink\" title=\"18、kill 命令\"></a>18、kill 命令</h4><ul>\n<li>kill -9 pid  （-9表示强制关闭）</li>\n<li>kill -9 程序的名字</li>\n<li>kill - </li>\n<li>pkill 程序的名字</li>\n</ul>\n<h4 id=\"19、Vim-下复制粘贴等操作\"><a href=\"#19、Vim-下复制粘贴等操作\" class=\"headerlink\" title=\"19、Vim 下复制粘贴等操作\"></a>19、Vim 下复制粘贴等操作</h4><ul>\n<li><p>x,X : 在一行中，x为向后删除一个字符（相当于del键），X为向前删除一个字符（相当于backspace键）</p>\n</li>\n<li><p>dd : 删除光标所在的那一整行</p>\n</li>\n<li><p>ndd : n 为数字。从光标开始，删除向下n列</p>\n</li>\n<li><p>yy : 复制光标所在的那一行</p>\n</li>\n<li><p>nyy : n为数字。复制光标所在的向下n行</p>\n</li>\n<li><p>p,P : p 为将已复制的数据粘贴到光标的下一行，P则为贴在光标的上一行</p>\n</li>\n<li><p>u : 复原前一个操作</p>\n</li>\n<li><p>CTRL + r : 重做上一个操作</p>\n</li>\n<li><p>小数点 ‘.’：重复前一个动作</p>\n</li>\n<li><p>:set number :在每一行设置行标号</p>\n</li>\n<li><p>:n1,n2 m n3 移动n1-n2行(包括n1,n2)到n3行之下</p>\n</li>\n<li><p>:n1,n2 co n3 复制n1-n2行(包括n1,n2)到n3行之下</p>\n</li>\n<li><p>:n1,n2 d 删除n1-n2行(包括n1,n2)行</p>\n</li>\n</ul>\n<h3 id=\"系统常用命令\"><a href=\"#系统常用命令\" class=\"headerlink\" title=\"系统常用命令\"></a>系统常用命令</h3><h4 id=\"关机、注销、重启\"><a href=\"#关机、注销、重启\" class=\"headerlink\" title=\"关机、注销、重启\"></a>关机、注销、重启</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看进程端口号：netstat -tunlp|grep 端口号 </span><br><span class=\"line\">ss -tnl  查看正在已使用的端口</span><br><span class=\"line\">shutdown -h now 关闭系统(1) 即刻关机</span><br><span class=\"line\">shutdown -h 10 10分钟后关机</span><br><span class=\"line\">shutdown -h 11:00  11:00 关机</span><br><span class=\"line\">shutdown -h +10 预定时间关机（10分钟后关机）</span><br><span class=\"line\">shutdown -c  取消指定时间关机</span><br><span class=\"line\">shutdown -f now 重启</span><br><span class=\"line\">shutdown -r 10  10分钟后重启</span><br><span class=\"line\">shutdown -r 11:00   定时重启</span><br><span class=\"line\">reboot 重启</span><br><span class=\"line\">init 6 重启</span><br><span class=\"line\">init 0 即刻关机</span><br><span class=\"line\">telinit 0 关机</span><br><span class=\"line\">poweroff   立刻关机</span><br><span class=\"line\">halt 关机</span><br><span class=\"line\"><span class=\"built_in\">sync</span>  buff数据同步到磁盘</span><br><span class=\"line\"><span class=\"built_in\">logout</span> 退出登录Shell</span><br><span class=\"line\">time 测算一个命令（即程序）的执行时间</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统信息和性能查看\"><a href=\"#系统信息和性能查看\" class=\"headerlink\" title=\"系统信息和性能查看\"></a>系统信息和性能查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统的详细信息</span></span><br><span class=\"line\">lsb_release -a</span><br><span class=\"line\"><span class=\"comment\"># 查看内核/OS/CPU信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a </span><br><span class=\"line\"><span class=\"comment\"># 查看内核版本</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br><span class=\"line\"><span class=\"comment\"># 查看处理器架构</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -m</span><br><span class=\"line\"><span class=\"comment\"># 查看处理器架构</span></span><br><span class=\"line\"><span class=\"built_in\">arch</span></span><br><span class=\"line\"><span class=\"comment\"># 查看主机名称</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"comment\"># 显示当前登录系统的用户</span></span><br><span class=\"line\"><span class=\"built_in\">who</span></span><br><span class=\"line\"><span class=\"comment\"># 显示登陆时的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> am i</span><br><span class=\"line\"><span class=\"comment\"># 显示当前用户名</span></span><br><span class=\"line\"><span class=\"built_in\">whoami</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 linux 版本信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/version</span><br><span class=\"line\"><span class=\"comment\"># 查看 CPU 信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"><span class=\"comment\"># 查看中断</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/interrupts</span><br><span class=\"line\"><span class=\"comment\"># 查看系统负载</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/loadavg</span><br><span class=\"line\"><span class=\"comment\"># 查看系统运行时间、用户数、负载</span></span><br><span class=\"line\"><span class=\"built_in\">uptime</span></span><br><span class=\"line\"><span class=\"comment\"># 查看系统的环境便令</span></span><br><span class=\"line\"><span class=\"built_in\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 查看系统PCI设备信息</span></span><br><span class=\"line\">lspci -tv</span><br><span class=\"line\"><span class=\"comment\"># 查看已加载的系统模块</span></span><br><span class=\"line\">lsmod</span><br><span class=\"line\"><span class=\"comment\"># 查看内存总量</span></span><br><span class=\"line\">grep MemTotal /proc/meminfo</span><br><span class=\"line\"><span class=\"comment\"># 查看空闲内存量</span></span><br><span class=\"line\">grep MemFree /proc/meminfo</span><br><span class=\"line\"><span class=\"comment\"># 查看内存用量和交换区用量</span></span><br><span class=\"line\">free -m</span><br><span class=\"line\"><span class=\"comment\"># 显示系统时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"comment\"># 显示2021日历表</span></span><br><span class=\"line\">cal 2021</span><br><span class=\"line\"><span class=\"comment\"># 动态显示cpu/内存/进程情况</span></span><br><span class=\"line\">top</span><br><span class=\"line\"><span class=\"comment\"># 每1秒采一次系统状态，采20次</span></span><br><span class=\"line\">vmstat 1 20 </span><br><span class=\"line\"><span class=\"comment\"># 查看io读写/cpu使用情况</span></span><br><span class=\"line\">iostat</span><br><span class=\"line\"><span class=\"comment\"># 查看 cpu 使用情况（1秒1次，共10次）</span></span><br><span class=\"line\">sar -u 1 10</span><br><span class=\"line\"><span class=\"comment\"># 查询磁盘性能</span></span><br><span class=\"line\">sar -d 1 10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出占用内存资源最多的前 10 个进程</span></span><br><span class=\"line\">ps -auxf | <span class=\"built_in\">sort</span> -nr -k 4 | <span class=\"built_in\">head</span> -10</span><br><span class=\"line\"><span class=\"comment\"># 找出占用 CPU 资源最多的前 10 个进程</span></span><br><span class=\"line\">ps -auxf | <span class=\"built_in\">sort</span> -nr -k 3 | <span class=\"built_in\">head</span> -10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所属有磁盘分区</span></span><br><span class=\"line\">fdisk -l</span><br><span class=\"line\"><span class=\"comment\"># 查看所有交换分区</span></span><br><span class=\"line\">swapon -s</span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘使用情况及挂载点</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘使用情况及挂载点</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -hl</span><br><span class=\"line\"><span class=\"comment\"># 查看指定某个目录大小</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -sh /dir</span><br><span class=\"line\"><span class=\"comment\"># 从高到底依次显示文件和目录大小</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -sk * | <span class=\"built_in\">sort</span> -rn</span><br><span class=\"line\"><span class=\"comment\"># 查看内存</span></span><br><span class=\"line\">free -h</span><br><span class=\"line\"><span class=\"comment\"># 查看CPUs</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂在hda2盘</span></span><br><span class=\"line\">mount /dev/hda2 /mnt/hda2</span><br><span class=\"line\"><span class=\"comment\"># 指定⽂件系统类型挂载（如ntfs）</span></span><br><span class=\"line\">mount -t ntfs /dev/sdc1 /mnt/usbhd1</span><br><span class=\"line\"><span class=\"comment\"># 挂载iso⽂件</span></span><br><span class=\"line\">mount -o loop xxx.iso /mnt/cdrom</span><br><span class=\"line\"><span class=\"comment\"># 挂载usb盘/闪存设备</span></span><br><span class=\"line\">mount /dev/sda1 /mnt/usbdisk</span><br><span class=\"line\"><span class=\"comment\"># 通过设备名卸载</span></span><br><span class=\"line\">umount -v /dev/sda1</span><br><span class=\"line\"><span class=\"comment\"># 通过挂载点卸载</span></span><br><span class=\"line\">umount -v /mnt/mymnt</span><br><span class=\"line\"><span class=\"comment\"># 强制卸载(慎⽤)</span></span><br><span class=\"line\">fuser -km /mnt/hda1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户和用户组\"><a href=\"#用户和用户组\" class=\"headerlink\" title=\"用户和用户组\"></a>用户和用户组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd ss</span><br><span class=\"line\"><span class=\"comment\"># 查看所用系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d: -f1 /etc/passwd</span><br><span class=\"line\"><span class=\"comment\"># 删除用户</span></span><br><span class=\"line\">userdel -r ss</span><br><span class=\"line\"><span class=\"comment\"># 创建用户组</span></span><br><span class=\"line\">groupadd group_name</span><br><span class=\"line\"><span class=\"comment\"># 查看系统所有组</span></span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d: -f1 /etc/group</span><br><span class=\"line\"><span class=\"comment\"># 删除用户组</span></span><br><span class=\"line\">groupdel group_name</span><br><span class=\"line\"><span class=\"comment\"># 修改用户的组</span></span><br><span class=\"line\">usermod -g group_name user_name</span><br><span class=\"line\"><span class=\"comment\"># 将用户添加到组</span></span><br><span class=\"line\">usermod -aG group_name user_name</span><br><span class=\"line\"><span class=\"comment\"># 修改用户 ss 的登录 Shell、主目录及用户组</span></span><br><span class=\"line\">usermod -s /bin/ksh -d /home/codepig –g dev ss</span><br><span class=\"line\"><span class=\"comment\"># 查看 ss 用户所在的组</span></span><br><span class=\"line\"><span class=\"built_in\">groups</span> ss</span><br><span class=\"line\"><span class=\"comment\"># 切换到另一个用户环境</span></span><br><span class=\"line\">su user_name</span><br><span class=\"line\"><span class=\"comment\"># 修改口令</span></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"comment\"># 修改用户密码</span></span><br><span class=\"line\">passwd ss</span><br><span class=\"line\"><span class=\"comment\"># 查看用户活动</span></span><br><span class=\"line\">w</span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户 ss 的信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> ss</span><br><span class=\"line\"><span class=\"comment\"># 查看用户登录日志</span></span><br><span class=\"line\">last</span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户的计划任务</span></span><br><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络和进程管理\"><a href=\"#网络和进程管理\" class=\"headerlink\" title=\"网络和进程管理\"></a>网络和进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看网络接口属性</span></span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"><span class=\"comment\"># 查看某网卡的配置</span></span><br><span class=\"line\">ifconfig eth0</span><br><span class=\"line\"><span class=\"comment\"># 查看路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\"># 查看所有监听端⼝</span></span><br><span class=\"line\">netstat -lntp</span><br><span class=\"line\"><span class=\"comment\"># 查看已经建立连接的TCP连接</span></span><br><span class=\"line\">netstat -antp</span><br><span class=\"line\"><span class=\"comment\"># 查看TCP/UDP的状态信息</span></span><br><span class=\"line\">netstat -lutp</span><br><span class=\"line\"><span class=\"comment\"># 启⽤eth0⽹络设备</span></span><br><span class=\"line\">ifup eth0</span><br><span class=\"line\"><span class=\"comment\"># 禁⽤eth0⽹络设备</span></span><br><span class=\"line\">ifdown eth0</span><br><span class=\"line\"><span class=\"comment\"># 查看iptables规则</span></span><br><span class=\"line\">iptables -L</span><br><span class=\"line\"><span class=\"comment\"># 配置ip地址</span></span><br><span class=\"line\">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</span><br><span class=\"line\"><span class=\"comment\"># 以dhcp模式启⽤eth0</span></span><br><span class=\"line\">dhclient eth0</span><br><span class=\"line\"><span class=\"comment\"># 配置默认⽹关</span></span><br><span class=\"line\">route add -net 0/0 gw Gateway_IP</span><br><span class=\"line\"><span class=\"comment\"># 配置静态路由到达⽹络&#x27;192.168.0.0/16&#x27;</span></span><br><span class=\"line\">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</span><br><span class=\"line\"><span class=\"comment\"># 删除静态路由</span></span><br><span class=\"line\">route del 0/0 gw Gateway_IP</span><br><span class=\"line\"><span class=\"comment\"># 查看主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"comment\"># 解析主机名</span></span><br><span class=\"line\">host 主机名  例如：host www.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 查询DNS记录，查看域名解析是否正常</span></span><br><span class=\"line\">nslookup 主机名  例如：nslookup wwww.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 查看所有进程</span></span><br><span class=\"line\">ps -ef</span><br><span class=\"line\"><span class=\"comment\"># 过滤出你需要的进程</span></span><br><span class=\"line\">ps -ef|grep redis</span><br><span class=\"line\"><span class=\"comment\"># kill指定名称的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s name</span><br><span class=\"line\"><span class=\"comment\"># kill指定pid的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s pid</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情连接","class_desc":"那些人，那些事","link_list":[{"name":"师小师博客","link":"https://shijinying.top/","avatar":"/img/head.jpg","descr":"愿你尝遍烟火，依然相信，人间值得"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"一、文件和命令\"><a href=\"#一、文件和命令\" class=\"headerlink\" title=\"一、文件和命令\"></a>一、文件和命令</h3><h4 id=\"1、cd-命令\"><a href=\"#1、cd-命令\" class=\"headerlink\" title=\"1、cd 命令\"></a>1、cd 命令</h4><p>（它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径）</p>\n<ul>\n<li><p>cd &#x2F;home\t\t进入 ‘&#x2F; home’ 目录</p>\n</li>\n<li><p>cd ..                返回上一级目录</p>\n</li>\n<li><p>cd ..&#x2F;..             返回上两级目录</p>\n</li>\n<li><p>cd &#x2F;                 返回跟目录</p>\n</li>\n<li><p>cd -                 返回上次所在的目录</p>\n</li>\n<li><p><code>mkdir</code> &lt;目录名&gt;  创建目录</p>\n</li>\n<li><p><code>mkdir dir1 dir2</code>   同时创建两个目录</p>\n</li>\n<li><p><code>mkdir -p  /tmp/dir1/dir2</code>   递归创建目录树</p>\n</li>\n<li><p><code>rm -f file1</code>  删除’file1’⽂件</p>\n</li>\n<li><p><code>rmdir dir1</code>  删除’dir1’⽬录</p>\n</li>\n<li><p><code>rm -rf dir1</code>  删除’dir1’⽬录和其内容</p>\n</li>\n<li><p><code>rm -rf dir1 dir2</code>  同时删除两个⽬录及其内容</p>\n</li>\n</ul>\n<h4 id=\"2、pwd-命令\"><a href=\"#2、pwd-命令\" class=\"headerlink\" title=\"2、pwd 命令\"></a>2、pwd 命令</h4><p><code>pwd</code> 显示工作路径</p>\n<h4 id=\"3、ls-命令\"><a href=\"#3、ls-命令\" class=\"headerlink\" title=\"3、ls 命令\"></a>3、ls 命令</h4><ul>\n<li>ls 查看目录中的文件</li>\n<li>ls -l 显示文件和目录的详细资料</li>\n<li>ls -a 列出全部文件，包含隐藏文件</li>\n<li>ls -lh 查看⽂件和⽬录的详情列表（增强⽂件⼤⼩易读性）</li>\n<li>ls -lSr  查看⽂件和⽬录列表（以⽂件⼤⼩升序查看）</li>\n<li>tree  查看⽂件和⽬录的树形结构 （如果没有需要先安装 yum install tree）</li>\n<li>ls -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</li>\n<li>ls -al &#x2F;proc&#x2F;pid&#x2F;exe   通过pid查询程序正在运行的路径</li>\n</ul>\n<h4 id=\"4、cp-命令\"><a href=\"#4、cp-命令\" class=\"headerlink\" title=\"4、cp 命令\"></a>4、cp 命令</h4><p>（用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下）</p>\n<ul>\n<li>-a   将文件的特性一起复制</li>\n<li>-p   连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份</li>\n<li>-i   若目标文件已经存在时，在覆盖时会先询问操作的进行</li>\n<li>-r   递归持续复制，用于目录的复制行为</li>\n<li>-u   目标文件与源文件有差异时才会复制</li>\n<li><code>cp dir/* .</code>  复制某目录下的所有文件至当前目录</li>\n<li><code>cp -a dir1 dir2</code> 复制目录</li>\n<li><code>cp -a /temp/dir1 .</code>   复制一个目录至当前目录</li>\n<li><code>ln -s file1 link1</code>  创建指向⽂件&#x2F;⽬录的软链接</li>\n<li><code>ln file1 lnk1</code>  创建指向⽂件&#x2F;⽬录的物理链接</li>\n<li><code>touch -t 0712250000 file1</code> 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</li>\n</ul>\n<h4 id=\"5、mv-命令\"><a href=\"#5、mv-命令\" class=\"headerlink\" title=\"5、mv 命令\"></a>5、mv 命令</h4><ul>\n<li>-f   force强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li>\n<li>-i   若目标文件已经存在，就会询问是否覆盖</li>\n<li>-u   若目标文件已经存在，且比目标文件新，才会更新</li>\n<li><code>mv old_dir new_dir</code>  重命名&#x2F;移动⽬录</li>\n</ul>\n<h4 id=\"6、rm-命令\"><a href=\"#6、rm-命令\" class=\"headerlink\" title=\"6、rm 命令\"></a>6、rm 命令</h4><ul>\n<li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息</li>\n<li>-i ：互动模式，在删除前会询问用户是否操作</li>\n<li>-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</li>\n</ul>\n<h3 id=\"二、查看文件内容\"><a href=\"#二、查看文件内容\" class=\"headerlink\" title=\"二、查看文件内容\"></a>二、查看文件内容</h3><h4 id=\"7、cat-命令\"><a href=\"#7、cat-命令\" class=\"headerlink\" title=\"7、cat 命令\"></a>7、cat 命令</h4><p>（用于查看文本文件的内容，后接要查看的文件名，通常可用管道与 more 和 less 一起使用）</p>\n<ul>\n<li><code>cat file1</code> 从第一个字节开始正向查看文件的内容</li>\n<li><code>cat -n file1</code> 标示文件的行数</li>\n<li><code>cat xxx.txt</code>   awk ‘NR%2&#x3D;&#x3D;1’</li>\n<li><code>tac file1</code> 从最后一行开始反向查看一个文件的内容</li>\n<li><code>more file1</code> 查看一个长文件的内容</li>\n<li><code>less file1</code>  类似 more 命令，但允许方向操作</li>\n<li><code>head -n 2 file1</code> 查看一个文件的前两行</li>\n<li><code>tail -f /log/msg</code>  实时查看添加到⽂件中的内容</li>\n<li><code>tail -n 2 file1</code> 查看一个文件的最后两行</li>\n<li><code>tail -n +1000 file1</code> 从1000行开始显示，显示1000行以后的</li>\n<li><code>cat filename | head -n 3000 | tail -n +1000</code> 显示1000行到3000行</li>\n<li><code>cat filename | tail -n +3000 | head -n 1000</code> 从第3000行开始，显示1000(即显示3000~3999行)</li>\n<li><code>grep ss hello.txt</code>  在⽂件hello.txt中查找关键词 ss </li>\n<li><code>grep ^s hello.txt </code>  在⽂件hello.txt中查找以 s 开头的内容</li>\n<li><code>grep [0-9] hello.txt</code>  选择hello.txt⽂件中所有包含数字的⾏</li>\n<li><code>sed &#39;s/ss/mm/g&#39; hello.txt</code>  将hello.txt⽂件中的 ss 替换成 mm</li>\n<li><code>sed &#39;/^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有空⽩⾏</li>\n<li><code>sed &#39;/ *#/d; /^$/d&#39; hello.txt </code>  从hello.txt⽂件中删除所有注释和空⽩⾏</li>\n<li><code>sed -e &#39;1d&#39; hello.txt</code>   从⽂件hello.txt 中排除第⼀⾏</li>\n<li><code>sed -n &#39;/s1/p&#39; hello.txt </code>  查看只包含关键词”s1”的⾏</li>\n<li><code>sed -e &#39;s/ *$//&#39; hello.txt</code>  删除每⼀⾏最后的空⽩字符</li>\n<li><code>sed -e &#39;s/s1//g&#39; hello.txt</code>  从⽂档中只删除词汇s1并保留剩余全部</li>\n<li><code>sed -n &#39;1,5p;5q&#39; hello.txt</code>  查看从第⼀⾏到第5⾏内容</li>\n<li><code>sed -n &#39;5p;5q&#39; hello.txt</code>  查看第5⾏</li>\n<li><code>paste file1 file2</code>  合并两个⽂件或两栏的内容</li>\n<li><code>paste -d &#39;+&#39; file1 file2 </code>  合并两个⽂件或两栏的内容，中间⽤”+”区分</li>\n<li><code>sort file1 file2</code>  排序两个⽂件的内容</li>\n<li><code>sort file1 file2</code>   uniq</li>\n<li><code>sort file1 file2</code>   uniq -u</li>\n<li><code>sort file1 file2</code>   uniq -d</li>\n<li><code>comm -1 file1 file2 </code>  ⽐较两个⽂件的内容(去除’file1’所含内容)</li>\n<li><code>comm -2 file1 file2</code>  ⽐较两个⽂件的内容(去除’file2’所含内容)</li>\n<li><code>comm -3 file1 file2</code>  ⽐较两个⽂件的内容(去除两⽂件共有部分)</li>\n</ul>\n<h3 id=\"三、文件搜索\"><a href=\"#三、文件搜索\" class=\"headerlink\" title=\"三、文件搜索\"></a>三、文件搜索</h3><h4 id=\"8、find-命令\"><a href=\"#8、find-命令\" class=\"headerlink\" title=\"8、find 命令\"></a>8、find 命令</h4><ul>\n<li><code>find / -name file</code> 从根目录开始搜索文件&#x2F;目录</li>\n<li><code>find / -user user1</code>  搜索用户 user1 的文件&#x2F;目录</li>\n<li><code>find /dir -name *.bin</code>  在目录&#x2F;dir 中搜索带有 .bin 后缀的文件</li>\n<li><code>find / -name file1</code> 从 ‘&#x2F;‘ 开始进入根文件系统搜索文件和目录（完整文件或文件名）</li>\n<li><code>find / -user user1</code> 搜索属于用户 ‘user1’ 的文件和目录</li>\n<li><code>find /usr/bin -type f -atime +100</code> 搜索在过去100天内未被使用过的执行文件</li>\n<li><code>find /usr/bin -type f -mtime -10</code> 搜索在10天内被创建或者修改过的文件</li>\n<li><code>find . -regex &#39;.*\\(net\\|comm\\).*&#39;</code>  ‘-regex’ 选项匹配整个路径名，出当前目录树中所有文件名中任意位置包含字符串 net 或 comm 的文件</li>\n<li><code>locate *.mp4</code>  寻找 .mp4结尾的文件</li>\n<li>whereis &lt;关键词&gt; 显示某⼆进制⽂件&#x2F;可执⾏⽂件的路径</li>\n<li><code>whereis halt</code> 显示一个二进制文件、源码或man的位置</li>\n<li>which &lt;关键词&gt;   查找系统⽬录下某的⼆进制⽂件</li>\n<li><code>which halt</code> 显示一个二进制文件或可执行文件的完整路径</li>\n</ul>\n<h3 id=\"四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\"><a href=\"#四、文件的权限-使用-“-”-设置权限，使用-“-“-用于取消\" class=\"headerlink\" title=\"四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消\"></a>四、文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><h4 id=\"9、chmod-命令\"><a href=\"#9、chmod-命令\" class=\"headerlink\" title=\"9、chmod 命令\"></a>9、chmod 命令</h4><ul>\n<li><code>ls -lh</code> 显示当前目录所有文件的权限</li>\n<li><code>chmod 777</code> 文件名  修改文件权限（最高权限）</li>\n<li><code>chmod ugo+rwx dir</code> 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r，4 ）、写(w，2)和执行(x，1)的权限</li>\n<li><code>chmod go-rwx dir1</code> 删除群组(g)与其他人(o)对目录的读写执行权限</li>\n<li>chmod <strong>u</strong>+s &#x2F;bin&#x2F;file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</li>\n<li>chmod <strong>u</strong>-s &#x2F;bin&#x2F;file1 禁用一个二进制文件的 SUID位</li>\n<li><code>chmod g+s /home/public</code> 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</li>\n<li><code>chmod g-s /home/public</code> 禁用一个目录的 SGID 位</li>\n<li>chmod <strong>o</strong>+t &#x2F;home&#x2F;public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</li>\n<li>chmod <strong>o</strong>-t &#x2F;home&#x2F;public 禁用一个目录的 STIKY 位</li>\n<li>chmod +<strong>x</strong> 文件路径 为所有者、所属组和其他用户添加执行的权限</li>\n<li>chmod -<strong>x</strong> 文件路径 为所有者、所属组和其他用户删除执行的权限</li>\n<li>chmod <strong>u</strong>+<strong>x</strong> 文件路径 为所有者添加执行的权限</li>\n<li>chmod g+<strong>x</strong> 文件路径 为所属组添加执行的权限</li>\n<li><code>chmod o+x</code> 文件路径 为其他用户添加执行的权限</li>\n<li><code>chmod ug+x</code> 文件路径 为所有者、所属组添加执行的权限</li>\n<li><code>chmod =wx</code> 文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</li>\n<li><code>chmod ug=wx</code> 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</li>\n</ul>\n<h4 id=\"10、chown-命令\"><a href=\"#10、chown-命令\" class=\"headerlink\" title=\"10、chown 命令\"></a>10、chown 命令</h4><p>（改变文件的所有者）</p>\n<ul>\n<li><code>chown user1 file1</code> 改变一个文件的所有人属性</li>\n<li><code>chown -R user1 dir1</code> 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</li>\n<li><code>chown user1:group1 file1</code> 改变一个文件的所有人和群组属性</li>\n</ul>\n<h4 id=\"11、chgrp-命令\"><a href=\"#11、chgrp-命令\" class=\"headerlink\" title=\"11、chgrp 命令\"></a>11、chgrp 命令</h4><p>（改变文件所属用户组）</p>\n<ul>\n<li><code>chgrp group1 file1</code> 改变文件的群组</li>\n</ul>\n<h3 id=\"五、文本处理\"><a href=\"#五、文本处理\" class=\"headerlink\" title=\"五、文本处理\"></a>五、文本处理</h3><h4 id=\"12、grep-命令\"><a href=\"#12、grep-命令\" class=\"headerlink\" title=\"12、grep 命令\"></a>12、grep 命令</h4><p>（分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等）</p>\n<ul>\n<li><code>grep Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找关键词”Aug”</li>\n<li><code>grep ^Aug /var/log/messages</code> 在文件 ‘&#x2F;var&#x2F;log&#x2F;messages’中查找以”Aug”开始的词汇</li>\n<li><code>grep [0-9] /var/log/messages</code> 选择 ‘&#x2F;var&#x2F;log&#x2F;messages’ 文件中所有包含数字的行</li>\n<li><code>grep Aug -R /var/log/*</code> 在目录 ‘&#x2F;var&#x2F;log’ 及随后的目录中搜索字符串”Aug”</li>\n<li><code>sed &#39;s/stringa1/stringa2/g&#39; example.txt</code> 将example.txt文件中的 “string1” 替换成 “string2”</li>\n<li><code>sed &#39;/^$/d&#39; example.txt</code> 从example.txt文件中删除所有空白行</li>\n</ul>\n<h4 id=\"13、paste-命令\"><a href=\"#13、paste-命令\" class=\"headerlink\" title=\"13、paste 命令\"></a>13、paste 命令</h4><ul>\n<li><code>paste file1 file2</code> 合并两个文件或两栏的内容（查看两文件合并后的内容）</li>\n<li><code>paste -d &#39;+&#39; file1 file2</code> 合并两个文件或两栏的内容，中间用”+”区分</li>\n</ul>\n<h4 id=\"14、sort-命令\"><a href=\"#14、sort-命令\" class=\"headerlink\" title=\"14、sort 命令\"></a>14、sort 命令</h4><ul>\n<li><code>sort file1 file2</code> 排序两个文件的内容</li>\n<li><code>sort file1 file2 | uniq</code> 取出两个文件的并集(重复的行只保留一份)</li>\n<li><code>sort file1 file2 | uniq -u</code> 删除交集，留下其他的行</li>\n<li><code>sort file1 file2 | uniq -d</code> 取出两个文件的交集(只留下同时存在于两个文件中的文件)</li>\n</ul>\n<h4 id=\"15、comm-命令\"><a href=\"#15、comm-命令\" class=\"headerlink\" title=\"15、comm 命令\"></a>15、comm 命令</h4><ul>\n<li><code>comm -1 file1 file2</code> 比较两个文件的内容只删除 ‘file1’ 所包含的内容</li>\n<li><code>comm -2 file1 file2</code> 比较两个文件的内容只删除 ‘file2’ 所包含的内容</li>\n<li><code>comm -3 file1 file2</code> 比较两个文件的内容只删除两个文件共有的部</li>\n</ul>\n<h3 id=\"六、打包和压缩文件\"><a href=\"#六、打包和压缩文件\" class=\"headerlink\" title=\"六、打包和压缩文件\"></a>六、打包和压缩文件</h3><h4 id=\"16、tar-命令\"><a href=\"#16、tar-命令\" class=\"headerlink\" title=\"16、tar 命令\"></a>16、tar 命令</h4><p>&#x3D;&#x3D;对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压）推荐&#x3D;&#x3D;（重新整理）</p>\n<ul>\n<li>-c ：新建打包文件</li>\n<li>-t ：查看打包文件的内容含有哪些文件名</li>\n<li>-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中</li>\n<li>-j ：通过bzip2的支持进行压缩&#x2F;解压缩</li>\n<li>-z ：通过gzip的支持进行压缩&#x2F;解压缩</li>\n<li>-v ：在压缩&#x2F;解压缩过程中，将正在处理的文件名显示出来</li>\n<li>-f filename ：filename为要处理的文件</li>\n<li>-C dir ：指定压缩&#x2F;解压缩的目录dir</li>\n<li>压缩：<code>tar -jcv -f filename.tar.bz2</code> 要被处理的文件或目录名称</li>\n<li>查询：<code>tar -jtv -f filename.tar.bz2</code></li>\n<li>解压：<code>tar -jxv -f filename.tar.bz2 -C</code> 欲解压缩的目录</li>\n<li><code>bunzip2 file1.bz2</code> 解压一个叫做 ‘file1.bz2’的文件</li>\n<li><code>bzip2 file1</code> 压缩一个叫做 ‘file1’ 的文件</li>\n<li><code>gunzip file1.gz</code> 解压一个叫做 ‘file1.gz’的文件</li>\n<li><code>gzip file1</code> 压缩一个叫做 ‘file1’的文件</li>\n<li><code>gzip -9 file1</code> 最大程度压缩</li>\n<li><code>rar a file1.rar test_file</code> 创建一个叫做 ‘file1.rar’ 的包</li>\n<li><code>rar a file1.rar file1 file2 dir1</code> 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</li>\n<li><code>rar x file1.rar</code> 解压rar包</li>\n<li><code>zip file1.zip file1</code> 创建一个zip格式的压缩包</li>\n<li><code>unzip file1.zip</code> 解压一个zip格式压缩包</li>\n<li><code>zip -r file1.zip file1 file2 dir1</code> 将几个文件和目录同时压缩成一个zip格式的压缩包</li>\n</ul>\n<h3 id=\"七、进程相关的命令\"><a href=\"#七、进程相关的命令\" class=\"headerlink\" title=\"七、进程相关的命令\"></a>七、进程相关的命令</h3><h4 id=\"17、ps-命令\"><a href=\"#17、ps-命令\" class=\"headerlink\" title=\"17、ps 命令\"></a>17、ps 命令</h4><p>用于将某个时间点的进程运行情况选取下来并输出，process之意</p>\n<ul>\n<li>-A ：所有的进程均显示出来</li>\n<li>-a ：不与terminal有关的所有进程</li>\n<li>-u ：有效用户的相关进程</li>\n<li>-x ：一般与a参数一起使用，可列出较完整的信息</li>\n<li>-l ：较长，较详细地将PID的信息列出</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef <span class=\"comment\"># 显示所有进程的详细信息。</span></span><br><span class=\"line\">ps aux <span class=\"comment\"># 查看系统所有的进程数据</span></span><br><span class=\"line\">ps ax <span class=\"comment\"># 查看不与terminal有关的所有进程</span></span><br><span class=\"line\">ps -lA <span class=\"comment\"># 查看系统所有的进程数据</span></span><br><span class=\"line\">ps axjf <span class=\"comment\"># 查看连同一部分进程树状态</span></span><br><span class=\"line\">netstat -lntp <span class=\"comment\"># 查看各个节点及进程</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18、kill-命令\"><a href=\"#18、kill-命令\" class=\"headerlink\" title=\"18、kill 命令\"></a>18、kill 命令</h4><ul>\n<li>kill -9 pid  （-9表示强制关闭）</li>\n<li>kill -9 程序的名字</li>\n<li>kill - </li>\n<li>pkill 程序的名字</li>\n</ul>\n<h4 id=\"19、Vim-下复制粘贴等操作\"><a href=\"#19、Vim-下复制粘贴等操作\" class=\"headerlink\" title=\"19、Vim 下复制粘贴等操作\"></a>19、Vim 下复制粘贴等操作</h4><ul>\n<li><p>x,X : 在一行中，x为向后删除一个字符（相当于del键），X为向前删除一个字符（相当于backspace键）</p>\n</li>\n<li><p>dd : 删除光标所在的那一整行</p>\n</li>\n<li><p>ndd : n 为数字。从光标开始，删除向下n列</p>\n</li>\n<li><p>yy : 复制光标所在的那一行</p>\n</li>\n<li><p>nyy : n为数字。复制光标所在的向下n行</p>\n</li>\n<li><p>p,P : p 为将已复制的数据粘贴到光标的下一行，P则为贴在光标的上一行</p>\n</li>\n<li><p>u : 复原前一个操作</p>\n</li>\n<li><p>CTRL + r : 重做上一个操作</p>\n</li>\n<li><p>小数点 ‘.’：重复前一个动作</p>\n</li>\n<li><p>:set number :在每一行设置行标号</p>\n</li>\n<li><p>:n1,n2 m n3 移动n1-n2行(包括n1,n2)到n3行之下</p>\n</li>\n<li><p>:n1,n2 co n3 复制n1-n2行(包括n1,n2)到n3行之下</p>\n</li>\n<li><p>:n1,n2 d 删除n1-n2行(包括n1,n2)行</p>\n</li>\n</ul>\n<h3 id=\"系统常用命令\"><a href=\"#系统常用命令\" class=\"headerlink\" title=\"系统常用命令\"></a>系统常用命令</h3><h4 id=\"关机、注销、重启\"><a href=\"#关机、注销、重启\" class=\"headerlink\" title=\"关机、注销、重启\"></a>关机、注销、重启</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看进程端口号：netstat -tunlp|grep 端口号 </span><br><span class=\"line\">ss -tnl  查看正在已使用的端口</span><br><span class=\"line\">shutdown -h now 关闭系统(1) 即刻关机</span><br><span class=\"line\">shutdown -h 10 10分钟后关机</span><br><span class=\"line\">shutdown -h 11:00  11:00 关机</span><br><span class=\"line\">shutdown -h +10 预定时间关机（10分钟后关机）</span><br><span class=\"line\">shutdown -c  取消指定时间关机</span><br><span class=\"line\">shutdown -f now 重启</span><br><span class=\"line\">shutdown -r 10  10分钟后重启</span><br><span class=\"line\">shutdown -r 11:00   定时重启</span><br><span class=\"line\">reboot 重启</span><br><span class=\"line\">init 6 重启</span><br><span class=\"line\">init 0 即刻关机</span><br><span class=\"line\">telinit 0 关机</span><br><span class=\"line\">poweroff   立刻关机</span><br><span class=\"line\">halt 关机</span><br><span class=\"line\"><span class=\"built_in\">sync</span>  buff数据同步到磁盘</span><br><span class=\"line\"><span class=\"built_in\">logout</span> 退出登录Shell</span><br><span class=\"line\">time 测算一个命令（即程序）的执行时间</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"系统信息和性能查看\"><a href=\"#系统信息和性能查看\" class=\"headerlink\" title=\"系统信息和性能查看\"></a>系统信息和性能查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看系统的详细信息</span></span><br><span class=\"line\">lsb_release -a</span><br><span class=\"line\"><span class=\"comment\"># 查看内核/OS/CPU信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a </span><br><span class=\"line\"><span class=\"comment\"># 查看内核版本</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br><span class=\"line\"><span class=\"comment\"># 查看处理器架构</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -m</span><br><span class=\"line\"><span class=\"comment\"># 查看处理器架构</span></span><br><span class=\"line\"><span class=\"built_in\">arch</span></span><br><span class=\"line\"><span class=\"comment\"># 查看主机名称</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"comment\"># 显示当前登录系统的用户</span></span><br><span class=\"line\"><span class=\"built_in\">who</span></span><br><span class=\"line\"><span class=\"comment\"># 显示登陆时的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> am i</span><br><span class=\"line\"><span class=\"comment\"># 显示当前用户名</span></span><br><span class=\"line\"><span class=\"built_in\">whoami</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 linux 版本信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/version</span><br><span class=\"line\"><span class=\"comment\"># 查看 CPU 信息</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"><span class=\"comment\"># 查看中断</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/interrupts</span><br><span class=\"line\"><span class=\"comment\"># 查看系统负载</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/loadavg</span><br><span class=\"line\"><span class=\"comment\"># 查看系统运行时间、用户数、负载</span></span><br><span class=\"line\"><span class=\"built_in\">uptime</span></span><br><span class=\"line\"><span class=\"comment\"># 查看系统的环境便令</span></span><br><span class=\"line\"><span class=\"built_in\">env</span></span><br><span class=\"line\"><span class=\"comment\"># 查看系统PCI设备信息</span></span><br><span class=\"line\">lspci -tv</span><br><span class=\"line\"><span class=\"comment\"># 查看已加载的系统模块</span></span><br><span class=\"line\">lsmod</span><br><span class=\"line\"><span class=\"comment\"># 查看内存总量</span></span><br><span class=\"line\">grep MemTotal /proc/meminfo</span><br><span class=\"line\"><span class=\"comment\"># 查看空闲内存量</span></span><br><span class=\"line\">grep MemFree /proc/meminfo</span><br><span class=\"line\"><span class=\"comment\"># 查看内存用量和交换区用量</span></span><br><span class=\"line\">free -m</span><br><span class=\"line\"><span class=\"comment\"># 显示系统时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"><span class=\"comment\"># 显示2021日历表</span></span><br><span class=\"line\">cal 2021</span><br><span class=\"line\"><span class=\"comment\"># 动态显示cpu/内存/进程情况</span></span><br><span class=\"line\">top</span><br><span class=\"line\"><span class=\"comment\"># 每1秒采一次系统状态，采20次</span></span><br><span class=\"line\">vmstat 1 20 </span><br><span class=\"line\"><span class=\"comment\"># 查看io读写/cpu使用情况</span></span><br><span class=\"line\">iostat</span><br><span class=\"line\"><span class=\"comment\"># 查看 cpu 使用情况（1秒1次，共10次）</span></span><br><span class=\"line\">sar -u 1 10</span><br><span class=\"line\"><span class=\"comment\"># 查询磁盘性能</span></span><br><span class=\"line\">sar -d 1 10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出占用内存资源最多的前 10 个进程</span></span><br><span class=\"line\">ps -auxf | <span class=\"built_in\">sort</span> -nr -k 4 | <span class=\"built_in\">head</span> -10</span><br><span class=\"line\"><span class=\"comment\"># 找出占用 CPU 资源最多的前 10 个进程</span></span><br><span class=\"line\">ps -auxf | <span class=\"built_in\">sort</span> -nr -k 3 | <span class=\"built_in\">head</span> -10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"磁盘和分区\"><a href=\"#磁盘和分区\" class=\"headerlink\" title=\"磁盘和分区\"></a>磁盘和分区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看所属有磁盘分区</span></span><br><span class=\"line\">fdisk -l</span><br><span class=\"line\"><span class=\"comment\"># 查看所有交换分区</span></span><br><span class=\"line\">swapon -s</span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘使用情况及挂载点</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -h</span><br><span class=\"line\"><span class=\"comment\"># 查看磁盘使用情况及挂载点</span></span><br><span class=\"line\"><span class=\"built_in\">df</span> -hl</span><br><span class=\"line\"><span class=\"comment\"># 查看指定某个目录大小</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -sh /dir</span><br><span class=\"line\"><span class=\"comment\"># 从高到底依次显示文件和目录大小</span></span><br><span class=\"line\"><span class=\"built_in\">du</span> -sk * | <span class=\"built_in\">sort</span> -rn</span><br><span class=\"line\"><span class=\"comment\"># 查看内存</span></span><br><span class=\"line\">free -h</span><br><span class=\"line\"><span class=\"comment\"># 查看CPUs</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /proc/cpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 挂在hda2盘</span></span><br><span class=\"line\">mount /dev/hda2 /mnt/hda2</span><br><span class=\"line\"><span class=\"comment\"># 指定⽂件系统类型挂载（如ntfs）</span></span><br><span class=\"line\">mount -t ntfs /dev/sdc1 /mnt/usbhd1</span><br><span class=\"line\"><span class=\"comment\"># 挂载iso⽂件</span></span><br><span class=\"line\">mount -o loop xxx.iso /mnt/cdrom</span><br><span class=\"line\"><span class=\"comment\"># 挂载usb盘/闪存设备</span></span><br><span class=\"line\">mount /dev/sda1 /mnt/usbdisk</span><br><span class=\"line\"><span class=\"comment\"># 通过设备名卸载</span></span><br><span class=\"line\">umount -v /dev/sda1</span><br><span class=\"line\"><span class=\"comment\"># 通过挂载点卸载</span></span><br><span class=\"line\">umount -v /mnt/mymnt</span><br><span class=\"line\"><span class=\"comment\"># 强制卸载(慎⽤)</span></span><br><span class=\"line\">fuser -km /mnt/hda1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户和用户组\"><a href=\"#用户和用户组\" class=\"headerlink\" title=\"用户和用户组\"></a>用户和用户组</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建用户</span></span><br><span class=\"line\">useradd ss</span><br><span class=\"line\"><span class=\"comment\"># 查看所用系统用户</span></span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d: -f1 /etc/passwd</span><br><span class=\"line\"><span class=\"comment\"># 删除用户</span></span><br><span class=\"line\">userdel -r ss</span><br><span class=\"line\"><span class=\"comment\"># 创建用户组</span></span><br><span class=\"line\">groupadd group_name</span><br><span class=\"line\"><span class=\"comment\"># 查看系统所有组</span></span><br><span class=\"line\"><span class=\"built_in\">cut</span> -d: -f1 /etc/group</span><br><span class=\"line\"><span class=\"comment\"># 删除用户组</span></span><br><span class=\"line\">groupdel group_name</span><br><span class=\"line\"><span class=\"comment\"># 修改用户的组</span></span><br><span class=\"line\">usermod -g group_name user_name</span><br><span class=\"line\"><span class=\"comment\"># 将用户添加到组</span></span><br><span class=\"line\">usermod -aG group_name user_name</span><br><span class=\"line\"><span class=\"comment\"># 修改用户 ss 的登录 Shell、主目录及用户组</span></span><br><span class=\"line\">usermod -s /bin/ksh -d /home/codepig –g dev ss</span><br><span class=\"line\"><span class=\"comment\"># 查看 ss 用户所在的组</span></span><br><span class=\"line\"><span class=\"built_in\">groups</span> ss</span><br><span class=\"line\"><span class=\"comment\"># 切换到另一个用户环境</span></span><br><span class=\"line\">su user_name</span><br><span class=\"line\"><span class=\"comment\"># 修改口令</span></span><br><span class=\"line\">passwd</span><br><span class=\"line\"><span class=\"comment\"># 修改用户密码</span></span><br><span class=\"line\">passwd ss</span><br><span class=\"line\"><span class=\"comment\"># 查看用户活动</span></span><br><span class=\"line\">w</span><br><span class=\"line\"><span class=\"comment\"># 查看指定用户 ss 的信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> ss</span><br><span class=\"line\"><span class=\"comment\"># 查看用户登录日志</span></span><br><span class=\"line\">last</span><br><span class=\"line\"><span class=\"comment\"># 查看当前用户的计划任务</span></span><br><span class=\"line\">crontab -l</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络和进程管理\"><a href=\"#网络和进程管理\" class=\"headerlink\" title=\"网络和进程管理\"></a>网络和进程管理</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看网络接口属性</span></span><br><span class=\"line\">ifconfig</span><br><span class=\"line\"><span class=\"comment\"># 查看某网卡的配置</span></span><br><span class=\"line\">ifconfig eth0</span><br><span class=\"line\"><span class=\"comment\"># 查看路由表</span></span><br><span class=\"line\">route -n</span><br><span class=\"line\"><span class=\"comment\"># 查看所有监听端⼝</span></span><br><span class=\"line\">netstat -lntp</span><br><span class=\"line\"><span class=\"comment\"># 查看已经建立连接的TCP连接</span></span><br><span class=\"line\">netstat -antp</span><br><span class=\"line\"><span class=\"comment\"># 查看TCP/UDP的状态信息</span></span><br><span class=\"line\">netstat -lutp</span><br><span class=\"line\"><span class=\"comment\"># 启⽤eth0⽹络设备</span></span><br><span class=\"line\">ifup eth0</span><br><span class=\"line\"><span class=\"comment\"># 禁⽤eth0⽹络设备</span></span><br><span class=\"line\">ifdown eth0</span><br><span class=\"line\"><span class=\"comment\"># 查看iptables规则</span></span><br><span class=\"line\">iptables -L</span><br><span class=\"line\"><span class=\"comment\"># 配置ip地址</span></span><br><span class=\"line\">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</span><br><span class=\"line\"><span class=\"comment\"># 以dhcp模式启⽤eth0</span></span><br><span class=\"line\">dhclient eth0</span><br><span class=\"line\"><span class=\"comment\"># 配置默认⽹关</span></span><br><span class=\"line\">route add -net 0/0 gw Gateway_IP</span><br><span class=\"line\"><span class=\"comment\"># 配置静态路由到达⽹络&#x27;192.168.0.0/16&#x27;</span></span><br><span class=\"line\">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</span><br><span class=\"line\"><span class=\"comment\"># 删除静态路由</span></span><br><span class=\"line\">route del 0/0 gw Gateway_IP</span><br><span class=\"line\"><span class=\"comment\"># 查看主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"><span class=\"comment\"># 解析主机名</span></span><br><span class=\"line\">host 主机名  例如：host www.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 查询DNS记录，查看域名解析是否正常</span></span><br><span class=\"line\">nslookup 主机名  例如：nslookup wwww.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 查看所有进程</span></span><br><span class=\"line\">ps -ef</span><br><span class=\"line\"><span class=\"comment\"># 过滤出你需要的进程</span></span><br><span class=\"line\">ps -ef|grep redis</span><br><span class=\"line\"><span class=\"comment\"># kill指定名称的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s name</span><br><span class=\"line\"><span class=\"comment\"># kill指定pid的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -s pid</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clhq7pcx50009w0uh0cmzdle2","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcx9000hw0uh5jusbyr2"},{"post_id":"clhq7pcwx0001w0uh6cwg8c8v","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxb000lw0uhchdqg2yl"},{"post_id":"clhq7pcx7000fw0uh3nm035x5","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxc000ow0uhgxc0g5z7"},{"post_id":"clhq7pcx00003w0uhcgiwdglr","category_id":"clhq7pcx6000cw0uh5l741xcx","_id":"clhq7pcxd000sw0uh53au2a53"},{"post_id":"clhq7pcx8000gw0uhggmzh0fn","category_id":"clhq7pcx6000cw0uh5l741xcx","_id":"clhq7pcxe000vw0uhdpj8flin"},{"post_id":"clhq7pcxb000kw0uh08n04a4t","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxe000yw0uha5jv9om1"},{"post_id":"clhq7pcx30007w0uhamnw18yj","category_id":"clhq7pcx6000cw0uh5l741xcx","_id":"clhq7pcxf0011w0uh1kzvfr8j"},{"post_id":"clhq7pcxb000nw0uh52f01hvk","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxg0013w0uh9f6aco7o"},{"post_id":"clhq7pcxd000rw0uhcjvjaoy3","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxg0017w0uhfb4zg3wm"},{"post_id":"clhq7pcx5000bw0uh6nkg2l75","category_id":"clhq7pcxc000pw0uh4saperic","_id":"clhq7pcxh001aw0uhf9897zco"},{"post_id":"clhq7pcxd000uw0uh57q4ecco","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxi001dw0uhdvbv0u2r"},{"post_id":"clhq7pcxe000xw0uh7zzbeb26","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxk001hw0uh587m64wp"},{"post_id":"clhq7pcxf0010w0uh9yixht9p","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcxl001kw0uh9qhcfxez"},{"post_id":"clhq7pcxf0012w0uh4xwp6yml","category_id":"clhq7pcxh0018w0uh3tqmb5b3","_id":"clhq7pcxm001ow0uh6k5cgxfl"},{"post_id":"clhq7pcxg0016w0uh5iux2e5s","category_id":"clhq7pcxh0018w0uh3tqmb5b3","_id":"clhq7pcxn001uw0uhc02b35cp"},{"post_id":"clhq7pcxh0019w0uh4w4wfj97","category_id":"clhq7pcxh0018w0uh3tqmb5b3","_id":"clhq7pcxp001zw0uh6nh0c91v"},{"post_id":"clhq7pcxl001jw0uhcf1jf73v","category_id":"clhq7pcxn001tw0uh4cgy798i","_id":"clhq7pcxp0023w0uh9k0b377d"},{"post_id":"clhq7pcxl001mw0uha4bgf4kt","category_id":"clhq7pcxp0020w0uhcsb1gx5z","_id":"clhq7pcxq0027w0uhbubddai3"},{"post_id":"clhq7pcxm001qw0uhck8tgmp3","category_id":"clhq7pcxp0024w0uh7n22ac0k","_id":"clhq7pcxq002bw0uh8gnofkab"},{"post_id":"clhq7pcxn001sw0uhfea62jux","category_id":"clhq7pcxq0028w0uhge3m403v","_id":"clhq7pcxr002gw0uh8bnc2gv4"},{"post_id":"clhq7pcxo001ww0uh7s4p0ch0","category_id":"clhq7pcxp0020w0uhcsb1gx5z","_id":"clhq7pcxs002jw0uhb8ukb7mm"},{"post_id":"clhq7pcxo001yw0uh3rkiftwe","category_id":"clhq7pcxp0020w0uhcsb1gx5z","_id":"clhq7pcxs002mw0uh0fyjc1cv"},{"post_id":"clhq7pcy8002yw0uhhvcp9eh6","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcya0033w0uh8itlhkcf"},{"post_id":"clhq7pcy9002zw0uh7aid7zib","category_id":"clhq7pcx20004w0uh6el615bh","_id":"clhq7pcya0034w0uh2r3h3170"},{"post_id":"clhq7pcy90031w0uh9b8z1oxx","category_id":"clhq7pcx6000cw0uh5l741xcx","_id":"clhq7pcya0036w0uhc35zei78"}],"PostTag":[{"post_id":"clhq7pcwx0001w0uh6cwg8c8v","tag_id":"clhq7pcx30005w0uh7gbt365o","_id":"clhq7pcx7000ew0uhezkq01jq"},{"post_id":"clhq7pcx00003w0uhcgiwdglr","tag_id":"clhq7pcx6000dw0uh0x8y4ivw","_id":"clhq7pcxb000mw0uhgk5ihyc8"},{"post_id":"clhq7pcx30007w0uhamnw18yj","tag_id":"clhq7pcx9000jw0uhglfgeudh","_id":"clhq7pcxd000tw0uh7qucfd4f"},{"post_id":"clhq7pcx50009w0uh0cmzdle2","tag_id":"clhq7pcxc000qw0uhgluy45vx","_id":"clhq7pcxf000zw0uhbmzf5npj"},{"post_id":"clhq7pcx5000bw0uh6nkg2l75","tag_id":"clhq7pcxe000ww0uh96nj4t9b","_id":"clhq7pcxg0015w0uh6ya28r4l"},{"post_id":"clhq7pcx7000fw0uh3nm035x5","tag_id":"clhq7pcxg0014w0uhcm7hd31j","_id":"clhq7pcxi001ew0uheb9l0uwg"},{"post_id":"clhq7pcx8000gw0uhggmzh0fn","tag_id":"clhq7pcxh001bw0uhel2e65tq","_id":"clhq7pcxl001lw0uhgopncdde"},{"post_id":"clhq7pcxb000kw0uh08n04a4t","tag_id":"clhq7pcxk001iw0uha3swf56q","_id":"clhq7pcxn001rw0uh2hd43kus"},{"post_id":"clhq7pcxb000nw0uh52f01hvk","tag_id":"clhq7pcxk001iw0uha3swf56q","_id":"clhq7pcxo001xw0uh8nodhfrn"},{"post_id":"clhq7pcxd000rw0uhcjvjaoy3","tag_id":"clhq7pcxn001vw0uh84ci773r","_id":"clhq7pcxp0022w0uhe75vdbkc"},{"post_id":"clhq7pcxd000uw0uh57q4ecco","tag_id":"clhq7pcxk001iw0uha3swf56q","_id":"clhq7pcxq0026w0uh71il8255"},{"post_id":"clhq7pcxe000xw0uh7zzbeb26","tag_id":"clhq7pcxq0025w0uhauokarro","_id":"clhq7pcxq002aw0uh1zumcr98"},{"post_id":"clhq7pcxf0010w0uh9yixht9p","tag_id":"clhq7pcxq0025w0uhauokarro","_id":"clhq7pcxr002ew0uh7d5v43yq"},{"post_id":"clhq7pcxg0016w0uh5iux2e5s","tag_id":"clhq7pcxr002dw0uh5694h59n","_id":"clhq7pcxs002iw0uha6yc5jdq"},{"post_id":"clhq7pcxh001cw0uh7s8a5t8k","tag_id":"clhq7pcxr002hw0uh6oqwghvb","_id":"clhq7pcxs002lw0uh1cvecwd4"},{"post_id":"clhq7pcxl001jw0uhcf1jf73v","tag_id":"clhq7pcxr002hw0uh6oqwghvb","_id":"clhq7pcxt002ow0uhh6y94t3w"},{"post_id":"clhq7pcxl001mw0uha4bgf4kt","tag_id":"clhq7pcxt002nw0uh3iiffye6","_id":"clhq7pcxt002qw0uh5g6y0px1"},{"post_id":"clhq7pcxm001qw0uhck8tgmp3","tag_id":"clhq7pcxt002nw0uh3iiffye6","_id":"clhq7pcxu002sw0uh4vow2pxj"},{"post_id":"clhq7pcxn001sw0uhfea62jux","tag_id":"clhq7pcxt002nw0uh3iiffye6","_id":"clhq7pcxu002uw0uheaqs32wh"},{"post_id":"clhq7pcxo001ww0uh7s4p0ch0","tag_id":"clhq7pcxt002nw0uh3iiffye6","_id":"clhq7pcxu002ww0uhgore4igb"},{"post_id":"clhq7pcxo001yw0uh3rkiftwe","tag_id":"clhq7pcxt002nw0uh3iiffye6","_id":"clhq7pcxv002xw0uh3wh4bl9n"},{"post_id":"clhq7pcy8002yw0uhhvcp9eh6","tag_id":"clhq7pcxq0025w0uhauokarro","_id":"clhq7pcy90030w0uh3iyd4d4t"},{"post_id":"clhq7pcy9002zw0uh7aid7zib","tag_id":"clhq7pcya0032w0uh8nbj7rml","_id":"clhq7pcya0037w0uh9ofm3hft"},{"post_id":"clhq7pcy90031w0uh9b8z1oxx","tag_id":"clhq7pcya0035w0uh24fq6y6j","_id":"clhq7pcya0038w0uh0gmw2x2c"}],"Tag":[{"name":"maven","_id":"clhq7pcx30005w0uh7gbt365o"},{"name":"jdk","_id":"clhq7pcx6000dw0uh0x8y4ivw"},{"name":"docker","_id":"clhq7pcx9000jw0uhglfgeudh"},{"name":"git","_id":"clhq7pcxc000qw0uhgluy45vx"},{"name":"node","_id":"clhq7pcxe000ww0uh96nj4t9b"},{"name":"mysql","_id":"clhq7pcxg0014w0uhcm7hd31j"},{"name":"Linux","_id":"clhq7pcxh001bw0uhel2e65tq"},{"name":"List","_id":"clhq7pcxk001iw0uha3swf56q"},{"name":"redis","_id":"clhq7pcxn001vw0uh84ci773r"},{"name":"nginx","_id":"clhq7pcxq0025w0uhauokarro"},{"name":"二叉树","_id":"clhq7pcxr002dw0uh5694h59n"},{"name":"test","_id":"clhq7pcxr002hw0uh6oqwghvb"},{"name":"数据结构","_id":"clhq7pcxt002nw0uh3iiffye6"},{"name":"SpringBoot","_id":"clhq7pcya0032w0uh8nbj7rml"},{"name":"linux","_id":"clhq7pcya0035w0uh24fq6y6j"}]}}